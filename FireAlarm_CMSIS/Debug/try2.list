
try2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080073b0  080073b0  000173b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077dc  080077dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e4  080077e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  080079c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080079c8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc45  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002277  00000000  00000000  0002fe51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000320c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc3  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d9e  00000000  00000000  00056c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e34  00000000  00000000  000679f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013982d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  00139880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007394 	.word	0x08007394

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007394 	.word	0x08007394

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f023 030f 	bic.w	r3, r3, #15
 8000ef0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2304      	movs	r3, #4
 8000f2a:	214e      	movs	r1, #78	; 0x4e
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <lcd_send_cmd+0x5c>)
 8000f2e:	f001 fb63 	bl	80025f8 <HAL_I2C_Master_Transmit>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000214 	.word	0x20000214

08000f40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	f043 030d 	orr.w	r3, r3, #13
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f043 0309 	orr.w	r3, r3, #9
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	f043 030d 	orr.w	r3, r3, #13
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	f043 0309 	orr.w	r3, r3, #9
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f80:	f107 0208 	add.w	r2, r7, #8
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2304      	movs	r3, #4
 8000f8a:	214e      	movs	r1, #78	; 0x4e
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <lcd_send_data+0x5c>)
 8000f8e:	f001 fb33 	bl	80025f8 <HAL_I2C_Master_Transmit>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000214 	.word	0x20000214

08000fa0 <lcd_clear>:

void lcd_clear (void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ff9b 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 ff10 	bl	8001dd0 <HAL_Delay>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <lcd_put_cur+0x18>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d005      	beq.n	8000fd6 <lcd_put_cur+0x22>
 8000fca:	e009      	b.n	8000fe0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd2:	603b      	str	r3, [r7, #0]
            break;
 8000fd4:	e004      	b.n	8000fe0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fdc:	603b      	str	r3, [r7, #0]
            break;
 8000fde:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff7b 	bl	8000ee0 <lcd_send_cmd>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <lcd_init>:


void lcd_init (void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f000 feea 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ffc:	2030      	movs	r0, #48	; 0x30
 8000ffe:	f7ff ff6f 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001002:	2005      	movs	r0, #5
 8001004:	f000 fee4 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001008:	2030      	movs	r0, #48	; 0x30
 800100a:	f7ff ff69 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fede 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f7ff ff63 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f000 fed8 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001020:	2020      	movs	r0, #32
 8001022:	f7ff ff5d 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f000 fed2 	bl	8001dd0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800102c:	2028      	movs	r0, #40	; 0x28
 800102e:	f7ff ff57 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 fecc 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001038:	2008      	movs	r0, #8
 800103a:	f7ff ff51 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 fec6 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ff4b 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fec0 	bl	8001dd0 <HAL_Delay>
	HAL_Delay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 febd 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001056:	2006      	movs	r0, #6
 8001058:	f7ff ff42 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 feb7 	bl	8001dd0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001062:	200c      	movs	r0, #12
 8001064:	f7ff ff3c 	bl	8000ee0 <lcd_send_cmd>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001074:	e006      	b.n	8001084 <lcd_send_string+0x18>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff5e 	bl	8000f40 <lcd_send_data>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f4      	bne.n	8001076 <lcd_send_string+0xa>
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800109e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d013      	beq.n	80010d6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010b6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010be:	e000      	b.n	80010c2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010c0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f9      	beq.n	80010c0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <delay+0x30>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80010f6:	bf00      	nop
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <delay+0x30>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f9      	bcc.n	80010f8 <delay+0x14>
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000270 	.word	0x20000270

08001118 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 0);
 8001134:	2100      	movs	r1, #0
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff ff3c 	bl	8000fb4 <lcd_put_cur>

	sprintf (str, "TEMP:- %.2f ", Temp);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fa23 	bl	8000588 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f107 000c 	add.w	r0, r7, #12
 800114a:	4907      	ldr	r1, [pc, #28]	; (8001168 <Display_Temp+0x50>)
 800114c:	f003 fef6 	bl	8004f3c <siprintf>
	lcd_send_string(str);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff89 	bl	800106c <lcd_send_string>
	lcd_send_data('C');
 800115a:	2043      	movs	r0, #67	; 0x43
 800115c:	f7ff fef0 	bl	8000f40 <lcd_send_data>
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	080073b0 	.word	0x080073b0

0800116c <Display_Rh>:

void Display_Rh (float Rh)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
	lcd_put_cur(1, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff ff12 	bl	8000fb4 <lcd_put_cur>

	sprintf (str, "RH:- %.2f ", Rh);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff f9f9 	bl	8000588 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	f107 000c 	add.w	r0, r7, #12
 800119e:	4907      	ldr	r1, [pc, #28]	; (80011bc <Display_Rh+0x50>)
 80011a0:	f003 fecc 	bl	8004f3c <siprintf>
	lcd_send_string(str);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <lcd_send_string>
	lcd_send_data('%');
 80011ae:	2025      	movs	r0, #37	; 0x25
 80011b0:	f7ff fec6 	bl	8000f40 <lcd_send_data>
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080073c0 	.word	0x080073c0

080011c0 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fef8 	bl	8001fe4 <HAL_GPIO_Init>
}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 feda 	bl	8001fe4 <HAL_GPIO_Init>
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	delay (18000);   // wait for 18ms
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
	delay (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input*/

	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 800123c:	2102      	movs	r1, #2
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <DHT11_Start+0x4c>)
 8001240:	f7ff ffbe 	bl	80011c0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	2102      	movs	r1, #2
 8001248:	480e      	ldr	r0, [pc, #56]	; (8001284 <DHT11_Start+0x4c>)
 800124a:	f001 f877 	bl	800233c <HAL_GPIO_WritePin>
	      /* Nivel de comienzo de comunicación */
	delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f7ff ff47 	bl	80010e4 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2102      	movs	r1, #2
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <DHT11_Start+0x4c>)
 800125c:	f001 f86e 	bl	800233c <HAL_GPIO_WritePin>
	delay (18000);
 8001260:	f244 6050 	movw	r0, #18000	; 0x4650
 8001264:	f7ff ff3e 	bl	80010e4 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	2102      	movs	r1, #2
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <DHT11_Start+0x4c>)
 800126e:	f001 f865 	bl	800233c <HAL_GPIO_WritePin>
	delay(20);
 8001272:	2014      	movs	r0, #20
 8001274:	f7ff ff36 	bl	80010e4 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8001278:	2102      	movs	r1, #2
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <DHT11_Start+0x4c>)
 800127c:	f7ff ffbe 	bl	80011fc <Set_Pin_Input>

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020000 	.word	0x40020000

08001288 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f7ff ff26 	bl	80010e4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001298:	2102      	movs	r1, #2
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <DHT11_Check_Response+0x58>)
 800129c:	f001 f836 	bl	800230c <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10e      	bne.n	80012c4 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 80012a6:	2050      	movs	r0, #80	; 0x50
 80012a8:	f7ff ff1c 	bl	80010e4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80012ac:	2102      	movs	r1, #2
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <DHT11_Check_Response+0x58>)
 80012b0:	f001 f82c 	bl	800230c <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <DHT11_Check_Response+0x38>
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e001      	b.n	80012c4 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 80012c0:	23ff      	movs	r3, #255	; 0xff
 80012c2:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80012c4:	bf00      	nop
 80012c6:	2102      	movs	r1, #2
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <DHT11_Check_Response+0x58>)
 80012ca:	f001 f81f 	bl	800230c <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f8      	bne.n	80012c6 <DHT11_Check_Response+0x3e>

	return Response;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000

080012e4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	e037      	b.n	8001360 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80012f0:	bf00      	nop
 80012f2:	2102      	movs	r1, #2
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <DHT11_Read+0x8c>)
 80012f6:	f001 f809 	bl	800230c <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f8      	beq.n	80012f2 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8001300:	2028      	movs	r0, #40	; 0x28
 8001302:	f7ff feef 	bl	80010e4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001306:	2102      	movs	r1, #2
 8001308:	4819      	ldr	r0, [pc, #100]	; (8001370 <DHT11_Read+0x8c>)
 800130a:	f000 ffff 	bl	800230c <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10e      	bne.n	8001332 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2201      	movs	r2, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	b25b      	sxtb	r3, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	b25a      	sxtb	r2, r3
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	4013      	ands	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	e00b      	b.n	800134a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	f1c3 0307 	rsb	r3, r3, #7
 8001338:	2201      	movs	r2, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	b25a      	sxtb	r2, r3
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4313      	orrs	r3, r2
 8001346:	b25b      	sxtb	r3, r3
 8001348:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800134a:	bf00      	nop
 800134c:	2102      	movs	r1, #2
 800134e:	4808      	ldr	r0, [pc, #32]	; (8001370 <DHT11_Read+0x8c>)
 8001350:	f000 ffdc 	bl	800230c <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f8      	bne.n	800134c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	3301      	adds	r3, #1
 800135e:	71bb      	strb	r3, [r7, #6]
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d9c4      	bls.n	80012f0 <DHT11_Read+0xc>
	}
	return i;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020000 	.word	0x40020000

08001374 <RED_LED>:


}

void RED_LED (void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <RED_LED+0x2c>)
 8001380:	f000 ffdc 	bl	800233c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001384:	2064      	movs	r0, #100	; 0x64
 8001386:	f000 fd23 	bl	8001dd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <RED_LED+0x2c>)
 8001392:	f000 ffd3 	bl	800233c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001396:	2032      	movs	r0, #50	; 0x32
 8001398:	f000 fd1a 	bl	8001dd0 <HAL_Delay>
	//int value = 10;

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020000 	.word	0x40020000

080013a4 <Buzzer>:

void Buzzer (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	  //while (value<255)
	  //{
		  htim2.Instance->CCR1 = value;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <Buzzer+0x44>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <Buzzer+0x48>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
		  value +=20;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <Buzzer+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3314      	adds	r3, #20
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <Buzzer+0x44>)
 80013bc:	701a      	strb	r2, [r3, #0]
		  HAL_Delay (500);
 80013be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013c2:	f000 fd05 	bl	8001dd0 <HAL_Delay>
		  if (Temperature < 32){
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <Buzzer+0x4c>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80013f4 <Buzzer+0x50>
 80013d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d400      	bmi.n	80013dc <Buzzer+0x38>
			  value = 255;
		  }
	  //}

}
 80013da:	e002      	b.n	80013e2 <Buzzer+0x3e>
			  value = 255;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <Buzzer+0x44>)
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	701a      	strb	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001f8 	.word	0x200001f8
 80013ec:	200002b8 	.word	0x200002b8
 80013f0:	200001fc 	.word	0x200001fc
 80013f4:	42000000 	.word	0x42000000

080013f8 <_write>:

int _write(int file, char *ptr, int len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e009      	b.n	8001422 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe3d 	bl	8001096 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf1      	blt.n	800140e <_write+0x16>
  return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001438:	f000 fc58 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143c:	f000 f8c4 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001440:	f000 fa0e 	bl	8001860 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001444:	f000 f932 	bl	80016ac <MX_I2C1_Init>
  MX_TIM6_Init();
 8001448:	f000 f9d4 	bl	80017f4 <MX_TIM6_Init>
  MX_TIM2_Init();
 800144c:	f000 f95c 	bl	8001708 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8001450:	484e      	ldr	r0, [pc, #312]	; (800158c <main+0x158>)
 8001452:	f002 f9cf 	bl	80037f4 <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

   lcd_init();
 8001456:	f7ff fdcc 	bl	8000ff2 <lcd_init>
   lcd_send_string("INITIALISING>>>>");
 800145a:	484d      	ldr	r0, [pc, #308]	; (8001590 <main+0x15c>)
 800145c:	f7ff fe06 	bl	800106c <lcd_send_string>
   HAL_Delay(2000);
 8001460:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001464:	f000 fcb4 	bl	8001dd0 <HAL_Delay>
   lcd_clear ();
 8001468:	f7ff fd9a 	bl	8000fa0 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  Display_Temp(Temperature);
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <main+0x160>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	f7ff fe4f 	bl	8001118 <Display_Temp>
	  	  Display_Rh(Humidity);
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <main+0x164>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	f7ff fe72 	bl	800116c <Display_Rh>


	  	  /********************** DHT11 *********************/
	  	  DHT11_Start();
 8001488:	f7ff fed6 	bl	8001238 <DHT11_Start>
	  	  Presence = DHT11_Check_Response();
 800148c:	f7ff fefc 	bl	8001288 <DHT11_Check_Response>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <main+0x168>)
 8001496:	701a      	strb	r2, [r3, #0]
	  	  Rh_byte1 = DHT11_Read ();
 8001498:	f7ff ff24 	bl	80012e4 <DHT11_Read>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <main+0x16c>)
 80014a2:	701a      	strb	r2, [r3, #0]
	  	  Rh_byte2 = DHT11_Read ();
 80014a4:	f7ff ff1e 	bl	80012e4 <DHT11_Read>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <main+0x170>)
 80014ae:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte1 = DHT11_Read ();
 80014b0:	f7ff ff18 	bl	80012e4 <DHT11_Read>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <main+0x174>)
 80014ba:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte2 = DHT11_Read ();
 80014bc:	f7ff ff12 	bl	80012e4 <DHT11_Read>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <main+0x178>)
 80014c6:	701a      	strb	r2, [r3, #0]
	  	  SUM = DHT11_Read();
 80014c8:	f7ff ff0c 	bl	80012e4 <DHT11_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <main+0x17c>)
 80014d2:	801a      	strh	r2, [r3, #0]

	  	  TEMP = Temp_byte1;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <main+0x174>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <main+0x180>)
 80014dc:	801a      	strh	r2, [r3, #0]
	  	  RH = Rh_byte1;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <main+0x16c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <main+0x184>)
 80014e6:	801a      	strh	r2, [r3, #0]

	  	  Temperature = (float) TEMP;
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <main+0x180>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <main+0x160>)
 80014f6:	edc3 7a00 	vstr	s15, [r3]
	  	  Humidity = (float) RH;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <main+0x184>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <main+0x164>)
 8001508:	edc3 7a00 	vstr	s15, [r3]


		  if(Temperature > 40){
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <main+0x160>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80015bc <main+0x188>
 8001516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd18      	ble.n	8001552 <main+0x11e>
			  if(Humidity<40){
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <main+0x164>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015bc <main+0x188>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d525      	bpl.n	8001580 <main+0x14c>
				  RED_LED ();
 8001534:	f7ff ff1e 	bl	8001374 <RED_LED>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800153e:	4820      	ldr	r0, [pc, #128]	; (80015c0 <main+0x18c>)
 8001540:	f000 fefc 	bl	800233c <HAL_GPIO_WritePin>
				  //HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <main+0x190>)
 8001548:	f002 fa16 	bl	8003978 <HAL_TIM_PWM_Start>
				  Buzzer();
 800154c:	f7ff ff2a 	bl	80013a4 <Buzzer>
 8001550:	e016      	b.n	8001580 <main+0x14c>
			  }
		  }
		  else if(Temperature < 40){
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <main+0x160>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80015bc <main+0x188>
 800155c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d50c      	bpl.n	8001580 <main+0x14c>
			  //LED_green();
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800156c:	4814      	ldr	r0, [pc, #80]	; (80015c0 <main+0x18c>)
 800156e:	f000 fee5 	bl	800233c <HAL_GPIO_WritePin>
		  	  HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f000 fc2c 	bl	8001dd0 <HAL_Delay>
		  	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001578:	2100      	movs	r1, #0
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <main+0x190>)
 800157c:	f002 fac4 	bl	8003b08 <HAL_TIM_PWM_Stop>
	  	  //HAL_Delay(500);
	  	  //value = 10;
	  	  //printf ("Temperature : %f \n",Temperature);

	  	  //value = 0;
	  	  HAL_Delay(1200);
 8001580:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001584:	f000 fc24 	bl	8001dd0 <HAL_Delay>
	  	  Display_Temp(Temperature);
 8001588:	e770      	b.n	800146c <main+0x38>
 800158a:	bf00      	nop
 800158c:	20000270 	.word	0x20000270
 8001590:	080073cc 	.word	0x080073cc
 8001594:	200001fc 	.word	0x200001fc
 8001598:	20000200 	.word	0x20000200
 800159c:	20000204 	.word	0x20000204
 80015a0:	20000268 	.word	0x20000268
 80015a4:	2000026f 	.word	0x2000026f
 80015a8:	2000026e 	.word	0x2000026e
 80015ac:	20000302 	.word	0x20000302
 80015b0:	20000300 	.word	0x20000300
 80015b4:	2000026c 	.word	0x2000026c
 80015b8:	2000026a 	.word	0x2000026a
 80015bc:	42200000 	.word	0x42200000
 80015c0:	40020000 	.word	0x40020000
 80015c4:	200002b8 	.word	0x200002b8

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 f83e 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <SystemClock_Config+0xdc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <SystemClock_Config+0xdc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <SystemClock_Config+0xdc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <SystemClock_Config+0xe0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <SystemClock_Config+0xe0>)
 8001612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <SystemClock_Config+0xe0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800163c:	23b4      	movs	r3, #180	; 0xb4
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fde1 	bl	8003218 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800165c:	f000 f952 	bl	8001904 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001660:	f001 fad2 	bl	8002c08 <HAL_PWREx_EnableOverDrive>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800166a:	f000 f94b 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001672:	2302      	movs	r3, #2
 8001674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800167a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2105      	movs	r1, #5
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fb0b 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001698:	f000 f934 	bl	8001904 <Error_Handler>
  }
}
 800169c:	bf00      	nop
 800169e:	3750      	adds	r7, #80	; 0x50
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_I2C1_Init+0x50>)
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <MX_I2C1_Init+0x54>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_I2C1_Init+0x50>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_I2C1_Init+0x58>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_I2C1_Init+0x50>)
 80016ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_I2C1_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_I2C1_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_I2C1_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_I2C1_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_I2C1_Init+0x50>)
 80016ea:	f000 fe41 	bl	8002370 <HAL_I2C_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f4:	f000 f906 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000214 	.word	0x20000214
 8001700:	40005400 	.word	0x40005400
 8001704:	000186a0 	.word	0x000186a0

08001708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	; 0x38
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_TIM2_Init+0xe8>)
 800173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 692-1;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <MX_TIM2_Init+0xe8>)
 8001742:	f240 22b3 	movw	r2, #691	; 0x2b3
 8001746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_TIM2_Init+0xe8>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_TIM2_Init+0xe8>)
 8001750:	22fe      	movs	r2, #254	; 0xfe
 8001752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_TIM2_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_TIM2_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001760:	4823      	ldr	r0, [pc, #140]	; (80017f0 <MX_TIM2_Init+0xe8>)
 8001762:	f001 fff7 	bl	8003754 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800176c:	f000 f8ca 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	4619      	mov	r1, r3
 800177c:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_TIM2_Init+0xe8>)
 800177e:	f002 faf1 	bl	8003d64 <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001788:	f000 f8bc 	bl	8001904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM2_Init+0xe8>)
 800178e:	f002 f899 	bl	80038c4 <HAL_TIM_PWM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001798:	f000 f8b4 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_TIM2_Init+0xe8>)
 80017ac:	f002 feae 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017b6:	f000 f8a5 	bl	8001904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ba:	2360      	movs	r3, #96	; 0x60
 80017bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM2_Init+0xe8>)
 80017d2:	f002 fa09 	bl	8003be8 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017dc:	f000 f892 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM2_Init+0xe8>)
 80017e2:	f000 f93b 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002b8 	.word	0x200002b8

080017f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_TIM6_Init+0x64>)
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <MX_TIM6_Init+0x68>)
 8001806:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_TIM6_Init+0x64>)
 800180a:	2231      	movs	r2, #49	; 0x31
 800180c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_TIM6_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_TIM6_Init+0x64>)
 8001816:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800181a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_TIM6_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_TIM6_Init+0x64>)
 8001824:	f001 ff96 	bl	8003754 <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800182e:	f000 f869 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_TIM6_Init+0x64>)
 8001840:	f002 fe64 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800184a:	f000 f85b 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000270 	.word	0x20000270
 800185c:	40001000 	.word	0x40001000

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <MX_GPIO_Init+0x9c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <MX_GPIO_Init+0x9c>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_GPIO_Init+0x9c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_GPIO_Init+0x9c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <MX_GPIO_Init+0x9c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_GPIO_Init+0x9c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_GPIO_Init+0x9c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <MX_GPIO_Init+0x9c>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_GPIO_Init+0x9c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11|Buzzer_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f641 0106 	movw	r1, #6150	; 0x1806
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <MX_GPIO_Init+0xa0>)
 80018d2:	f000 fd33 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA11 Buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11|Buzzer_Pin;
 80018d6:	f641 0306 	movw	r3, #6150	; 0x1806
 80018da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_GPIO_Init+0xa0>)
 80018f0:	f000 fb78 	bl	8001fe4 <HAL_GPIO_Init>

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_MspInit+0x4c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_I2C_MspInit+0x84>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12c      	bne.n	80019dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b0:	2304      	movs	r3, #4
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <HAL_I2C_MspInit+0x8c>)
 80019bc:	f000 fb12 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a1e:	e012      	b.n	8001a46 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_TIM_Base_MspInit+0x64>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40001000 	.word	0x40001000

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d11d      	bne.n	8001aba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab6:	f000 fa95 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f93a 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3a:	f002 fd63 	bl	8004604 <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
	return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b62:	e7fe      	b.n	8001b62 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
	}

return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 fce4 	bl	8004604 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000208 	.word	0x20000208
 8001c70:	20000318 	.word	0x20000318

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 fca3 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fbb3 	bl	8001434 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cdc:	080077ec 	.word	0x080077ec
  ldr r2, =_sbss
 8001ce0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ce4:	20000318 	.word	0x20000318

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f931 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fdf6 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f93b 	bl	8001fca <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f911 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000304 	.word	0x20000304

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000304 	.word	0x20000304

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008

08001e18 <__NVIC_SetPriorityGrouping>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_SetPriority>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff47 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff5c 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff8e 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb0 	bl	8001f38 <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e165      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8154 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ae 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_GPIO_Init+0x300>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x308>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_GPIO_Init+0x30c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x310>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x314>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_GPIO_Init+0x318>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x20a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x206>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x320>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x202>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x324>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_GPIO_Init+0x324>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae96 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e001      	b.n	800232e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e12b      	b.n	80025da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fae2 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d4:	f000 fd5a 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a81      	ldr	r2, [pc, #516]	; (80025e4 <HAL_I2C_Init+0x274>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d807      	bhi.n	80023f4 <HAL_I2C_Init+0x84>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <HAL_I2C_Init+0x278>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e006      	b.n	8002402 <HAL_I2C_Init+0x92>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a7d      	ldr	r2, [pc, #500]	; (80025ec <HAL_I2C_Init+0x27c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0e7      	b.n	80025da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a78      	ldr	r2, [pc, #480]	; (80025f0 <HAL_I2C_Init+0x280>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a6a      	ldr	r2, [pc, #424]	; (80025e4 <HAL_I2C_Init+0x274>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d802      	bhi.n	8002444 <HAL_I2C_Init+0xd4>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	e009      	b.n	8002458 <HAL_I2C_Init+0xe8>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_I2C_Init+0x284>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	495c      	ldr	r1, [pc, #368]	; (80025e4 <HAL_I2C_Init+0x274>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d819      	bhi.n	80024ac <HAL_I2C_Init+0x13c>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e59      	subs	r1, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fbb1 f3f3 	udiv	r3, r1, r3
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800248c:	400b      	ands	r3, r1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_I2C_Init+0x138>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e59      	subs	r1, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a6:	e051      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e04f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_I2C_Init+0x168>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e012      	b.n	80024fe <HAL_I2C_Init+0x18e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x196>
 8002502:	2301      	movs	r3, #1
 8002504:	e022      	b.n	800254c <HAL_I2C_Init+0x1dc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <HAL_I2C_Init+0x1bc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e58      	subs	r0, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	440b      	add	r3, r1
 800251c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252a:	e00f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6809      	ldr	r1, [r1, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800257a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6911      	ldr	r1, [r2, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	000186a0 	.word	0x000186a0
 80025e8:	001e847f 	.word	0x001e847f
 80025ec:	003d08ff 	.word	0x003d08ff
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	10624dd3 	.word	0x10624dd3

080025f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	460b      	mov	r3, r1
 8002606:	817b      	strh	r3, [r7, #10]
 8002608:	4613      	mov	r3, r2
 800260a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fbd4 	bl	8001db8 <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	f040 80e0 	bne.w	80027e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2319      	movs	r3, #25
 8002626:	2201      	movs	r2, #1
 8002628:	4970      	ldr	r1, [pc, #448]	; (80027ec <HAL_I2C_Master_Transmit+0x1f4>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f964 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	e0d3      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x50>
 8002644:	2302      	movs	r3, #2
 8002646:	e0cc      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d007      	beq.n	800266e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2210      	movs	r2, #16
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	893a      	ldrh	r2, [r7, #8]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f89c 	bl	80027f4 <I2C_MasterRequestWrite>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026dc:	e066      	b.n	80027ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f9de 	bl	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00d      	beq.n	800270a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d107      	bne.n	8002706 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d11b      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x188>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6a39      	ldr	r1, [r7, #32]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f9ce 	bl	8002b26 <I2C_WaitOnBTFFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01a      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d194      	bne.n	80026de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	00100002 	.word	0x00100002
 80027f0:	ffff0000 	.word	0xffff0000

080027f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d006      	beq.n	800281e <I2C_MasterRequestWrite+0x2a>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <I2C_MasterRequestWrite+0x2a>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800281c:	d108      	bne.n	8002830 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00b      	b.n	8002848 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	2b12      	cmp	r3, #18
 8002836:	d107      	bne.n	8002848 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002846:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f84f 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d103      	bne.n	8002878 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e035      	b.n	80028e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002884:	d108      	bne.n	8002898 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e01b      	b.n	80028d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002898:	897b      	ldrh	r3, [r7, #10]
 800289a:	11db      	asrs	r3, r3, #7
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0306 	and.w	r3, r3, #6
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f063 030f 	orn	r3, r3, #15
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <I2C_MasterRequestWrite+0xfc>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f875 	bl	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e010      	b.n	80028e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028c6:	897b      	ldrh	r3, [r7, #10]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <I2C_MasterRequestWrite+0x100>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f865 	bl	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	00010008 	.word	0x00010008
 80028f4:	00010002 	.word	0x00010002

080028f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002908:	e025      	b.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d021      	beq.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff fa51 	bl	8001db8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d116      	bne.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e023      	b.n	800299e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10d      	bne.n	800297c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	e00c      	b.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d0b6      	beq.n	800290a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b4:	e051      	b.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d123      	bne.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e046      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d021      	beq.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7ff f9cf 	bl	8001db8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d116      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e020      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10c      	bne.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e00b      	b.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d18d      	bne.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab0:	e02d      	b.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f878 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e02d      	b.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d021      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7ff f975 	bl	8001db8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d116      	bne.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e007      	b.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d1ca      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b32:	e02d      	b.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f837 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e02d      	b.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d021      	beq.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4c:	f7ff f934 	bl	8001db8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d1ca      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d11b      	bne.n	8002bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x94>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c34:	f7ff f8c0 	bl	8001db8 <HAL_GetTick>
 8002c38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c3a:	e009      	b.n	8002c50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c3c:	f7ff f8bc 	bl	8001db8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4a:	d901      	bls.n	8002c50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e01f      	b.n	8002c90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7ff f8a8 	bl	8001db8 <HAL_GetTick>
 8002c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6a:	e009      	b.n	8002c80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c6c:	f7ff f8a4 	bl	8001db8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7a:	d901      	bls.n	8002c80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e007      	b.n	8002c90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	420e0040 	.word	0x420e0040
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	420e0044 	.word	0x420e0044

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7ff f80e 	bl	8001db8 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7ff f80a 	bl	8001db8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f841 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe ff6e 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080073e0 	.word	0x080073e0
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff0 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	080073f0 	.word	0x080073f0

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b088      	sub	sp, #32
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4bce      	ldr	r3, [pc, #824]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 818d 	bhi.w	80031f8 <HAL_RCC_GetSysClockFreq+0x344>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	080031f9 	.word	0x080031f9
 8002eec:	080031f9 	.word	0x080031f9
 8002ef0:	080031f9 	.word	0x080031f9
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	080031f9 	.word	0x080031f9
 8002efc:	080031f9 	.word	0x080031f9
 8002f00:	080031f9 	.word	0x080031f9
 8002f04:	08002f25 	.word	0x08002f25
 8002f08:	080031f9 	.word	0x080031f9
 8002f0c:	080031f9 	.word	0x080031f9
 8002f10:	080031f9 	.word	0x080031f9
 8002f14:	08003099 	.word	0x08003099
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4bbd      	ldr	r3, [pc, #756]	; (8003210 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f1a:	61bb      	str	r3, [r7, #24]
       break;
 8002f1c:	e16f      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4bbd      	ldr	r3, [pc, #756]	; (8003214 <HAL_RCC_GetSysClockFreq+0x360>)
 8002f20:	61bb      	str	r3, [r7, #24]
      break;
 8002f22:	e16c      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4bb9      	ldr	r3, [pc, #740]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4bb7      	ldr	r3, [pc, #732]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d053      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4bb4      	ldr	r3, [pc, #720]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	461a      	mov	r2, r3
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	ea02 0400 	and.w	r4, r2, r0
 8002f52:	603c      	str	r4, [r7, #0]
 8002f54:	400b      	ands	r3, r1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	014b      	lsls	r3, r1, #5
 8002f6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f6e:	0142      	lsls	r2, r0, #5
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	1ac0      	subs	r0, r0, r3
 8002f78:	462b      	mov	r3, r5
 8002f7a:	eb61 0103 	sbc.w	r1, r1, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	018b      	lsls	r3, r1, #6
 8002f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f8c:	0182      	lsls	r2, r0, #6
 8002f8e:	1a12      	subs	r2, r2, r0
 8002f90:	eb63 0301 	sbc.w	r3, r3, r1
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	00d9      	lsls	r1, r3, #3
 8002f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa2:	00d0      	lsls	r0, r2, #3
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4621      	mov	r1, r4
 8002faa:	1852      	adds	r2, r2, r1
 8002fac:	4629      	mov	r1, r5
 8002fae:	eb43 0101 	adc.w	r1, r3, r1
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0259      	lsls	r1, r3, #9
 8002fbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fc2:	0250      	lsls	r0, r2, #9
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f7fd fe08 	bl	8000be8 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e04c      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b8a      	ldr	r3, [pc, #552]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	ea02 0a00 	and.w	sl, r2, r0
 8002ffa:	ea03 0b01 	and.w	fp, r3, r1
 8002ffe:	4650      	mov	r0, sl
 8003000:	4659      	mov	r1, fp
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	014b      	lsls	r3, r1, #5
 800300c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003010:	0142      	lsls	r2, r0, #5
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	ebb0 000a 	subs.w	r0, r0, sl
 800301a:	eb61 010b 	sbc.w	r1, r1, fp
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800302c:	0182      	lsls	r2, r0, #6
 800302e:	1a12      	subs	r2, r2, r0
 8003030:	eb63 0301 	sbc.w	r3, r3, r1
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	00d9      	lsls	r1, r3, #3
 800303e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003042:	00d0      	lsls	r0, r2, #3
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	eb12 020a 	adds.w	r2, r2, sl
 800304c:	eb43 030b 	adc.w	r3, r3, fp
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	0299      	lsls	r1, r3, #10
 800305a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800305e:	0290      	lsls	r0, r2, #10
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	461a      	mov	r2, r3
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f7fd fdba 	bl	8000be8 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	61bb      	str	r3, [r7, #24]
      break;
 8003096:	e0b2      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04d      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	ea02 0800 	and.w	r8, r2, r0
 80030c6:	ea03 0901 	and.w	r9, r3, r1
 80030ca:	4640      	mov	r0, r8
 80030cc:	4649      	mov	r1, r9
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	014b      	lsls	r3, r1, #5
 80030d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030dc:	0142      	lsls	r2, r0, #5
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	ebb0 0008 	subs.w	r0, r0, r8
 80030e6:	eb61 0109 	sbc.w	r1, r1, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030f8:	0182      	lsls	r2, r0, #6
 80030fa:	1a12      	subs	r2, r2, r0
 80030fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	00d9      	lsls	r1, r3, #3
 800310a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310e:	00d0      	lsls	r0, r2, #3
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	eb12 0208 	adds.w	r2, r2, r8
 8003118:	eb43 0309 	adc.w	r3, r3, r9
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	0259      	lsls	r1, r3, #9
 8003126:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800312a:	0250      	lsls	r0, r2, #9
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f7fd fd54 	bl	8000be8 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e04a      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	461a      	mov	r2, r3
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	ea02 0400 	and.w	r4, r2, r0
 8003162:	ea03 0501 	and.w	r5, r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	014b      	lsls	r3, r1, #5
 8003174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003178:	0142      	lsls	r2, r0, #5
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	1b00      	subs	r0, r0, r4
 8003180:	eb61 0105 	sbc.w	r1, r1, r5
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	018b      	lsls	r3, r1, #6
 800318e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003192:	0182      	lsls	r2, r0, #6
 8003194:	1a12      	subs	r2, r2, r0
 8003196:	eb63 0301 	sbc.w	r3, r3, r1
 800319a:	f04f 0000 	mov.w	r0, #0
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	00d9      	lsls	r1, r3, #3
 80031a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a8:	00d0      	lsls	r0, r2, #3
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1912      	adds	r2, r2, r4
 80031b0:	eb45 0303 	adc.w	r3, r5, r3
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0299      	lsls	r1, r3, #10
 80031be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031c2:	0290      	lsls	r0, r2, #10
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	f7fd fd08 	bl	8000be8 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_GetSysClockFreq+0x358>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0f1b      	lsrs	r3, r3, #28
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	61bb      	str	r3, [r7, #24]
      break;
 80031f6:	e002      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031fa:	61bb      	str	r3, [r7, #24]
      break;
 80031fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fe:	69bb      	ldr	r3, [r7, #24]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	007a1200 	.word	0x007a1200

08003218 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e28d      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8083 	beq.w	800333e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003238:	4b94      	ldr	r3, [pc, #592]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b04      	cmp	r3, #4
 8003242:	d019      	beq.n	8003278 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003244:	4b91      	ldr	r3, [pc, #580]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800324c:	2b08      	cmp	r3, #8
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003250:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b84      	ldr	r3, [pc, #528]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x124>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e25a      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x90>
 800329a:	4b7c      	ldr	r3, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7b      	ldr	r2, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xcc>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xb4>
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a75      	ldr	r2, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a72      	ldr	r2, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xcc>
 80032cc:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6b      	ldr	r2, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fd64 	bl	8001db8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fd60 	bl	8001db8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e21f      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xdc>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fd50 	bl	8001db8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fd4c 	bl	8001db8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e20b      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b57      	ldr	r3, [pc, #348]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x104>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d06f      	beq.n	800342a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800334a:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d017      	beq.n	8003386 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003356:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d105      	bne.n	800336e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d11c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_RCC_OscConfig+0x274>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x186>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1d3      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	e03a      	b.n	800342a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCC_OscConfig+0x278>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fcf9 	bl	8001db8 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fe fcf5 	bl	8001db8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1b4      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4925      	ldr	r1, [pc, #148]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_OscConfig+0x278>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fcd8 	bl	8001db8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340c:	f7fe fcd4 	bl	8001db8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e193      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d036      	beq.n	80034a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fcb8 	bl	8001db8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe fcb4 	bl	8001db8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e173      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x274>)
 8003460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x234>
 800346a:	e01b      	b.n	80034a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fe fca1 	bl	8001db8 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	e00e      	b.n	8003498 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347a:	f7fe fc9d 	bl	8001db8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d907      	bls.n	8003498 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e15c      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ea      	bne.n	800347a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8097 	beq.w	80035e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b83      	ldr	r3, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a7e      	ldr	r2, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a75      	ldr	r2, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fe fc5d 	bl	8001db8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fe fc59 	bl	8001db8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e118      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x31e>
 8003528:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e01c      	b.n	8003570 <HAL_RCC_OscConfig+0x358>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x340>
 800353e:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a60      	ldr	r2, [pc, #384]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5d      	ldr	r2, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x358>
 8003558:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a59      	ldr	r2, [pc, #356]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	4b57      	ldr	r3, [pc, #348]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fc1e 	bl	8001db8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe fc1a 	bl	8001db8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0d7      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ee      	beq.n	8003580 <HAL_RCC_OscConfig+0x368>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fc08 	bl	8001db8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe fc04 	bl	8001db8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0c1      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ee      	bne.n	80035ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a3a      	ldr	r2, [pc, #232]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80ad 	beq.w	8003744 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d060      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d145      	bne.n	800368a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_OscConfig+0x4b4>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fbd8 	bl	8001db8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe fbd4 	bl	8001db8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e093      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	491b      	ldr	r1, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x4b4>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fba9 	bl	8001db8 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fe fba5 	bl	8001db8 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e064      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x452>
 8003688:	e05c      	b.n	8003744 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x4b4>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe fb92 	bl	8001db8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fe fb8e 	bl	8001db8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e04d      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x480>
 80036b6:	e045      	b.n	8003744 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d107      	bne.n	80036d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e040      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000
 80036cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x538>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d030      	beq.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d129      	bne.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d122      	bne.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003708:	4293      	cmp	r3, r2
 800370a:	d119      	bne.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	3b01      	subs	r3, #1
 800371a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d10f      	bne.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e041      	b.n	80037ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe f938 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 fbaa 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e046      	b.n	800389a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_TIM_Base_Start+0xb4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d01d      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <HAL_TIM_Base_Start+0xb8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <HAL_TIM_Base_Start+0xbc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_TIM_Base_Start+0xc0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_TIM_Base_Start+0xc4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_TIM_Base_Start+0xc8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_TIM_Base_Start+0x70>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_TIM_Base_Start+0xcc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d010      	beq.n	8003898 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	e007      	b.n	8003898 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40010400 	.word	0x40010400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40001800 	.word	0x40001800

080038c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e041      	b.n	800395a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f839 	bl	8003962 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 faf2 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_TIM_PWM_Start+0x24>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e022      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d109      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x3e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e015      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d109      	bne.n	80039d0 <HAL_TIM_PWM_Start+0x58>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e008      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07c      	b.n	8003ae4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0x82>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x92>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fd48 	bl	80044c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2d      	ldr	r2, [pc, #180]	; (8003aec <HAL_TIM_PWM_Start+0x174>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_TIM_PWM_Start+0xcc>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <HAL_TIM_PWM_Start+0x178>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_PWM_Start+0xd0>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_TIM_PWM_Start+0xd2>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_TIM_PWM_Start+0x174>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d01d      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_TIM_PWM_Start+0x17c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_TIM_PWM_Start+0x180>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <HAL_TIM_PWM_Start+0x184>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <HAL_TIM_PWM_Start+0x178>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_TIM_PWM_Start+0x188>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIM_PWM_Start+0x136>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIM_PWM_Start+0x18c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d111      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d010      	beq.n	8003ae2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	e007      	b.n	8003ae2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40001800 	.word	0x40001800

08003b08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fcd0 	bl	80044c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <HAL_TIM_PWM_Stop+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_TIM_PWM_Stop+0x2c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <HAL_TIM_PWM_Stop+0xdc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_PWM_Stop+0x30>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_TIM_PWM_Stop+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d017      	beq.n	8003b6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_TIM_PWM_Stop+0x66>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f240 4344 	movw	r3, #1092	; 0x444
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_PWM_Stop+0x66>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_TIM_PWM_Stop+0x96>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	f240 4344 	movw	r3, #1092	; 0x444
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_TIM_PWM_Stop+0x96>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Stop+0xa6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bac:	e013      	b.n	8003bd6 <HAL_TIM_PWM_Stop+0xce>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Stop+0xb6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	e00b      	b.n	8003bd6 <HAL_TIM_PWM_Stop+0xce>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Stop+0xc6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	e003      	b.n	8003bd6 <HAL_TIM_PWM_Stop+0xce>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40010400 	.word	0x40010400

08003be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e0ac      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	f200 809f 	bhi.w	8003d50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003d51 	.word	0x08003d51
 8003c20:	08003d51 	.word	0x08003d51
 8003c24:	08003d51 	.word	0x08003d51
 8003c28:	08003c8d 	.word	0x08003c8d
 8003c2c:	08003d51 	.word	0x08003d51
 8003c30:	08003d51 	.word	0x08003d51
 8003c34:	08003d51 	.word	0x08003d51
 8003c38:	08003ccf 	.word	0x08003ccf
 8003c3c:	08003d51 	.word	0x08003d51
 8003c40:	08003d51 	.word	0x08003d51
 8003c44:	08003d51 	.word	0x08003d51
 8003c48:	08003d0f 	.word	0x08003d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f9ea 	bl	800402c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0208 	orr.w	r2, r2, #8
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	619a      	str	r2, [r3, #24]
      break;
 8003c8a:	e062      	b.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa3a 	bl	800410c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
      break;
 8003ccc:	e041      	b.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fa8f 	bl	80041f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0208 	orr.w	r2, r2, #8
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0204 	bic.w	r2, r2, #4
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	61da      	str	r2, [r3, #28]
      break;
 8003d0c:	e021      	b.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fae3 	bl	80042e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	61da      	str	r2, [r3, #28]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x18>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0b3      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x180>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d03e      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0xd0>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	f200 8087 	bhi.w	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	f000 8085 	beq.w	8003ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d87f      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d01a      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xa2>
 8003dd0:	2b70      	cmp	r3, #112	; 0x70
 8003dd2:	d87b      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d050      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x116>
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d877      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003ddc:	2b50      	cmp	r3, #80	; 0x50
 8003dde:	d03c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0xf6>
 8003de0:	2b50      	cmp	r3, #80	; 0x50
 8003de2:	d873      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d058      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x136>
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d86f      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003dec:	2b30      	cmp	r3, #48	; 0x30
 8003dee:	d064      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x156>
 8003df0:	2b30      	cmp	r3, #48	; 0x30
 8003df2:	d86b      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d060      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x156>
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d867      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05c      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x156>
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d05a      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e04:	e062      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f000 fb33 	bl	8004480 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	609a      	str	r2, [r3, #8]
      break;
 8003e32:	e04e      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f000 fb1c 	bl	8004480 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e56:	609a      	str	r2, [r3, #8]
      break;
 8003e58:	e03b      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f000 fa90 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2150      	movs	r1, #80	; 0x50
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fae9 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003e78:	e02b      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f000 faaf 	bl	80043ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2160      	movs	r1, #96	; 0x60
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fad9 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003e98:	e01b      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 fa70 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fac9 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e00b      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 fac0 	bl	800444a <TIM_ITRx_SetConfig>
        break;
 8003eca:	e002      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ecc:	bf00      	nop
 8003ece:	e000      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ed0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a40      	ldr	r2, [pc, #256]	; (8004000 <TIM_Base_SetConfig+0x114>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d00f      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <TIM_Base_SetConfig+0x118>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3c      	ldr	r2, [pc, #240]	; (8004008 <TIM_Base_SetConfig+0x11c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3b      	ldr	r2, [pc, #236]	; (800400c <TIM_Base_SetConfig+0x120>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <TIM_Base_SetConfig+0x124>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <TIM_Base_SetConfig+0x114>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d027      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <TIM_Base_SetConfig+0x118>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d023      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <TIM_Base_SetConfig+0x11c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <TIM_Base_SetConfig+0x120>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a29      	ldr	r2, [pc, #164]	; (8004010 <TIM_Base_SetConfig+0x124>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d017      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a28      	ldr	r2, [pc, #160]	; (8004014 <TIM_Base_SetConfig+0x128>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a27      	ldr	r2, [pc, #156]	; (8004018 <TIM_Base_SetConfig+0x12c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <TIM_Base_SetConfig+0x130>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a25      	ldr	r2, [pc, #148]	; (8004020 <TIM_Base_SetConfig+0x134>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a24      	ldr	r2, [pc, #144]	; (8004024 <TIM_Base_SetConfig+0x138>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a23      	ldr	r2, [pc, #140]	; (8004028 <TIM_Base_SetConfig+0x13c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <TIM_Base_SetConfig+0x114>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0xf8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <TIM_Base_SetConfig+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40010400 	.word	0x40010400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800
 8004020:	40001800 	.word	0x40001800
 8004024:	40001c00 	.word	0x40001c00
 8004028:	40002000 	.word	0x40002000

0800402c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0302 	bic.w	r3, r3, #2
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a20      	ldr	r2, [pc, #128]	; (8004104 <TIM_OC1_SetConfig+0xd8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC1_SetConfig+0x64>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <TIM_OC1_SetConfig+0xdc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10c      	bne.n	80040aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0308 	bic.w	r3, r3, #8
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC1_SetConfig+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_OC1_SetConfig+0x8e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC1_SetConfig+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d111      	bne.n	80040de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40010000 	.word	0x40010000
 8004108:	40010400 	.word	0x40010400

0800410c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0210 	bic.w	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <TIM_OC2_SetConfig+0xe4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_OC2_SetConfig+0x68>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_OC2_SetConfig+0xe8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d10d      	bne.n	8004190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x94>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d113      	bne.n	80041c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40010400 	.word	0x40010400

080041f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <TIM_OC3_SetConfig+0xe0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC3_SetConfig+0x66>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a20      	ldr	r2, [pc, #128]	; (80042dc <TIM_OC3_SetConfig+0xe4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10d      	bne.n	800427a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x92>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d113      	bne.n	80042b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	621a      	str	r2, [r3, #32]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40010400 	.word	0x40010400

080042e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <TIM_OC4_SetConfig+0xa4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC4_SetConfig+0x68>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a11      	ldr	r2, [pc, #68]	; (8004388 <TIM_OC4_SetConfig+0xa8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d109      	bne.n	800435c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	019b      	lsls	r3, r3, #6
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40010400 	.word	0x40010400

0800438c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 030a 	bic.w	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f023 0210 	bic.w	r2, r3, #16
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	031b      	lsls	r3, r3, #12
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	f043 0307 	orr.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2201      	movs	r2, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1a      	ldr	r2, [r3, #32]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e05a      	b.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d01d      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a17      	ldr	r2, [pc, #92]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10c      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40010400 	.word	0x40010400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40001800 	.word	0x40001800

08004604 <__errno>:
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <__errno+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4d0d      	ldr	r5, [pc, #52]	; (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	; (800464c <__libc_init_array+0x3c>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2600      	movs	r6, #0
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4d0b      	ldr	r5, [pc, #44]	; (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	; (8004654 <__libc_init_array+0x44>)
 8004624:	f002 feb6 	bl	8007394 <_init>
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2600      	movs	r6, #0
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	080077e4 	.word	0x080077e4
 800464c:	080077e4 	.word	0x080077e4
 8004650:	080077e4 	.word	0x080077e4
 8004654:	080077e8 	.word	0x080077e8

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__cvt>:
 8004668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	ec55 4b10 	vmov	r4, r5, d0
 8004670:	2d00      	cmp	r5, #0
 8004672:	460e      	mov	r6, r1
 8004674:	4619      	mov	r1, r3
 8004676:	462b      	mov	r3, r5
 8004678:	bfbb      	ittet	lt
 800467a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800467e:	461d      	movlt	r5, r3
 8004680:	2300      	movge	r3, #0
 8004682:	232d      	movlt	r3, #45	; 0x2d
 8004684:	700b      	strb	r3, [r1, #0]
 8004686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800468c:	4691      	mov	r9, r2
 800468e:	f023 0820 	bic.w	r8, r3, #32
 8004692:	bfbc      	itt	lt
 8004694:	4622      	movlt	r2, r4
 8004696:	4614      	movlt	r4, r2
 8004698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800469c:	d005      	beq.n	80046aa <__cvt+0x42>
 800469e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046a2:	d100      	bne.n	80046a6 <__cvt+0x3e>
 80046a4:	3601      	adds	r6, #1
 80046a6:	2102      	movs	r1, #2
 80046a8:	e000      	b.n	80046ac <__cvt+0x44>
 80046aa:	2103      	movs	r1, #3
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	ab02      	add	r3, sp, #8
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	ec45 4b10 	vmov	d0, r4, r5
 80046b8:	4653      	mov	r3, sl
 80046ba:	4632      	mov	r2, r6
 80046bc:	f000 fcec 	bl	8005098 <_dtoa_r>
 80046c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046c4:	4607      	mov	r7, r0
 80046c6:	d102      	bne.n	80046ce <__cvt+0x66>
 80046c8:	f019 0f01 	tst.w	r9, #1
 80046cc:	d022      	beq.n	8004714 <__cvt+0xac>
 80046ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046d2:	eb07 0906 	add.w	r9, r7, r6
 80046d6:	d110      	bne.n	80046fa <__cvt+0x92>
 80046d8:	783b      	ldrb	r3, [r7, #0]
 80046da:	2b30      	cmp	r3, #48	; 0x30
 80046dc:	d10a      	bne.n	80046f4 <__cvt+0x8c>
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fc fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 80046ea:	b918      	cbnz	r0, 80046f4 <__cvt+0x8c>
 80046ec:	f1c6 0601 	rsb	r6, r6, #1
 80046f0:	f8ca 6000 	str.w	r6, [sl]
 80046f4:	f8da 3000 	ldr.w	r3, [sl]
 80046f8:	4499      	add	r9, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8004706:	b108      	cbz	r0, 800470c <__cvt+0xa4>
 8004708:	f8cd 900c 	str.w	r9, [sp, #12]
 800470c:	2230      	movs	r2, #48	; 0x30
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	454b      	cmp	r3, r9
 8004712:	d307      	bcc.n	8004724 <__cvt+0xbc>
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004718:	1bdb      	subs	r3, r3, r7
 800471a:	4638      	mov	r0, r7
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	b004      	add	sp, #16
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	9103      	str	r1, [sp, #12]
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e7f0      	b.n	800470e <__cvt+0xa6>

0800472c <__exponent>:
 800472c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472e:	4603      	mov	r3, r0
 8004730:	2900      	cmp	r1, #0
 8004732:	bfb8      	it	lt
 8004734:	4249      	neglt	r1, r1
 8004736:	f803 2b02 	strb.w	r2, [r3], #2
 800473a:	bfb4      	ite	lt
 800473c:	222d      	movlt	r2, #45	; 0x2d
 800473e:	222b      	movge	r2, #43	; 0x2b
 8004740:	2909      	cmp	r1, #9
 8004742:	7042      	strb	r2, [r0, #1]
 8004744:	dd2a      	ble.n	800479c <__exponent+0x70>
 8004746:	f10d 0407 	add.w	r4, sp, #7
 800474a:	46a4      	mov	ip, r4
 800474c:	270a      	movs	r7, #10
 800474e:	46a6      	mov	lr, r4
 8004750:	460a      	mov	r2, r1
 8004752:	fb91 f6f7 	sdiv	r6, r1, r7
 8004756:	fb07 1516 	mls	r5, r7, r6, r1
 800475a:	3530      	adds	r5, #48	; 0x30
 800475c:	2a63      	cmp	r2, #99	; 0x63
 800475e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004766:	4631      	mov	r1, r6
 8004768:	dcf1      	bgt.n	800474e <__exponent+0x22>
 800476a:	3130      	adds	r1, #48	; 0x30
 800476c:	f1ae 0502 	sub.w	r5, lr, #2
 8004770:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004774:	1c44      	adds	r4, r0, #1
 8004776:	4629      	mov	r1, r5
 8004778:	4561      	cmp	r1, ip
 800477a:	d30a      	bcc.n	8004792 <__exponent+0x66>
 800477c:	f10d 0209 	add.w	r2, sp, #9
 8004780:	eba2 020e 	sub.w	r2, r2, lr
 8004784:	4565      	cmp	r5, ip
 8004786:	bf88      	it	hi
 8004788:	2200      	movhi	r2, #0
 800478a:	4413      	add	r3, r2
 800478c:	1a18      	subs	r0, r3, r0
 800478e:	b003      	add	sp, #12
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004796:	f804 2f01 	strb.w	r2, [r4, #1]!
 800479a:	e7ed      	b.n	8004778 <__exponent+0x4c>
 800479c:	2330      	movs	r3, #48	; 0x30
 800479e:	3130      	adds	r1, #48	; 0x30
 80047a0:	7083      	strb	r3, [r0, #2]
 80047a2:	70c1      	strb	r1, [r0, #3]
 80047a4:	1d03      	adds	r3, r0, #4
 80047a6:	e7f1      	b.n	800478c <__exponent+0x60>

080047a8 <_printf_float>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	ed2d 8b02 	vpush	{d8}
 80047b0:	b08d      	sub	sp, #52	; 0x34
 80047b2:	460c      	mov	r4, r1
 80047b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047b8:	4616      	mov	r6, r2
 80047ba:	461f      	mov	r7, r3
 80047bc:	4605      	mov	r5, r0
 80047be:	f001 fa57 	bl	8005c70 <_localeconv_r>
 80047c2:	f8d0 a000 	ldr.w	sl, [r0]
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7fb fd22 	bl	8000210 <strlen>
 80047cc:	2300      	movs	r3, #0
 80047ce:	930a      	str	r3, [sp, #40]	; 0x28
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	f8d8 3000 	ldr.w	r3, [r8]
 80047d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047dc:	3307      	adds	r3, #7
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	f103 0208 	add.w	r2, r3, #8
 80047e6:	f8c8 2000 	str.w	r2, [r8]
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047fa:	9307      	str	r3, [sp, #28]
 80047fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004800:	ee08 0a10 	vmov	s16, r0
 8004804:	4b9f      	ldr	r3, [pc, #636]	; (8004a84 <_printf_float+0x2dc>)
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	f7fc f9ad 	bl	8000b6c <__aeabi_dcmpun>
 8004812:	bb88      	cbnz	r0, 8004878 <_printf_float+0xd0>
 8004814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004818:	4b9a      	ldr	r3, [pc, #616]	; (8004a84 <_printf_float+0x2dc>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	f7fc f987 	bl	8000b30 <__aeabi_dcmple>
 8004822:	bb48      	cbnz	r0, 8004878 <_printf_float+0xd0>
 8004824:	2200      	movs	r2, #0
 8004826:	2300      	movs	r3, #0
 8004828:	4640      	mov	r0, r8
 800482a:	4649      	mov	r1, r9
 800482c:	f7fc f976 	bl	8000b1c <__aeabi_dcmplt>
 8004830:	b110      	cbz	r0, 8004838 <_printf_float+0x90>
 8004832:	232d      	movs	r3, #45	; 0x2d
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	4b93      	ldr	r3, [pc, #588]	; (8004a88 <_printf_float+0x2e0>)
 800483a:	4894      	ldr	r0, [pc, #592]	; (8004a8c <_printf_float+0x2e4>)
 800483c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004840:	bf94      	ite	ls
 8004842:	4698      	movls	r8, r3
 8004844:	4680      	movhi	r8, r0
 8004846:	2303      	movs	r3, #3
 8004848:	6123      	str	r3, [r4, #16]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	f023 0204 	bic.w	r2, r3, #4
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	f04f 0900 	mov.w	r9, #0
 8004856:	9700      	str	r7, [sp, #0]
 8004858:	4633      	mov	r3, r6
 800485a:	aa0b      	add	r2, sp, #44	; 0x2c
 800485c:	4621      	mov	r1, r4
 800485e:	4628      	mov	r0, r5
 8004860:	f000 f9d8 	bl	8004c14 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	f040 8090 	bne.w	800498a <_printf_float+0x1e2>
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	b00d      	add	sp, #52	; 0x34
 8004870:	ecbd 8b02 	vpop	{d8}
 8004874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fc f974 	bl	8000b6c <__aeabi_dcmpun>
 8004884:	b140      	cbz	r0, 8004898 <_printf_float+0xf0>
 8004886:	464b      	mov	r3, r9
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfbc      	itt	lt
 800488c:	232d      	movlt	r3, #45	; 0x2d
 800488e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004892:	487f      	ldr	r0, [pc, #508]	; (8004a90 <_printf_float+0x2e8>)
 8004894:	4b7f      	ldr	r3, [pc, #508]	; (8004a94 <_printf_float+0x2ec>)
 8004896:	e7d1      	b.n	800483c <_printf_float+0x94>
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800489e:	9206      	str	r2, [sp, #24]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	d13f      	bne.n	8004924 <_printf_float+0x17c>
 80048a4:	2306      	movs	r3, #6
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	9b05      	ldr	r3, [sp, #20]
 80048aa:	6861      	ldr	r1, [r4, #4]
 80048ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048b0:	2300      	movs	r3, #0
 80048b2:	9303      	str	r3, [sp, #12]
 80048b4:	ab0a      	add	r3, sp, #40	; 0x28
 80048b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048ba:	ab09      	add	r3, sp, #36	; 0x24
 80048bc:	ec49 8b10 	vmov	d0, r8, r9
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7ff fecd 	bl	8004668 <__cvt>
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d2:	2b47      	cmp	r3, #71	; 0x47
 80048d4:	4680      	mov	r8, r0
 80048d6:	d108      	bne.n	80048ea <_printf_float+0x142>
 80048d8:	1cc8      	adds	r0, r1, #3
 80048da:	db02      	blt.n	80048e2 <_printf_float+0x13a>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	4299      	cmp	r1, r3
 80048e0:	dd41      	ble.n	8004966 <_printf_float+0x1be>
 80048e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80048e6:	fa5f fb8b 	uxtb.w	fp, fp
 80048ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048ee:	d820      	bhi.n	8004932 <_printf_float+0x18a>
 80048f0:	3901      	subs	r1, #1
 80048f2:	465a      	mov	r2, fp
 80048f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048f8:	9109      	str	r1, [sp, #36]	; 0x24
 80048fa:	f7ff ff17 	bl	800472c <__exponent>
 80048fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004900:	1813      	adds	r3, r2, r0
 8004902:	2a01      	cmp	r2, #1
 8004904:	4681      	mov	r9, r0
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	dc02      	bgt.n	8004910 <_printf_float+0x168>
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	07d2      	lsls	r2, r2, #31
 800490e:	d501      	bpl.n	8004914 <_printf_float+0x16c>
 8004910:	3301      	adds	r3, #1
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004918:	2b00      	cmp	r3, #0
 800491a:	d09c      	beq.n	8004856 <_printf_float+0xae>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004922:	e798      	b.n	8004856 <_printf_float+0xae>
 8004924:	9a06      	ldr	r2, [sp, #24]
 8004926:	2a47      	cmp	r2, #71	; 0x47
 8004928:	d1be      	bne.n	80048a8 <_printf_float+0x100>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1bc      	bne.n	80048a8 <_printf_float+0x100>
 800492e:	2301      	movs	r3, #1
 8004930:	e7b9      	b.n	80048a6 <_printf_float+0xfe>
 8004932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004936:	d118      	bne.n	800496a <_printf_float+0x1c2>
 8004938:	2900      	cmp	r1, #0
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	dd0b      	ble.n	8004956 <_printf_float+0x1ae>
 800493e:	6121      	str	r1, [r4, #16]
 8004940:	b913      	cbnz	r3, 8004948 <_printf_float+0x1a0>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	07d0      	lsls	r0, r2, #31
 8004946:	d502      	bpl.n	800494e <_printf_float+0x1a6>
 8004948:	3301      	adds	r3, #1
 800494a:	440b      	add	r3, r1
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	e7de      	b.n	8004914 <_printf_float+0x16c>
 8004956:	b913      	cbnz	r3, 800495e <_printf_float+0x1b6>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	07d2      	lsls	r2, r2, #31
 800495c:	d501      	bpl.n	8004962 <_printf_float+0x1ba>
 800495e:	3302      	adds	r3, #2
 8004960:	e7f4      	b.n	800494c <_printf_float+0x1a4>
 8004962:	2301      	movs	r3, #1
 8004964:	e7f2      	b.n	800494c <_printf_float+0x1a4>
 8004966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800496a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496c:	4299      	cmp	r1, r3
 800496e:	db05      	blt.n	800497c <_printf_float+0x1d4>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	6121      	str	r1, [r4, #16]
 8004974:	07d8      	lsls	r0, r3, #31
 8004976:	d5ea      	bpl.n	800494e <_printf_float+0x1a6>
 8004978:	1c4b      	adds	r3, r1, #1
 800497a:	e7e7      	b.n	800494c <_printf_float+0x1a4>
 800497c:	2900      	cmp	r1, #0
 800497e:	bfd4      	ite	le
 8004980:	f1c1 0202 	rsble	r2, r1, #2
 8004984:	2201      	movgt	r2, #1
 8004986:	4413      	add	r3, r2
 8004988:	e7e0      	b.n	800494c <_printf_float+0x1a4>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	055a      	lsls	r2, r3, #21
 800498e:	d407      	bmi.n	80049a0 <_printf_float+0x1f8>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	4642      	mov	r2, r8
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	d12c      	bne.n	80049f8 <_printf_float+0x250>
 800499e:	e764      	b.n	800486a <_printf_float+0xc2>
 80049a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049a4:	f240 80e0 	bls.w	8004b68 <_printf_float+0x3c0>
 80049a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	f7fc f8aa 	bl	8000b08 <__aeabi_dcmpeq>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d034      	beq.n	8004a22 <_printf_float+0x27a>
 80049b8:	4a37      	ldr	r2, [pc, #220]	; (8004a98 <_printf_float+0x2f0>)
 80049ba:	2301      	movs	r3, #1
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f af51 	beq.w	800486a <_printf_float+0xc2>
 80049c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	db02      	blt.n	80049d6 <_printf_float+0x22e>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07d8      	lsls	r0, r3, #31
 80049d4:	d510      	bpl.n	80049f8 <_printf_float+0x250>
 80049d6:	ee18 3a10 	vmov	r3, s16
 80049da:	4652      	mov	r2, sl
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af41 	beq.w	800486a <_printf_float+0xc2>
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	f104 091a 	add.w	r9, r4, #26
 80049f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4543      	cmp	r3, r8
 80049f6:	dc09      	bgt.n	8004a0c <_printf_float+0x264>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	079b      	lsls	r3, r3, #30
 80049fc:	f100 8105 	bmi.w	8004c0a <_printf_float+0x462>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e730      	b.n	800486e <_printf_float+0xc6>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	464a      	mov	r2, r9
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af27 	beq.w	800486a <_printf_float+0xc2>
 8004a1c:	f108 0801 	add.w	r8, r8, #1
 8004a20:	e7e6      	b.n	80049f0 <_printf_float+0x248>
 8004a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc39      	bgt.n	8004a9c <_printf_float+0x2f4>
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <_printf_float+0x2f0>)
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af19 	beq.w	800486a <_printf_float+0xc2>
 8004a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	d102      	bne.n	8004a46 <_printf_float+0x29e>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	d5d8      	bpl.n	80049f8 <_printf_float+0x250>
 8004a46:	ee18 3a10 	vmov	r3, s16
 8004a4a:	4652      	mov	r2, sl
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f af09 	beq.w	800486a <_printf_float+0xc2>
 8004a58:	f04f 0900 	mov.w	r9, #0
 8004a5c:	f104 0a1a 	add.w	sl, r4, #26
 8004a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a62:	425b      	negs	r3, r3
 8004a64:	454b      	cmp	r3, r9
 8004a66:	dc01      	bgt.n	8004a6c <_printf_float+0x2c4>
 8004a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6a:	e792      	b.n	8004992 <_printf_float+0x1ea>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4652      	mov	r2, sl
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f aef7 	beq.w	800486a <_printf_float+0xc2>
 8004a7c:	f109 0901 	add.w	r9, r9, #1
 8004a80:	e7ee      	b.n	8004a60 <_printf_float+0x2b8>
 8004a82:	bf00      	nop
 8004a84:	7fefffff 	.word	0x7fefffff
 8004a88:	080073fc 	.word	0x080073fc
 8004a8c:	08007400 	.word	0x08007400
 8004a90:	08007408 	.word	0x08007408
 8004a94:	08007404 	.word	0x08007404
 8004a98:	0800740c 	.word	0x0800740c
 8004a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bfa8      	it	ge
 8004aa4:	461a      	movge	r2, r3
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	4691      	mov	r9, r2
 8004aaa:	dc37      	bgt.n	8004b1c <_printf_float+0x374>
 8004aac:	f04f 0b00 	mov.w	fp, #0
 8004ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab4:	f104 021a 	add.w	r2, r4, #26
 8004ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	eba3 0309 	sub.w	r3, r3, r9
 8004ac0:	455b      	cmp	r3, fp
 8004ac2:	dc33      	bgt.n	8004b2c <_printf_float+0x384>
 8004ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	db3b      	blt.n	8004b44 <_printf_float+0x39c>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	07da      	lsls	r2, r3, #31
 8004ad0:	d438      	bmi.n	8004b44 <_printf_float+0x39c>
 8004ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ad4:	9b05      	ldr	r3, [sp, #20]
 8004ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	eba2 0901 	sub.w	r9, r2, r1
 8004ade:	4599      	cmp	r9, r3
 8004ae0:	bfa8      	it	ge
 8004ae2:	4699      	movge	r9, r3
 8004ae4:	f1b9 0f00 	cmp.w	r9, #0
 8004ae8:	dc35      	bgt.n	8004b56 <_printf_float+0x3ae>
 8004aea:	f04f 0800 	mov.w	r8, #0
 8004aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af2:	f104 0a1a 	add.w	sl, r4, #26
 8004af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	eba3 0309 	sub.w	r3, r3, r9
 8004b00:	4543      	cmp	r3, r8
 8004b02:	f77f af79 	ble.w	80049f8 <_printf_float+0x250>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4652      	mov	r2, sl
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	f43f aeaa 	beq.w	800486a <_printf_float+0xc2>
 8004b16:	f108 0801 	add.w	r8, r8, #1
 8004b1a:	e7ec      	b.n	8004af6 <_printf_float+0x34e>
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4642      	mov	r2, r8
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	d1c0      	bne.n	8004aac <_printf_float+0x304>
 8004b2a:	e69e      	b.n	800486a <_printf_float+0xc2>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	9205      	str	r2, [sp, #20]
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f ae97 	beq.w	800486a <_printf_float+0xc2>
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	f10b 0b01 	add.w	fp, fp, #1
 8004b42:	e7b9      	b.n	8004ab8 <_printf_float+0x310>
 8004b44:	ee18 3a10 	vmov	r3, s16
 8004b48:	4652      	mov	r2, sl
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1be      	bne.n	8004ad2 <_printf_float+0x32a>
 8004b54:	e689      	b.n	800486a <_printf_float+0xc2>
 8004b56:	9a05      	ldr	r2, [sp, #20]
 8004b58:	464b      	mov	r3, r9
 8004b5a:	4442      	add	r2, r8
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	d1c1      	bne.n	8004aea <_printf_float+0x342>
 8004b66:	e680      	b.n	800486a <_printf_float+0xc2>
 8004b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b6a:	2a01      	cmp	r2, #1
 8004b6c:	dc01      	bgt.n	8004b72 <_printf_float+0x3ca>
 8004b6e:	07db      	lsls	r3, r3, #31
 8004b70:	d538      	bpl.n	8004be4 <_printf_float+0x43c>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4642      	mov	r2, r8
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae74 	beq.w	800486a <_printf_float+0xc2>
 8004b82:	ee18 3a10 	vmov	r3, s16
 8004b86:	4652      	mov	r2, sl
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f ae6b 	beq.w	800486a <_printf_float+0xc2>
 8004b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 8004ba0:	b9d8      	cbnz	r0, 8004bda <_printf_float+0x432>
 8004ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba4:	f108 0201 	add.w	r2, r8, #1
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d10e      	bne.n	8004bd2 <_printf_float+0x42a>
 8004bb4:	e659      	b.n	800486a <_printf_float+0xc2>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f ae52 	beq.w	800486a <_printf_float+0xc2>
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4543      	cmp	r3, r8
 8004bd0:	dcf1      	bgt.n	8004bb6 <_printf_float+0x40e>
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bd8:	e6dc      	b.n	8004994 <_printf_float+0x1ec>
 8004bda:	f04f 0800 	mov.w	r8, #0
 8004bde:	f104 0a1a 	add.w	sl, r4, #26
 8004be2:	e7f2      	b.n	8004bca <_printf_float+0x422>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4642      	mov	r2, r8
 8004be8:	e7df      	b.n	8004baa <_printf_float+0x402>
 8004bea:	2301      	movs	r3, #1
 8004bec:	464a      	mov	r2, r9
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f ae38 	beq.w	800486a <_printf_float+0xc2>
 8004bfa:	f108 0801 	add.w	r8, r8, #1
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	4543      	cmp	r3, r8
 8004c06:	dcf0      	bgt.n	8004bea <_printf_float+0x442>
 8004c08:	e6fa      	b.n	8004a00 <_printf_float+0x258>
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	f104 0919 	add.w	r9, r4, #25
 8004c12:	e7f4      	b.n	8004bfe <_printf_float+0x456>

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4616      	mov	r6, r2
 8004c1a:	4699      	mov	r9, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfb8      	it	lt
 8004c28:	4613      	movlt	r3, r2
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c30:	4607      	mov	r7, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b10a      	cbz	r2, 8004c3a <_printf_common+0x26>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	0699      	lsls	r1, r3, #26
 8004c3e:	bf42      	ittt	mi
 8004c40:	6833      	ldrmi	r3, [r6, #0]
 8004c42:	3302      	addmi	r3, #2
 8004c44:	6033      	strmi	r3, [r6, #0]
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	f015 0506 	ands.w	r5, r5, #6
 8004c4c:	d106      	bne.n	8004c5c <_printf_common+0x48>
 8004c4e:	f104 0a19 	add.w	sl, r4, #25
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	6832      	ldr	r2, [r6, #0]
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dc26      	bgt.n	8004caa <_printf_common+0x96>
 8004c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c60:	1e13      	subs	r3, r2, #0
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	bf18      	it	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	0692      	lsls	r2, r2, #26
 8004c6a:	d42b      	bmi.n	8004cc4 <_printf_common+0xb0>
 8004c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c70:	4649      	mov	r1, r9
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c0      	blx	r8
 8004c76:	3001      	adds	r0, #1
 8004c78:	d01e      	beq.n	8004cb8 <_printf_common+0xa4>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	68e5      	ldr	r5, [r4, #12]
 8004c7e:	6832      	ldr	r2, [r6, #0]
 8004c80:	f003 0306 	and.w	r3, r3, #6
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	bf08      	it	eq
 8004c88:	1aad      	subeq	r5, r5, r2
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	bf0c      	ite	eq
 8004c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c94:	2500      	movne	r5, #0
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bfc4      	itt	gt
 8004c9a:	1a9b      	subgt	r3, r3, r2
 8004c9c:	18ed      	addgt	r5, r5, r3
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	341a      	adds	r4, #26
 8004ca2:	42b5      	cmp	r5, r6
 8004ca4:	d11a      	bne.n	8004cdc <_printf_common+0xc8>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e008      	b.n	8004cbc <_printf_common+0xa8>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4652      	mov	r2, sl
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_printf_common+0xac>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7c6      	b.n	8004c52 <_printf_common+0x3e>
 8004cc4:	18e1      	adds	r1, r4, r3
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	2030      	movs	r0, #48	; 0x30
 8004cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cce:	4422      	add	r2, r4
 8004cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cd8:	3302      	adds	r3, #2
 8004cda:	e7c7      	b.n	8004c6c <_printf_common+0x58>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d0e6      	beq.n	8004cb8 <_printf_common+0xa4>
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7d9      	b.n	8004ca2 <_printf_common+0x8e>
	...

08004cf0 <_printf_i>:
 8004cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	4691      	mov	r9, r2
 8004cf8:	7e27      	ldrb	r7, [r4, #24]
 8004cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cfc:	2f78      	cmp	r7, #120	; 0x78
 8004cfe:	4680      	mov	r8, r0
 8004d00:	469a      	mov	sl, r3
 8004d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d06:	d807      	bhi.n	8004d18 <_printf_i+0x28>
 8004d08:	2f62      	cmp	r7, #98	; 0x62
 8004d0a:	d80a      	bhi.n	8004d22 <_printf_i+0x32>
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	f000 80d8 	beq.w	8004ec2 <_printf_i+0x1d2>
 8004d12:	2f58      	cmp	r7, #88	; 0x58
 8004d14:	f000 80a3 	beq.w	8004e5e <_printf_i+0x16e>
 8004d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d20:	e03a      	b.n	8004d98 <_printf_i+0xa8>
 8004d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d26:	2b15      	cmp	r3, #21
 8004d28:	d8f6      	bhi.n	8004d18 <_printf_i+0x28>
 8004d2a:	a001      	add	r0, pc, #4	; (adr r0, 8004d30 <_printf_i+0x40>)
 8004d2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d19 	.word	0x08004d19
 8004d3c:	08004d19 	.word	0x08004d19
 8004d40:	08004d19 	.word	0x08004d19
 8004d44:	08004d19 	.word	0x08004d19
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d19 	.word	0x08004d19
 8004d50:	08004d19 	.word	0x08004d19
 8004d54:	08004d19 	.word	0x08004d19
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	08004ea9 	.word	0x08004ea9
 8004d60:	08004dcd 	.word	0x08004dcd
 8004d64:	08004e8b 	.word	0x08004e8b
 8004d68:	08004d19 	.word	0x08004d19
 8004d6c:	08004d19 	.word	0x08004d19
 8004d70:	08004ecb 	.word	0x08004ecb
 8004d74:	08004d19 	.word	0x08004d19
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d19 	.word	0x08004d19
 8004d80:	08004d19 	.word	0x08004d19
 8004d84:	08004e93 	.word	0x08004e93
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	1d1a      	adds	r2, r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	600a      	str	r2, [r1, #0]
 8004d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a3      	b.n	8004ee4 <_printf_i+0x1f4>
 8004d9c:	6825      	ldr	r5, [r4, #0]
 8004d9e:	6808      	ldr	r0, [r1, #0]
 8004da0:	062e      	lsls	r6, r5, #24
 8004da2:	f100 0304 	add.w	r3, r0, #4
 8004da6:	d50a      	bpl.n	8004dbe <_printf_i+0xce>
 8004da8:	6805      	ldr	r5, [r0, #0]
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	da03      	bge.n	8004db8 <_printf_i+0xc8>
 8004db0:	232d      	movs	r3, #45	; 0x2d
 8004db2:	426d      	negs	r5, r5
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db8:	485e      	ldr	r0, [pc, #376]	; (8004f34 <_printf_i+0x244>)
 8004dba:	230a      	movs	r3, #10
 8004dbc:	e019      	b.n	8004df2 <_printf_i+0x102>
 8004dbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dc2:	6805      	ldr	r5, [r0, #0]
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	bf18      	it	ne
 8004dc8:	b22d      	sxthne	r5, r5
 8004dca:	e7ef      	b.n	8004dac <_printf_i+0xbc>
 8004dcc:	680b      	ldr	r3, [r1, #0]
 8004dce:	6825      	ldr	r5, [r4, #0]
 8004dd0:	1d18      	adds	r0, r3, #4
 8004dd2:	6008      	str	r0, [r1, #0]
 8004dd4:	0628      	lsls	r0, r5, #24
 8004dd6:	d501      	bpl.n	8004ddc <_printf_i+0xec>
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <_printf_i+0xf2>
 8004ddc:	0669      	lsls	r1, r5, #25
 8004dde:	d5fb      	bpl.n	8004dd8 <_printf_i+0xe8>
 8004de0:	881d      	ldrh	r5, [r3, #0]
 8004de2:	4854      	ldr	r0, [pc, #336]	; (8004f34 <_printf_i+0x244>)
 8004de4:	2f6f      	cmp	r7, #111	; 0x6f
 8004de6:	bf0c      	ite	eq
 8004de8:	2308      	moveq	r3, #8
 8004dea:	230a      	movne	r3, #10
 8004dec:	2100      	movs	r1, #0
 8004dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df2:	6866      	ldr	r6, [r4, #4]
 8004df4:	60a6      	str	r6, [r4, #8]
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	bfa2      	ittt	ge
 8004dfa:	6821      	ldrge	r1, [r4, #0]
 8004dfc:	f021 0104 	bicge.w	r1, r1, #4
 8004e00:	6021      	strge	r1, [r4, #0]
 8004e02:	b90d      	cbnz	r5, 8004e08 <_printf_i+0x118>
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	d04d      	beq.n	8004ea4 <_printf_i+0x1b4>
 8004e08:	4616      	mov	r6, r2
 8004e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e12:	5dc7      	ldrb	r7, [r0, r7]
 8004e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e18:	462f      	mov	r7, r5
 8004e1a:	42bb      	cmp	r3, r7
 8004e1c:	460d      	mov	r5, r1
 8004e1e:	d9f4      	bls.n	8004e0a <_printf_i+0x11a>
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d10b      	bne.n	8004e3c <_printf_i+0x14c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	07df      	lsls	r7, r3, #31
 8004e28:	d508      	bpl.n	8004e3c <_printf_i+0x14c>
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	6861      	ldr	r1, [r4, #4]
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	bfde      	ittt	le
 8004e32:	2330      	movle	r3, #48	; 0x30
 8004e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e3c:	1b92      	subs	r2, r2, r6
 8004e3e:	6122      	str	r2, [r4, #16]
 8004e40:	f8cd a000 	str.w	sl, [sp]
 8004e44:	464b      	mov	r3, r9
 8004e46:	aa03      	add	r2, sp, #12
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7ff fee2 	bl	8004c14 <_printf_common>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d14c      	bne.n	8004eee <_printf_i+0x1fe>
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	b004      	add	sp, #16
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	4835      	ldr	r0, [pc, #212]	; (8004f34 <_printf_i+0x244>)
 8004e60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	680e      	ldr	r6, [r1, #0]
 8004e68:	061f      	lsls	r7, r3, #24
 8004e6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e6e:	600e      	str	r6, [r1, #0]
 8004e70:	d514      	bpl.n	8004e9c <_printf_i+0x1ac>
 8004e72:	07d9      	lsls	r1, r3, #31
 8004e74:	bf44      	itt	mi
 8004e76:	f043 0320 	orrmi.w	r3, r3, #32
 8004e7a:	6023      	strmi	r3, [r4, #0]
 8004e7c:	b91d      	cbnz	r5, 8004e86 <_printf_i+0x196>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f023 0320 	bic.w	r3, r3, #32
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	2310      	movs	r3, #16
 8004e88:	e7b0      	b.n	8004dec <_printf_i+0xfc>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f043 0320 	orr.w	r3, r3, #32
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	2378      	movs	r3, #120	; 0x78
 8004e94:	4828      	ldr	r0, [pc, #160]	; (8004f38 <_printf_i+0x248>)
 8004e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e9a:	e7e3      	b.n	8004e64 <_printf_i+0x174>
 8004e9c:	065e      	lsls	r6, r3, #25
 8004e9e:	bf48      	it	mi
 8004ea0:	b2ad      	uxthmi	r5, r5
 8004ea2:	e7e6      	b.n	8004e72 <_printf_i+0x182>
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	e7bb      	b.n	8004e20 <_printf_i+0x130>
 8004ea8:	680b      	ldr	r3, [r1, #0]
 8004eaa:	6826      	ldr	r6, [r4, #0]
 8004eac:	6960      	ldr	r0, [r4, #20]
 8004eae:	1d1d      	adds	r5, r3, #4
 8004eb0:	600d      	str	r5, [r1, #0]
 8004eb2:	0635      	lsls	r5, r6, #24
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	d501      	bpl.n	8004ebc <_printf_i+0x1cc>
 8004eb8:	6018      	str	r0, [r3, #0]
 8004eba:	e002      	b.n	8004ec2 <_printf_i+0x1d2>
 8004ebc:	0671      	lsls	r1, r6, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_printf_i+0x1c8>
 8004ec0:	8018      	strh	r0, [r3, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	4616      	mov	r6, r2
 8004ec8:	e7ba      	b.n	8004e40 <_printf_i+0x150>
 8004eca:	680b      	ldr	r3, [r1, #0]
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	600a      	str	r2, [r1, #0]
 8004ed0:	681e      	ldr	r6, [r3, #0]
 8004ed2:	6862      	ldr	r2, [r4, #4]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7fb f9a2 	bl	8000220 <memchr>
 8004edc:	b108      	cbz	r0, 8004ee2 <_printf_i+0x1f2>
 8004ede:	1b80      	subs	r0, r0, r6
 8004ee0:	6060      	str	r0, [r4, #4]
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eec:	e7a8      	b.n	8004e40 <_printf_i+0x150>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	47d0      	blx	sl
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0ab      	beq.n	8004e54 <_printf_i+0x164>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	079b      	lsls	r3, r3, #30
 8004f00:	d413      	bmi.n	8004f2a <_printf_i+0x23a>
 8004f02:	68e0      	ldr	r0, [r4, #12]
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	4298      	cmp	r0, r3
 8004f08:	bfb8      	it	lt
 8004f0a:	4618      	movlt	r0, r3
 8004f0c:	e7a4      	b.n	8004e58 <_printf_i+0x168>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4632      	mov	r2, r6
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	47d0      	blx	sl
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d09b      	beq.n	8004e54 <_printf_i+0x164>
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	9903      	ldr	r1, [sp, #12]
 8004f22:	1a5b      	subs	r3, r3, r1
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	dcf2      	bgt.n	8004f0e <_printf_i+0x21e>
 8004f28:	e7eb      	b.n	8004f02 <_printf_i+0x212>
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	f104 0619 	add.w	r6, r4, #25
 8004f30:	e7f5      	b.n	8004f1e <_printf_i+0x22e>
 8004f32:	bf00      	nop
 8004f34:	0800740e 	.word	0x0800740e
 8004f38:	0800741f 	.word	0x0800741f

08004f3c <siprintf>:
 8004f3c:	b40e      	push	{r1, r2, r3}
 8004f3e:	b500      	push	{lr}
 8004f40:	b09c      	sub	sp, #112	; 0x70
 8004f42:	ab1d      	add	r3, sp, #116	; 0x74
 8004f44:	9002      	str	r0, [sp, #8]
 8004f46:	9006      	str	r0, [sp, #24]
 8004f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f4c:	4809      	ldr	r0, [pc, #36]	; (8004f74 <siprintf+0x38>)
 8004f4e:	9107      	str	r1, [sp, #28]
 8004f50:	9104      	str	r1, [sp, #16]
 8004f52:	4909      	ldr	r1, [pc, #36]	; (8004f78 <siprintf+0x3c>)
 8004f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f58:	9105      	str	r1, [sp, #20]
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	a902      	add	r1, sp, #8
 8004f60:	f001 fb34 	bl	80065cc <_svfiprintf_r>
 8004f64:	9b02      	ldr	r3, [sp, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	b01c      	add	sp, #112	; 0x70
 8004f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f70:	b003      	add	sp, #12
 8004f72:	4770      	bx	lr
 8004f74:	2000000c 	.word	0x2000000c
 8004f78:	ffff0208 	.word	0xffff0208

08004f7c <quorem>:
 8004f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	6903      	ldr	r3, [r0, #16]
 8004f82:	690c      	ldr	r4, [r1, #16]
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	4607      	mov	r7, r0
 8004f88:	f2c0 8081 	blt.w	800508e <quorem+0x112>
 8004f8c:	3c01      	subs	r4, #1
 8004f8e:	f101 0814 	add.w	r8, r1, #20
 8004f92:	f100 0514 	add.w	r5, r0, #20
 8004f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004fac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fb4:	d331      	bcc.n	800501a <quorem+0x9e>
 8004fb6:	f04f 0e00 	mov.w	lr, #0
 8004fba:	4640      	mov	r0, r8
 8004fbc:	46ac      	mov	ip, r5
 8004fbe:	46f2      	mov	sl, lr
 8004fc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fc4:	b293      	uxth	r3, r2
 8004fc6:	fb06 e303 	mla	r3, r6, r3, lr
 8004fca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	ebaa 0303 	sub.w	r3, sl, r3
 8004fd4:	0c12      	lsrs	r2, r2, #16
 8004fd6:	f8dc a000 	ldr.w	sl, [ip]
 8004fda:	fb06 e202 	mla	r2, r6, r2, lr
 8004fde:	fa13 f38a 	uxtah	r3, r3, sl
 8004fe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fe6:	fa1f fa82 	uxth.w	sl, r2
 8004fea:	f8dc 2000 	ldr.w	r2, [ip]
 8004fee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004ff2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ffc:	4581      	cmp	r9, r0
 8004ffe:	f84c 3b04 	str.w	r3, [ip], #4
 8005002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005006:	d2db      	bcs.n	8004fc0 <quorem+0x44>
 8005008:	f855 300b 	ldr.w	r3, [r5, fp]
 800500c:	b92b      	cbnz	r3, 800501a <quorem+0x9e>
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	3b04      	subs	r3, #4
 8005012:	429d      	cmp	r5, r3
 8005014:	461a      	mov	r2, r3
 8005016:	d32e      	bcc.n	8005076 <quorem+0xfa>
 8005018:	613c      	str	r4, [r7, #16]
 800501a:	4638      	mov	r0, r7
 800501c:	f001 f8c0 	bl	80061a0 <__mcmp>
 8005020:	2800      	cmp	r0, #0
 8005022:	db24      	blt.n	800506e <quorem+0xf2>
 8005024:	3601      	adds	r6, #1
 8005026:	4628      	mov	r0, r5
 8005028:	f04f 0c00 	mov.w	ip, #0
 800502c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005030:	f8d0 e000 	ldr.w	lr, [r0]
 8005034:	b293      	uxth	r3, r2
 8005036:	ebac 0303 	sub.w	r3, ip, r3
 800503a:	0c12      	lsrs	r2, r2, #16
 800503c:	fa13 f38e 	uxtah	r3, r3, lr
 8005040:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800504e:	45c1      	cmp	r9, r8
 8005050:	f840 3b04 	str.w	r3, [r0], #4
 8005054:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005058:	d2e8      	bcs.n	800502c <quorem+0xb0>
 800505a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800505e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005062:	b922      	cbnz	r2, 800506e <quorem+0xf2>
 8005064:	3b04      	subs	r3, #4
 8005066:	429d      	cmp	r5, r3
 8005068:	461a      	mov	r2, r3
 800506a:	d30a      	bcc.n	8005082 <quorem+0x106>
 800506c:	613c      	str	r4, [r7, #16]
 800506e:	4630      	mov	r0, r6
 8005070:	b003      	add	sp, #12
 8005072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	3b04      	subs	r3, #4
 800507a:	2a00      	cmp	r2, #0
 800507c:	d1cc      	bne.n	8005018 <quorem+0x9c>
 800507e:	3c01      	subs	r4, #1
 8005080:	e7c7      	b.n	8005012 <quorem+0x96>
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	3b04      	subs	r3, #4
 8005086:	2a00      	cmp	r2, #0
 8005088:	d1f0      	bne.n	800506c <quorem+0xf0>
 800508a:	3c01      	subs	r4, #1
 800508c:	e7eb      	b.n	8005066 <quorem+0xea>
 800508e:	2000      	movs	r0, #0
 8005090:	e7ee      	b.n	8005070 <quorem+0xf4>
 8005092:	0000      	movs	r0, r0
 8005094:	0000      	movs	r0, r0
	...

08005098 <_dtoa_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	ed2d 8b02 	vpush	{d8}
 80050a0:	ec57 6b10 	vmov	r6, r7, d0
 80050a4:	b095      	sub	sp, #84	; 0x54
 80050a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050ac:	9105      	str	r1, [sp, #20]
 80050ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80050b2:	4604      	mov	r4, r0
 80050b4:	9209      	str	r2, [sp, #36]	; 0x24
 80050b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80050b8:	b975      	cbnz	r5, 80050d8 <_dtoa_r+0x40>
 80050ba:	2010      	movs	r0, #16
 80050bc:	f000 fddc 	bl	8005c78 <malloc>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6260      	str	r0, [r4, #36]	; 0x24
 80050c4:	b920      	cbnz	r0, 80050d0 <_dtoa_r+0x38>
 80050c6:	4bb2      	ldr	r3, [pc, #712]	; (8005390 <_dtoa_r+0x2f8>)
 80050c8:	21ea      	movs	r1, #234	; 0xea
 80050ca:	48b2      	ldr	r0, [pc, #712]	; (8005394 <_dtoa_r+0x2fc>)
 80050cc:	f001 fb8e 	bl	80067ec <__assert_func>
 80050d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050d4:	6005      	str	r5, [r0, #0]
 80050d6:	60c5      	str	r5, [r0, #12]
 80050d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	b151      	cbz	r1, 80050f4 <_dtoa_r+0x5c>
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	604a      	str	r2, [r1, #4]
 80050e2:	2301      	movs	r3, #1
 80050e4:	4093      	lsls	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 fe1b 	bl	8005d24 <_Bfree>
 80050ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	1e3b      	subs	r3, r7, #0
 80050f6:	bfb9      	ittee	lt
 80050f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050fc:	9303      	strlt	r3, [sp, #12]
 80050fe:	2300      	movge	r3, #0
 8005100:	f8c8 3000 	strge.w	r3, [r8]
 8005104:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005108:	4ba3      	ldr	r3, [pc, #652]	; (8005398 <_dtoa_r+0x300>)
 800510a:	bfbc      	itt	lt
 800510c:	2201      	movlt	r2, #1
 800510e:	f8c8 2000 	strlt.w	r2, [r8]
 8005112:	ea33 0309 	bics.w	r3, r3, r9
 8005116:	d11b      	bne.n	8005150 <_dtoa_r+0xb8>
 8005118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800511a:	f242 730f 	movw	r3, #9999	; 0x270f
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005124:	4333      	orrs	r3, r6
 8005126:	f000 857a 	beq.w	8005c1e <_dtoa_r+0xb86>
 800512a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800512c:	b963      	cbnz	r3, 8005148 <_dtoa_r+0xb0>
 800512e:	4b9b      	ldr	r3, [pc, #620]	; (800539c <_dtoa_r+0x304>)
 8005130:	e024      	b.n	800517c <_dtoa_r+0xe4>
 8005132:	4b9b      	ldr	r3, [pc, #620]	; (80053a0 <_dtoa_r+0x308>)
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	9800      	ldr	r0, [sp, #0]
 800513e:	b015      	add	sp, #84	; 0x54
 8005140:	ecbd 8b02 	vpop	{d8}
 8005144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005148:	4b94      	ldr	r3, [pc, #592]	; (800539c <_dtoa_r+0x304>)
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	3303      	adds	r3, #3
 800514e:	e7f3      	b.n	8005138 <_dtoa_r+0xa0>
 8005150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005154:	2200      	movs	r2, #0
 8005156:	ec51 0b17 	vmov	r0, r1, d7
 800515a:	2300      	movs	r3, #0
 800515c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005160:	f7fb fcd2 	bl	8000b08 <__aeabi_dcmpeq>
 8005164:	4680      	mov	r8, r0
 8005166:	b158      	cbz	r0, 8005180 <_dtoa_r+0xe8>
 8005168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800516a:	2301      	movs	r3, #1
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8551 	beq.w	8005c18 <_dtoa_r+0xb80>
 8005176:	488b      	ldr	r0, [pc, #556]	; (80053a4 <_dtoa_r+0x30c>)
 8005178:	6018      	str	r0, [r3, #0]
 800517a:	1e43      	subs	r3, r0, #1
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	e7dd      	b.n	800513c <_dtoa_r+0xa4>
 8005180:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005184:	aa12      	add	r2, sp, #72	; 0x48
 8005186:	a913      	add	r1, sp, #76	; 0x4c
 8005188:	4620      	mov	r0, r4
 800518a:	f001 f8ad 	bl	80062e8 <__d2b>
 800518e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005192:	4683      	mov	fp, r0
 8005194:	2d00      	cmp	r5, #0
 8005196:	d07c      	beq.n	8005292 <_dtoa_r+0x1fa>
 8005198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800519a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800519e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80051a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80051aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80051ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051b2:	4b7d      	ldr	r3, [pc, #500]	; (80053a8 <_dtoa_r+0x310>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	4630      	mov	r0, r6
 80051b8:	4639      	mov	r1, r7
 80051ba:	f7fb f885 	bl	80002c8 <__aeabi_dsub>
 80051be:	a36e      	add	r3, pc, #440	; (adr r3, 8005378 <_dtoa_r+0x2e0>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb fa38 	bl	8000638 <__aeabi_dmul>
 80051c8:	a36d      	add	r3, pc, #436	; (adr r3, 8005380 <_dtoa_r+0x2e8>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb f87d 	bl	80002cc <__adddf3>
 80051d2:	4606      	mov	r6, r0
 80051d4:	4628      	mov	r0, r5
 80051d6:	460f      	mov	r7, r1
 80051d8:	f7fb f9c4 	bl	8000564 <__aeabi_i2d>
 80051dc:	a36a      	add	r3, pc, #424	; (adr r3, 8005388 <_dtoa_r+0x2f0>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb fa29 	bl	8000638 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb f86d 	bl	80002cc <__adddf3>
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	f7fb fccf 	bl	8000b98 <__aeabi_d2iz>
 80051fa:	2200      	movs	r2, #0
 80051fc:	4682      	mov	sl, r0
 80051fe:	2300      	movs	r3, #0
 8005200:	4630      	mov	r0, r6
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb fc8a 	bl	8000b1c <__aeabi_dcmplt>
 8005208:	b148      	cbz	r0, 800521e <_dtoa_r+0x186>
 800520a:	4650      	mov	r0, sl
 800520c:	f7fb f9aa 	bl	8000564 <__aeabi_i2d>
 8005210:	4632      	mov	r2, r6
 8005212:	463b      	mov	r3, r7
 8005214:	f7fb fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8005218:	b908      	cbnz	r0, 800521e <_dtoa_r+0x186>
 800521a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800521e:	f1ba 0f16 	cmp.w	sl, #22
 8005222:	d854      	bhi.n	80052ce <_dtoa_r+0x236>
 8005224:	4b61      	ldr	r3, [pc, #388]	; (80053ac <_dtoa_r+0x314>)
 8005226:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005232:	f7fb fc73 	bl	8000b1c <__aeabi_dcmplt>
 8005236:	2800      	cmp	r0, #0
 8005238:	d04b      	beq.n	80052d2 <_dtoa_r+0x23a>
 800523a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800523e:	2300      	movs	r3, #0
 8005240:	930e      	str	r3, [sp, #56]	; 0x38
 8005242:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005244:	1b5d      	subs	r5, r3, r5
 8005246:	1e6b      	subs	r3, r5, #1
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	bf43      	ittte	mi
 800524c:	2300      	movmi	r3, #0
 800524e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005252:	9304      	strmi	r3, [sp, #16]
 8005254:	f04f 0800 	movpl.w	r8, #0
 8005258:	f1ba 0f00 	cmp.w	sl, #0
 800525c:	db3b      	blt.n	80052d6 <_dtoa_r+0x23e>
 800525e:	9b04      	ldr	r3, [sp, #16]
 8005260:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005264:	4453      	add	r3, sl
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	2300      	movs	r3, #0
 800526a:	9306      	str	r3, [sp, #24]
 800526c:	9b05      	ldr	r3, [sp, #20]
 800526e:	2b09      	cmp	r3, #9
 8005270:	d869      	bhi.n	8005346 <_dtoa_r+0x2ae>
 8005272:	2b05      	cmp	r3, #5
 8005274:	bfc4      	itt	gt
 8005276:	3b04      	subgt	r3, #4
 8005278:	9305      	strgt	r3, [sp, #20]
 800527a:	9b05      	ldr	r3, [sp, #20]
 800527c:	f1a3 0302 	sub.w	r3, r3, #2
 8005280:	bfcc      	ite	gt
 8005282:	2500      	movgt	r5, #0
 8005284:	2501      	movle	r5, #1
 8005286:	2b03      	cmp	r3, #3
 8005288:	d869      	bhi.n	800535e <_dtoa_r+0x2c6>
 800528a:	e8df f003 	tbb	[pc, r3]
 800528e:	4e2c      	.short	0x4e2c
 8005290:	5a4c      	.short	0x5a4c
 8005292:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005296:	441d      	add	r5, r3
 8005298:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800529c:	2b20      	cmp	r3, #32
 800529e:	bfc1      	itttt	gt
 80052a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80052a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80052ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80052b0:	bfda      	itte	le
 80052b2:	f1c3 0320 	rsble	r3, r3, #32
 80052b6:	fa06 f003 	lslle.w	r0, r6, r3
 80052ba:	4318      	orrgt	r0, r3
 80052bc:	f7fb f942 	bl	8000544 <__aeabi_ui2d>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4606      	mov	r6, r0
 80052c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80052c8:	3d01      	subs	r5, #1
 80052ca:	9310      	str	r3, [sp, #64]	; 0x40
 80052cc:	e771      	b.n	80051b2 <_dtoa_r+0x11a>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e7b6      	b.n	8005240 <_dtoa_r+0x1a8>
 80052d2:	900e      	str	r0, [sp, #56]	; 0x38
 80052d4:	e7b5      	b.n	8005242 <_dtoa_r+0x1aa>
 80052d6:	f1ca 0300 	rsb	r3, sl, #0
 80052da:	9306      	str	r3, [sp, #24]
 80052dc:	2300      	movs	r3, #0
 80052de:	eba8 080a 	sub.w	r8, r8, sl
 80052e2:	930d      	str	r3, [sp, #52]	; 0x34
 80052e4:	e7c2      	b.n	800526c <_dtoa_r+0x1d4>
 80052e6:	2300      	movs	r3, #0
 80052e8:	9308      	str	r3, [sp, #32]
 80052ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dc39      	bgt.n	8005364 <_dtoa_r+0x2cc>
 80052f0:	f04f 0901 	mov.w	r9, #1
 80052f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80052f8:	464b      	mov	r3, r9
 80052fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80052fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005300:	2200      	movs	r2, #0
 8005302:	6042      	str	r2, [r0, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	f102 0614 	add.w	r6, r2, #20
 800530a:	429e      	cmp	r6, r3
 800530c:	6841      	ldr	r1, [r0, #4]
 800530e:	d92f      	bls.n	8005370 <_dtoa_r+0x2d8>
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fcc7 	bl	8005ca4 <_Balloc>
 8005316:	9000      	str	r0, [sp, #0]
 8005318:	2800      	cmp	r0, #0
 800531a:	d14b      	bne.n	80053b4 <_dtoa_r+0x31c>
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <_dtoa_r+0x318>)
 800531e:	4602      	mov	r2, r0
 8005320:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005324:	e6d1      	b.n	80050ca <_dtoa_r+0x32>
 8005326:	2301      	movs	r3, #1
 8005328:	e7de      	b.n	80052e8 <_dtoa_r+0x250>
 800532a:	2300      	movs	r3, #0
 800532c:	9308      	str	r3, [sp, #32]
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	eb0a 0903 	add.w	r9, sl, r3
 8005334:	f109 0301 	add.w	r3, r9, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	bfb8      	it	lt
 800533e:	2301      	movlt	r3, #1
 8005340:	e7dd      	b.n	80052fe <_dtoa_r+0x266>
 8005342:	2301      	movs	r3, #1
 8005344:	e7f2      	b.n	800532c <_dtoa_r+0x294>
 8005346:	2501      	movs	r5, #1
 8005348:	2300      	movs	r3, #0
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	9508      	str	r5, [sp, #32]
 800534e:	f04f 39ff 	mov.w	r9, #4294967295
 8005352:	2200      	movs	r2, #0
 8005354:	f8cd 9004 	str.w	r9, [sp, #4]
 8005358:	2312      	movs	r3, #18
 800535a:	9209      	str	r2, [sp, #36]	; 0x24
 800535c:	e7cf      	b.n	80052fe <_dtoa_r+0x266>
 800535e:	2301      	movs	r3, #1
 8005360:	9308      	str	r3, [sp, #32]
 8005362:	e7f4      	b.n	800534e <_dtoa_r+0x2b6>
 8005364:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005368:	f8cd 9004 	str.w	r9, [sp, #4]
 800536c:	464b      	mov	r3, r9
 800536e:	e7c6      	b.n	80052fe <_dtoa_r+0x266>
 8005370:	3101      	adds	r1, #1
 8005372:	6041      	str	r1, [r0, #4]
 8005374:	0052      	lsls	r2, r2, #1
 8005376:	e7c6      	b.n	8005306 <_dtoa_r+0x26e>
 8005378:	636f4361 	.word	0x636f4361
 800537c:	3fd287a7 	.word	0x3fd287a7
 8005380:	8b60c8b3 	.word	0x8b60c8b3
 8005384:	3fc68a28 	.word	0x3fc68a28
 8005388:	509f79fb 	.word	0x509f79fb
 800538c:	3fd34413 	.word	0x3fd34413
 8005390:	0800743d 	.word	0x0800743d
 8005394:	08007454 	.word	0x08007454
 8005398:	7ff00000 	.word	0x7ff00000
 800539c:	08007439 	.word	0x08007439
 80053a0:	08007430 	.word	0x08007430
 80053a4:	0800740d 	.word	0x0800740d
 80053a8:	3ff80000 	.word	0x3ff80000
 80053ac:	08007550 	.word	0x08007550
 80053b0:	080074b3 	.word	0x080074b3
 80053b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b6:	9a00      	ldr	r2, [sp, #0]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	2b0e      	cmp	r3, #14
 80053be:	f200 80ad 	bhi.w	800551c <_dtoa_r+0x484>
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	f000 80aa 	beq.w	800551c <_dtoa_r+0x484>
 80053c8:	f1ba 0f00 	cmp.w	sl, #0
 80053cc:	dd36      	ble.n	800543c <_dtoa_r+0x3a4>
 80053ce:	4ac3      	ldr	r2, [pc, #780]	; (80056dc <_dtoa_r+0x644>)
 80053d0:	f00a 030f 	and.w	r3, sl, #15
 80053d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053d8:	ed93 7b00 	vldr	d7, [r3]
 80053dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80053e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80053e4:	eeb0 8a47 	vmov.f32	s16, s14
 80053e8:	eef0 8a67 	vmov.f32	s17, s15
 80053ec:	d016      	beq.n	800541c <_dtoa_r+0x384>
 80053ee:	4bbc      	ldr	r3, [pc, #752]	; (80056e0 <_dtoa_r+0x648>)
 80053f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053f8:	f7fb fa48 	bl	800088c <__aeabi_ddiv>
 80053fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005400:	f007 070f 	and.w	r7, r7, #15
 8005404:	2503      	movs	r5, #3
 8005406:	4eb6      	ldr	r6, [pc, #728]	; (80056e0 <_dtoa_r+0x648>)
 8005408:	b957      	cbnz	r7, 8005420 <_dtoa_r+0x388>
 800540a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540e:	ec53 2b18 	vmov	r2, r3, d8
 8005412:	f7fb fa3b 	bl	800088c <__aeabi_ddiv>
 8005416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800541a:	e029      	b.n	8005470 <_dtoa_r+0x3d8>
 800541c:	2502      	movs	r5, #2
 800541e:	e7f2      	b.n	8005406 <_dtoa_r+0x36e>
 8005420:	07f9      	lsls	r1, r7, #31
 8005422:	d508      	bpl.n	8005436 <_dtoa_r+0x39e>
 8005424:	ec51 0b18 	vmov	r0, r1, d8
 8005428:	e9d6 2300 	ldrd	r2, r3, [r6]
 800542c:	f7fb f904 	bl	8000638 <__aeabi_dmul>
 8005430:	ec41 0b18 	vmov	d8, r0, r1
 8005434:	3501      	adds	r5, #1
 8005436:	107f      	asrs	r7, r7, #1
 8005438:	3608      	adds	r6, #8
 800543a:	e7e5      	b.n	8005408 <_dtoa_r+0x370>
 800543c:	f000 80a6 	beq.w	800558c <_dtoa_r+0x4f4>
 8005440:	f1ca 0600 	rsb	r6, sl, #0
 8005444:	4ba5      	ldr	r3, [pc, #660]	; (80056dc <_dtoa_r+0x644>)
 8005446:	4fa6      	ldr	r7, [pc, #664]	; (80056e0 <_dtoa_r+0x648>)
 8005448:	f006 020f 	and.w	r2, r6, #15
 800544c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005458:	f7fb f8ee 	bl	8000638 <__aeabi_dmul>
 800545c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005460:	1136      	asrs	r6, r6, #4
 8005462:	2300      	movs	r3, #0
 8005464:	2502      	movs	r5, #2
 8005466:	2e00      	cmp	r6, #0
 8005468:	f040 8085 	bne.w	8005576 <_dtoa_r+0x4de>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1d2      	bne.n	8005416 <_dtoa_r+0x37e>
 8005470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 808c 	beq.w	8005590 <_dtoa_r+0x4f8>
 8005478:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800547c:	4b99      	ldr	r3, [pc, #612]	; (80056e4 <_dtoa_r+0x64c>)
 800547e:	2200      	movs	r2, #0
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fb fb4a 	bl	8000b1c <__aeabi_dcmplt>
 8005488:	2800      	cmp	r0, #0
 800548a:	f000 8081 	beq.w	8005590 <_dtoa_r+0x4f8>
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d07d      	beq.n	8005590 <_dtoa_r+0x4f8>
 8005494:	f1b9 0f00 	cmp.w	r9, #0
 8005498:	dd3c      	ble.n	8005514 <_dtoa_r+0x47c>
 800549a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800549e:	9307      	str	r3, [sp, #28]
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <_dtoa_r+0x650>)
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f7fb f8c6 	bl	8000638 <__aeabi_dmul>
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	3501      	adds	r5, #1
 80054b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80054b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7fb f852 	bl	8000564 <__aeabi_i2d>
 80054c0:	4632      	mov	r2, r6
 80054c2:	463b      	mov	r3, r7
 80054c4:	f7fb f8b8 	bl	8000638 <__aeabi_dmul>
 80054c8:	4b88      	ldr	r3, [pc, #544]	; (80056ec <_dtoa_r+0x654>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	f7fa fefe 	bl	80002cc <__adddf3>
 80054d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80054d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054d8:	9303      	str	r3, [sp, #12]
 80054da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d15c      	bne.n	800559a <_dtoa_r+0x502>
 80054e0:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <_dtoa_r+0x658>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	4630      	mov	r0, r6
 80054e6:	4639      	mov	r1, r7
 80054e8:	f7fa feee 	bl	80002c8 <__aeabi_dsub>
 80054ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054f0:	4606      	mov	r6, r0
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fb fb30 	bl	8000b58 <__aeabi_dcmpgt>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f040 8296 	bne.w	8005a2a <_dtoa_r+0x992>
 80054fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005502:	4630      	mov	r0, r6
 8005504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005508:	4639      	mov	r1, r7
 800550a:	f7fb fb07 	bl	8000b1c <__aeabi_dcmplt>
 800550e:	2800      	cmp	r0, #0
 8005510:	f040 8288 	bne.w	8005a24 <_dtoa_r+0x98c>
 8005514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800551c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800551e:	2b00      	cmp	r3, #0
 8005520:	f2c0 8158 	blt.w	80057d4 <_dtoa_r+0x73c>
 8005524:	f1ba 0f0e 	cmp.w	sl, #14
 8005528:	f300 8154 	bgt.w	80057d4 <_dtoa_r+0x73c>
 800552c:	4b6b      	ldr	r3, [pc, #428]	; (80056dc <_dtoa_r+0x644>)
 800552e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005532:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	f280 80e3 	bge.w	8005704 <_dtoa_r+0x66c>
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f300 80df 	bgt.w	8005704 <_dtoa_r+0x66c>
 8005546:	f040 826d 	bne.w	8005a24 <_dtoa_r+0x98c>
 800554a:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <_dtoa_r+0x658>)
 800554c:	2200      	movs	r2, #0
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fb f871 	bl	8000638 <__aeabi_dmul>
 8005556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800555a:	f7fb faf3 	bl	8000b44 <__aeabi_dcmpge>
 800555e:	9e01      	ldr	r6, [sp, #4]
 8005560:	4637      	mov	r7, r6
 8005562:	2800      	cmp	r0, #0
 8005564:	f040 8243 	bne.w	80059ee <_dtoa_r+0x956>
 8005568:	9d00      	ldr	r5, [sp, #0]
 800556a:	2331      	movs	r3, #49	; 0x31
 800556c:	f805 3b01 	strb.w	r3, [r5], #1
 8005570:	f10a 0a01 	add.w	sl, sl, #1
 8005574:	e23f      	b.n	80059f6 <_dtoa_r+0x95e>
 8005576:	07f2      	lsls	r2, r6, #31
 8005578:	d505      	bpl.n	8005586 <_dtoa_r+0x4ee>
 800557a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557e:	f7fb f85b 	bl	8000638 <__aeabi_dmul>
 8005582:	3501      	adds	r5, #1
 8005584:	2301      	movs	r3, #1
 8005586:	1076      	asrs	r6, r6, #1
 8005588:	3708      	adds	r7, #8
 800558a:	e76c      	b.n	8005466 <_dtoa_r+0x3ce>
 800558c:	2502      	movs	r5, #2
 800558e:	e76f      	b.n	8005470 <_dtoa_r+0x3d8>
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	f8cd a01c 	str.w	sl, [sp, #28]
 8005596:	930c      	str	r3, [sp, #48]	; 0x30
 8005598:	e78d      	b.n	80054b6 <_dtoa_r+0x41e>
 800559a:	9900      	ldr	r1, [sp, #0]
 800559c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800559e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055a0:	4b4e      	ldr	r3, [pc, #312]	; (80056dc <_dtoa_r+0x644>)
 80055a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055a6:	4401      	add	r1, r0
 80055a8:	9102      	str	r1, [sp, #8]
 80055aa:	9908      	ldr	r1, [sp, #32]
 80055ac:	eeb0 8a47 	vmov.f32	s16, s14
 80055b0:	eef0 8a67 	vmov.f32	s17, s15
 80055b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055bc:	2900      	cmp	r1, #0
 80055be:	d045      	beq.n	800564c <_dtoa_r+0x5b4>
 80055c0:	494c      	ldr	r1, [pc, #304]	; (80056f4 <_dtoa_r+0x65c>)
 80055c2:	2000      	movs	r0, #0
 80055c4:	f7fb f962 	bl	800088c <__aeabi_ddiv>
 80055c8:	ec53 2b18 	vmov	r2, r3, d8
 80055cc:	f7fa fe7c 	bl	80002c8 <__aeabi_dsub>
 80055d0:	9d00      	ldr	r5, [sp, #0]
 80055d2:	ec41 0b18 	vmov	d8, r0, r1
 80055d6:	4639      	mov	r1, r7
 80055d8:	4630      	mov	r0, r6
 80055da:	f7fb fadd 	bl	8000b98 <__aeabi_d2iz>
 80055de:	900c      	str	r0, [sp, #48]	; 0x30
 80055e0:	f7fa ffc0 	bl	8000564 <__aeabi_i2d>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4630      	mov	r0, r6
 80055ea:	4639      	mov	r1, r7
 80055ec:	f7fa fe6c 	bl	80002c8 <__aeabi_dsub>
 80055f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055f2:	3330      	adds	r3, #48	; 0x30
 80055f4:	f805 3b01 	strb.w	r3, [r5], #1
 80055f8:	ec53 2b18 	vmov	r2, r3, d8
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	f7fb fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8005604:	2800      	cmp	r0, #0
 8005606:	d165      	bne.n	80056d4 <_dtoa_r+0x63c>
 8005608:	4632      	mov	r2, r6
 800560a:	463b      	mov	r3, r7
 800560c:	4935      	ldr	r1, [pc, #212]	; (80056e4 <_dtoa_r+0x64c>)
 800560e:	2000      	movs	r0, #0
 8005610:	f7fa fe5a 	bl	80002c8 <__aeabi_dsub>
 8005614:	ec53 2b18 	vmov	r2, r3, d8
 8005618:	f7fb fa80 	bl	8000b1c <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	f040 80b9 	bne.w	8005794 <_dtoa_r+0x6fc>
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	429d      	cmp	r5, r3
 8005626:	f43f af75 	beq.w	8005514 <_dtoa_r+0x47c>
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <_dtoa_r+0x650>)
 800562c:	ec51 0b18 	vmov	r0, r1, d8
 8005630:	2200      	movs	r2, #0
 8005632:	f7fb f801 	bl	8000638 <__aeabi_dmul>
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <_dtoa_r+0x650>)
 8005638:	ec41 0b18 	vmov	d8, r0, r1
 800563c:	2200      	movs	r2, #0
 800563e:	4630      	mov	r0, r6
 8005640:	4639      	mov	r1, r7
 8005642:	f7fa fff9 	bl	8000638 <__aeabi_dmul>
 8005646:	4606      	mov	r6, r0
 8005648:	460f      	mov	r7, r1
 800564a:	e7c4      	b.n	80055d6 <_dtoa_r+0x53e>
 800564c:	ec51 0b17 	vmov	r0, r1, d7
 8005650:	f7fa fff2 	bl	8000638 <__aeabi_dmul>
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	9d00      	ldr	r5, [sp, #0]
 8005658:	930c      	str	r3, [sp, #48]	; 0x30
 800565a:	ec41 0b18 	vmov	d8, r0, r1
 800565e:	4639      	mov	r1, r7
 8005660:	4630      	mov	r0, r6
 8005662:	f7fb fa99 	bl	8000b98 <__aeabi_d2iz>
 8005666:	9011      	str	r0, [sp, #68]	; 0x44
 8005668:	f7fa ff7c 	bl	8000564 <__aeabi_i2d>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fe28 	bl	80002c8 <__aeabi_dsub>
 8005678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800567a:	3330      	adds	r3, #48	; 0x30
 800567c:	f805 3b01 	strb.w	r3, [r5], #1
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	429d      	cmp	r5, r3
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	d134      	bne.n	80056f8 <_dtoa_r+0x660>
 800568e:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <_dtoa_r+0x65c>)
 8005690:	ec51 0b18 	vmov	r0, r1, d8
 8005694:	f7fa fe1a 	bl	80002cc <__adddf3>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4630      	mov	r0, r6
 800569e:	4639      	mov	r1, r7
 80056a0:	f7fb fa5a 	bl	8000b58 <__aeabi_dcmpgt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d175      	bne.n	8005794 <_dtoa_r+0x6fc>
 80056a8:	ec53 2b18 	vmov	r2, r3, d8
 80056ac:	4911      	ldr	r1, [pc, #68]	; (80056f4 <_dtoa_r+0x65c>)
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fa fe0a 	bl	80002c8 <__aeabi_dsub>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4630      	mov	r0, r6
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7fb fa2e 	bl	8000b1c <__aeabi_dcmplt>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f43f af27 	beq.w	8005514 <_dtoa_r+0x47c>
 80056c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056c8:	1e6b      	subs	r3, r5, #1
 80056ca:	930c      	str	r3, [sp, #48]	; 0x30
 80056cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056d0:	2b30      	cmp	r3, #48	; 0x30
 80056d2:	d0f8      	beq.n	80056c6 <_dtoa_r+0x62e>
 80056d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80056d8:	e04a      	b.n	8005770 <_dtoa_r+0x6d8>
 80056da:	bf00      	nop
 80056dc:	08007550 	.word	0x08007550
 80056e0:	08007528 	.word	0x08007528
 80056e4:	3ff00000 	.word	0x3ff00000
 80056e8:	40240000 	.word	0x40240000
 80056ec:	401c0000 	.word	0x401c0000
 80056f0:	40140000 	.word	0x40140000
 80056f4:	3fe00000 	.word	0x3fe00000
 80056f8:	4baf      	ldr	r3, [pc, #700]	; (80059b8 <_dtoa_r+0x920>)
 80056fa:	f7fa ff9d 	bl	8000638 <__aeabi_dmul>
 80056fe:	4606      	mov	r6, r0
 8005700:	460f      	mov	r7, r1
 8005702:	e7ac      	b.n	800565e <_dtoa_r+0x5c6>
 8005704:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005708:	9d00      	ldr	r5, [sp, #0]
 800570a:	4642      	mov	r2, r8
 800570c:	464b      	mov	r3, r9
 800570e:	4630      	mov	r0, r6
 8005710:	4639      	mov	r1, r7
 8005712:	f7fb f8bb 	bl	800088c <__aeabi_ddiv>
 8005716:	f7fb fa3f 	bl	8000b98 <__aeabi_d2iz>
 800571a:	9002      	str	r0, [sp, #8]
 800571c:	f7fa ff22 	bl	8000564 <__aeabi_i2d>
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	f7fa ff88 	bl	8000638 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fdca 	bl	80002c8 <__aeabi_dsub>
 8005734:	9e02      	ldr	r6, [sp, #8]
 8005736:	9f01      	ldr	r7, [sp, #4]
 8005738:	3630      	adds	r6, #48	; 0x30
 800573a:	f805 6b01 	strb.w	r6, [r5], #1
 800573e:	9e00      	ldr	r6, [sp, #0]
 8005740:	1bae      	subs	r6, r5, r6
 8005742:	42b7      	cmp	r7, r6
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	d137      	bne.n	80057ba <_dtoa_r+0x722>
 800574a:	f7fa fdbf 	bl	80002cc <__adddf3>
 800574e:	4642      	mov	r2, r8
 8005750:	464b      	mov	r3, r9
 8005752:	4606      	mov	r6, r0
 8005754:	460f      	mov	r7, r1
 8005756:	f7fb f9ff 	bl	8000b58 <__aeabi_dcmpgt>
 800575a:	b9c8      	cbnz	r0, 8005790 <_dtoa_r+0x6f8>
 800575c:	4642      	mov	r2, r8
 800575e:	464b      	mov	r3, r9
 8005760:	4630      	mov	r0, r6
 8005762:	4639      	mov	r1, r7
 8005764:	f7fb f9d0 	bl	8000b08 <__aeabi_dcmpeq>
 8005768:	b110      	cbz	r0, 8005770 <_dtoa_r+0x6d8>
 800576a:	9b02      	ldr	r3, [sp, #8]
 800576c:	07d9      	lsls	r1, r3, #31
 800576e:	d40f      	bmi.n	8005790 <_dtoa_r+0x6f8>
 8005770:	4620      	mov	r0, r4
 8005772:	4659      	mov	r1, fp
 8005774:	f000 fad6 	bl	8005d24 <_Bfree>
 8005778:	2300      	movs	r3, #0
 800577a:	702b      	strb	r3, [r5, #0]
 800577c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800577e:	f10a 0001 	add.w	r0, sl, #1
 8005782:	6018      	str	r0, [r3, #0]
 8005784:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005786:	2b00      	cmp	r3, #0
 8005788:	f43f acd8 	beq.w	800513c <_dtoa_r+0xa4>
 800578c:	601d      	str	r5, [r3, #0]
 800578e:	e4d5      	b.n	800513c <_dtoa_r+0xa4>
 8005790:	f8cd a01c 	str.w	sl, [sp, #28]
 8005794:	462b      	mov	r3, r5
 8005796:	461d      	mov	r5, r3
 8005798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800579c:	2a39      	cmp	r2, #57	; 0x39
 800579e:	d108      	bne.n	80057b2 <_dtoa_r+0x71a>
 80057a0:	9a00      	ldr	r2, [sp, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d1f7      	bne.n	8005796 <_dtoa_r+0x6fe>
 80057a6:	9a07      	ldr	r2, [sp, #28]
 80057a8:	9900      	ldr	r1, [sp, #0]
 80057aa:	3201      	adds	r2, #1
 80057ac:	9207      	str	r2, [sp, #28]
 80057ae:	2230      	movs	r2, #48	; 0x30
 80057b0:	700a      	strb	r2, [r1, #0]
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	3201      	adds	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e78c      	b.n	80056d4 <_dtoa_r+0x63c>
 80057ba:	4b7f      	ldr	r3, [pc, #508]	; (80059b8 <_dtoa_r+0x920>)
 80057bc:	2200      	movs	r2, #0
 80057be:	f7fa ff3b 	bl	8000638 <__aeabi_dmul>
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	f7fb f99d 	bl	8000b08 <__aeabi_dcmpeq>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d09b      	beq.n	800570a <_dtoa_r+0x672>
 80057d2:	e7cd      	b.n	8005770 <_dtoa_r+0x6d8>
 80057d4:	9a08      	ldr	r2, [sp, #32]
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	f000 80c4 	beq.w	8005964 <_dtoa_r+0x8cc>
 80057dc:	9a05      	ldr	r2, [sp, #20]
 80057de:	2a01      	cmp	r2, #1
 80057e0:	f300 80a8 	bgt.w	8005934 <_dtoa_r+0x89c>
 80057e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	f000 80a0 	beq.w	800592c <_dtoa_r+0x894>
 80057ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057f0:	9e06      	ldr	r6, [sp, #24]
 80057f2:	4645      	mov	r5, r8
 80057f4:	9a04      	ldr	r2, [sp, #16]
 80057f6:	2101      	movs	r1, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	4620      	mov	r0, r4
 80057fc:	4498      	add	r8, r3
 80057fe:	9204      	str	r2, [sp, #16]
 8005800:	f000 fb4c 	bl	8005e9c <__i2b>
 8005804:	4607      	mov	r7, r0
 8005806:	2d00      	cmp	r5, #0
 8005808:	dd0b      	ble.n	8005822 <_dtoa_r+0x78a>
 800580a:	9b04      	ldr	r3, [sp, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	dd08      	ble.n	8005822 <_dtoa_r+0x78a>
 8005810:	42ab      	cmp	r3, r5
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	bfa8      	it	ge
 8005816:	462b      	movge	r3, r5
 8005818:	eba8 0803 	sub.w	r8, r8, r3
 800581c:	1aed      	subs	r5, r5, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	9b06      	ldr	r3, [sp, #24]
 8005824:	b1fb      	cbz	r3, 8005866 <_dtoa_r+0x7ce>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 809f 	beq.w	800596c <_dtoa_r+0x8d4>
 800582e:	2e00      	cmp	r6, #0
 8005830:	dd11      	ble.n	8005856 <_dtoa_r+0x7be>
 8005832:	4639      	mov	r1, r7
 8005834:	4632      	mov	r2, r6
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fbec 	bl	8006014 <__pow5mult>
 800583c:	465a      	mov	r2, fp
 800583e:	4601      	mov	r1, r0
 8005840:	4607      	mov	r7, r0
 8005842:	4620      	mov	r0, r4
 8005844:	f000 fb40 	bl	8005ec8 <__multiply>
 8005848:	4659      	mov	r1, fp
 800584a:	9007      	str	r0, [sp, #28]
 800584c:	4620      	mov	r0, r4
 800584e:	f000 fa69 	bl	8005d24 <_Bfree>
 8005852:	9b07      	ldr	r3, [sp, #28]
 8005854:	469b      	mov	fp, r3
 8005856:	9b06      	ldr	r3, [sp, #24]
 8005858:	1b9a      	subs	r2, r3, r6
 800585a:	d004      	beq.n	8005866 <_dtoa_r+0x7ce>
 800585c:	4659      	mov	r1, fp
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fbd8 	bl	8006014 <__pow5mult>
 8005864:	4683      	mov	fp, r0
 8005866:	2101      	movs	r1, #1
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fb17 	bl	8005e9c <__i2b>
 800586e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	4606      	mov	r6, r0
 8005874:	dd7c      	ble.n	8005970 <_dtoa_r+0x8d8>
 8005876:	461a      	mov	r2, r3
 8005878:	4601      	mov	r1, r0
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fbca 	bl	8006014 <__pow5mult>
 8005880:	9b05      	ldr	r3, [sp, #20]
 8005882:	2b01      	cmp	r3, #1
 8005884:	4606      	mov	r6, r0
 8005886:	dd76      	ble.n	8005976 <_dtoa_r+0x8de>
 8005888:	2300      	movs	r3, #0
 800588a:	9306      	str	r3, [sp, #24]
 800588c:	6933      	ldr	r3, [r6, #16]
 800588e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005892:	6918      	ldr	r0, [r3, #16]
 8005894:	f000 fab2 	bl	8005dfc <__hi0bits>
 8005898:	f1c0 0020 	rsb	r0, r0, #32
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	4418      	add	r0, r3
 80058a0:	f010 001f 	ands.w	r0, r0, #31
 80058a4:	f000 8086 	beq.w	80059b4 <_dtoa_r+0x91c>
 80058a8:	f1c0 0320 	rsb	r3, r0, #32
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	dd7f      	ble.n	80059b0 <_dtoa_r+0x918>
 80058b0:	f1c0 001c 	rsb	r0, r0, #28
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	4403      	add	r3, r0
 80058b8:	4480      	add	r8, r0
 80058ba:	4405      	add	r5, r0
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	f1b8 0f00 	cmp.w	r8, #0
 80058c2:	dd05      	ble.n	80058d0 <_dtoa_r+0x838>
 80058c4:	4659      	mov	r1, fp
 80058c6:	4642      	mov	r2, r8
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fbfd 	bl	80060c8 <__lshift>
 80058ce:	4683      	mov	fp, r0
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd05      	ble.n	80058e2 <_dtoa_r+0x84a>
 80058d6:	4631      	mov	r1, r6
 80058d8:	461a      	mov	r2, r3
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 fbf4 	bl	80060c8 <__lshift>
 80058e0:	4606      	mov	r6, r0
 80058e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d069      	beq.n	80059bc <_dtoa_r+0x924>
 80058e8:	4631      	mov	r1, r6
 80058ea:	4658      	mov	r0, fp
 80058ec:	f000 fc58 	bl	80061a0 <__mcmp>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	da63      	bge.n	80059bc <_dtoa_r+0x924>
 80058f4:	2300      	movs	r3, #0
 80058f6:	4659      	mov	r1, fp
 80058f8:	220a      	movs	r2, #10
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fa34 	bl	8005d68 <__multadd>
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005906:	4683      	mov	fp, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 818f 	beq.w	8005c2c <_dtoa_r+0xb94>
 800590e:	4639      	mov	r1, r7
 8005910:	2300      	movs	r3, #0
 8005912:	220a      	movs	r2, #10
 8005914:	4620      	mov	r0, r4
 8005916:	f000 fa27 	bl	8005d68 <__multadd>
 800591a:	f1b9 0f00 	cmp.w	r9, #0
 800591e:	4607      	mov	r7, r0
 8005920:	f300 808e 	bgt.w	8005a40 <_dtoa_r+0x9a8>
 8005924:	9b05      	ldr	r3, [sp, #20]
 8005926:	2b02      	cmp	r3, #2
 8005928:	dc50      	bgt.n	80059cc <_dtoa_r+0x934>
 800592a:	e089      	b.n	8005a40 <_dtoa_r+0x9a8>
 800592c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800592e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005932:	e75d      	b.n	80057f0 <_dtoa_r+0x758>
 8005934:	9b01      	ldr	r3, [sp, #4]
 8005936:	1e5e      	subs	r6, r3, #1
 8005938:	9b06      	ldr	r3, [sp, #24]
 800593a:	42b3      	cmp	r3, r6
 800593c:	bfbf      	itttt	lt
 800593e:	9b06      	ldrlt	r3, [sp, #24]
 8005940:	9606      	strlt	r6, [sp, #24]
 8005942:	1af2      	sublt	r2, r6, r3
 8005944:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005946:	bfb6      	itet	lt
 8005948:	189b      	addlt	r3, r3, r2
 800594a:	1b9e      	subge	r6, r3, r6
 800594c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	bfb8      	it	lt
 8005952:	2600      	movlt	r6, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfb5      	itete	lt
 8005958:	eba8 0503 	sublt.w	r5, r8, r3
 800595c:	9b01      	ldrge	r3, [sp, #4]
 800595e:	2300      	movlt	r3, #0
 8005960:	4645      	movge	r5, r8
 8005962:	e747      	b.n	80057f4 <_dtoa_r+0x75c>
 8005964:	9e06      	ldr	r6, [sp, #24]
 8005966:	9f08      	ldr	r7, [sp, #32]
 8005968:	4645      	mov	r5, r8
 800596a:	e74c      	b.n	8005806 <_dtoa_r+0x76e>
 800596c:	9a06      	ldr	r2, [sp, #24]
 800596e:	e775      	b.n	800585c <_dtoa_r+0x7c4>
 8005970:	9b05      	ldr	r3, [sp, #20]
 8005972:	2b01      	cmp	r3, #1
 8005974:	dc18      	bgt.n	80059a8 <_dtoa_r+0x910>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	b9b3      	cbnz	r3, 80059a8 <_dtoa_r+0x910>
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005980:	b9a3      	cbnz	r3, 80059ac <_dtoa_r+0x914>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	051b      	lsls	r3, r3, #20
 800598c:	b12b      	cbz	r3, 800599a <_dtoa_r+0x902>
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	3301      	adds	r3, #1
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	f108 0801 	add.w	r8, r8, #1
 8005998:	2301      	movs	r3, #1
 800599a:	9306      	str	r3, [sp, #24]
 800599c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f47f af74 	bne.w	800588c <_dtoa_r+0x7f4>
 80059a4:	2001      	movs	r0, #1
 80059a6:	e779      	b.n	800589c <_dtoa_r+0x804>
 80059a8:	2300      	movs	r3, #0
 80059aa:	e7f6      	b.n	800599a <_dtoa_r+0x902>
 80059ac:	9b02      	ldr	r3, [sp, #8]
 80059ae:	e7f4      	b.n	800599a <_dtoa_r+0x902>
 80059b0:	d085      	beq.n	80058be <_dtoa_r+0x826>
 80059b2:	4618      	mov	r0, r3
 80059b4:	301c      	adds	r0, #28
 80059b6:	e77d      	b.n	80058b4 <_dtoa_r+0x81c>
 80059b8:	40240000 	.word	0x40240000
 80059bc:	9b01      	ldr	r3, [sp, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dc38      	bgt.n	8005a34 <_dtoa_r+0x99c>
 80059c2:	9b05      	ldr	r3, [sp, #20]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	dd35      	ble.n	8005a34 <_dtoa_r+0x99c>
 80059c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	d10d      	bne.n	80059ee <_dtoa_r+0x956>
 80059d2:	4631      	mov	r1, r6
 80059d4:	464b      	mov	r3, r9
 80059d6:	2205      	movs	r2, #5
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 f9c5 	bl	8005d68 <__multadd>
 80059de:	4601      	mov	r1, r0
 80059e0:	4606      	mov	r6, r0
 80059e2:	4658      	mov	r0, fp
 80059e4:	f000 fbdc 	bl	80061a0 <__mcmp>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f73f adbd 	bgt.w	8005568 <_dtoa_r+0x4d0>
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	9d00      	ldr	r5, [sp, #0]
 80059f2:	ea6f 0a03 	mvn.w	sl, r3
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	4631      	mov	r1, r6
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 f991 	bl	8005d24 <_Bfree>
 8005a02:	2f00      	cmp	r7, #0
 8005a04:	f43f aeb4 	beq.w	8005770 <_dtoa_r+0x6d8>
 8005a08:	f1b8 0f00 	cmp.w	r8, #0
 8005a0c:	d005      	beq.n	8005a1a <_dtoa_r+0x982>
 8005a0e:	45b8      	cmp	r8, r7
 8005a10:	d003      	beq.n	8005a1a <_dtoa_r+0x982>
 8005a12:	4641      	mov	r1, r8
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 f985 	bl	8005d24 <_Bfree>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 f981 	bl	8005d24 <_Bfree>
 8005a22:	e6a5      	b.n	8005770 <_dtoa_r+0x6d8>
 8005a24:	2600      	movs	r6, #0
 8005a26:	4637      	mov	r7, r6
 8005a28:	e7e1      	b.n	80059ee <_dtoa_r+0x956>
 8005a2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005a2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a30:	4637      	mov	r7, r6
 8005a32:	e599      	b.n	8005568 <_dtoa_r+0x4d0>
 8005a34:	9b08      	ldr	r3, [sp, #32]
 8005a36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80fd 	beq.w	8005c3a <_dtoa_r+0xba2>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	dd05      	ble.n	8005a50 <_dtoa_r+0x9b8>
 8005a44:	4639      	mov	r1, r7
 8005a46:	462a      	mov	r2, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 fb3d 	bl	80060c8 <__lshift>
 8005a4e:	4607      	mov	r7, r0
 8005a50:	9b06      	ldr	r3, [sp, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d05c      	beq.n	8005b10 <_dtoa_r+0xa78>
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f923 	bl	8005ca4 <_Balloc>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	b928      	cbnz	r0, 8005a6e <_dtoa_r+0x9d6>
 8005a62:	4b80      	ldr	r3, [pc, #512]	; (8005c64 <_dtoa_r+0xbcc>)
 8005a64:	4602      	mov	r2, r0
 8005a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a6a:	f7ff bb2e 	b.w	80050ca <_dtoa_r+0x32>
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	3202      	adds	r2, #2
 8005a72:	0092      	lsls	r2, r2, #2
 8005a74:	f107 010c 	add.w	r1, r7, #12
 8005a78:	300c      	adds	r0, #12
 8005a7a:	f000 f905 	bl	8005c88 <memcpy>
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 fb20 	bl	80060c8 <__lshift>
 8005a88:	9b00      	ldr	r3, [sp, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	444b      	add	r3, r9
 8005a92:	9307      	str	r3, [sp, #28]
 8005a94:	9b02      	ldr	r3, [sp, #8]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	46b8      	mov	r8, r7
 8005a9c:	9306      	str	r3, [sp, #24]
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	9b01      	ldr	r3, [sp, #4]
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	4658      	mov	r0, fp
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	f7ff fa67 	bl	8004f7c <quorem>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	3330      	adds	r3, #48	; 0x30
 8005ab2:	9004      	str	r0, [sp, #16]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	4658      	mov	r0, fp
 8005ab8:	9308      	str	r3, [sp, #32]
 8005aba:	f000 fb71 	bl	80061a0 <__mcmp>
 8005abe:	463a      	mov	r2, r7
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fb87 	bl	80061d8 <__mdiff>
 8005aca:	68c2      	ldr	r2, [r0, #12]
 8005acc:	9b08      	ldr	r3, [sp, #32]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	bb02      	cbnz	r2, 8005b14 <_dtoa_r+0xa7c>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4658      	mov	r0, fp
 8005ad6:	f000 fb63 	bl	80061a0 <__mcmp>
 8005ada:	9b08      	ldr	r3, [sp, #32]
 8005adc:	4602      	mov	r2, r0
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005ae6:	f000 f91d 	bl	8005d24 <_Bfree>
 8005aea:	9b05      	ldr	r3, [sp, #20]
 8005aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aee:	9d01      	ldr	r5, [sp, #4]
 8005af0:	ea43 0102 	orr.w	r1, r3, r2
 8005af4:	9b06      	ldr	r3, [sp, #24]
 8005af6:	430b      	orrs	r3, r1
 8005af8:	9b08      	ldr	r3, [sp, #32]
 8005afa:	d10d      	bne.n	8005b18 <_dtoa_r+0xa80>
 8005afc:	2b39      	cmp	r3, #57	; 0x39
 8005afe:	d029      	beq.n	8005b54 <_dtoa_r+0xabc>
 8005b00:	f1b9 0f00 	cmp.w	r9, #0
 8005b04:	dd01      	ble.n	8005b0a <_dtoa_r+0xa72>
 8005b06:	9b04      	ldr	r3, [sp, #16]
 8005b08:	3331      	adds	r3, #49	; 0x31
 8005b0a:	9a02      	ldr	r2, [sp, #8]
 8005b0c:	7013      	strb	r3, [r2, #0]
 8005b0e:	e774      	b.n	80059fa <_dtoa_r+0x962>
 8005b10:	4638      	mov	r0, r7
 8005b12:	e7b9      	b.n	8005a88 <_dtoa_r+0x9f0>
 8005b14:	2201      	movs	r2, #1
 8005b16:	e7e2      	b.n	8005ade <_dtoa_r+0xa46>
 8005b18:	f1b9 0f00 	cmp.w	r9, #0
 8005b1c:	db06      	blt.n	8005b2c <_dtoa_r+0xa94>
 8005b1e:	9905      	ldr	r1, [sp, #20]
 8005b20:	ea41 0909 	orr.w	r9, r1, r9
 8005b24:	9906      	ldr	r1, [sp, #24]
 8005b26:	ea59 0101 	orrs.w	r1, r9, r1
 8005b2a:	d120      	bne.n	8005b6e <_dtoa_r+0xad6>
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	ddec      	ble.n	8005b0a <_dtoa_r+0xa72>
 8005b30:	4659      	mov	r1, fp
 8005b32:	2201      	movs	r2, #1
 8005b34:	4620      	mov	r0, r4
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	f000 fac6 	bl	80060c8 <__lshift>
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4683      	mov	fp, r0
 8005b40:	f000 fb2e 	bl	80061a0 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	dc02      	bgt.n	8005b50 <_dtoa_r+0xab8>
 8005b4a:	d1de      	bne.n	8005b0a <_dtoa_r+0xa72>
 8005b4c:	07da      	lsls	r2, r3, #31
 8005b4e:	d5dc      	bpl.n	8005b0a <_dtoa_r+0xa72>
 8005b50:	2b39      	cmp	r3, #57	; 0x39
 8005b52:	d1d8      	bne.n	8005b06 <_dtoa_r+0xa6e>
 8005b54:	9a02      	ldr	r2, [sp, #8]
 8005b56:	2339      	movs	r3, #57	; 0x39
 8005b58:	7013      	strb	r3, [r2, #0]
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	461d      	mov	r5, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b64:	2a39      	cmp	r2, #57	; 0x39
 8005b66:	d050      	beq.n	8005c0a <_dtoa_r+0xb72>
 8005b68:	3201      	adds	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e745      	b.n	80059fa <_dtoa_r+0x962>
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	dd03      	ble.n	8005b7a <_dtoa_r+0xae2>
 8005b72:	2b39      	cmp	r3, #57	; 0x39
 8005b74:	d0ee      	beq.n	8005b54 <_dtoa_r+0xabc>
 8005b76:	3301      	adds	r3, #1
 8005b78:	e7c7      	b.n	8005b0a <_dtoa_r+0xa72>
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	9907      	ldr	r1, [sp, #28]
 8005b7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b82:	428a      	cmp	r2, r1
 8005b84:	d02a      	beq.n	8005bdc <_dtoa_r+0xb44>
 8005b86:	4659      	mov	r1, fp
 8005b88:	2300      	movs	r3, #0
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f8eb 	bl	8005d68 <__multadd>
 8005b92:	45b8      	cmp	r8, r7
 8005b94:	4683      	mov	fp, r0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	f04f 020a 	mov.w	r2, #10
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	d107      	bne.n	8005bb4 <_dtoa_r+0xb1c>
 8005ba4:	f000 f8e0 	bl	8005d68 <__multadd>
 8005ba8:	4680      	mov	r8, r0
 8005baa:	4607      	mov	r7, r0
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	e775      	b.n	8005aa0 <_dtoa_r+0xa08>
 8005bb4:	f000 f8d8 	bl	8005d68 <__multadd>
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4680      	mov	r8, r0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f8d1 	bl	8005d68 <__multadd>
 8005bc6:	4607      	mov	r7, r0
 8005bc8:	e7f0      	b.n	8005bac <_dtoa_r+0xb14>
 8005bca:	f1b9 0f00 	cmp.w	r9, #0
 8005bce:	9a00      	ldr	r2, [sp, #0]
 8005bd0:	bfcc      	ite	gt
 8005bd2:	464d      	movgt	r5, r9
 8005bd4:	2501      	movle	r5, #1
 8005bd6:	4415      	add	r5, r2
 8005bd8:	f04f 0800 	mov.w	r8, #0
 8005bdc:	4659      	mov	r1, fp
 8005bde:	2201      	movs	r2, #1
 8005be0:	4620      	mov	r0, r4
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	f000 fa70 	bl	80060c8 <__lshift>
 8005be8:	4631      	mov	r1, r6
 8005bea:	4683      	mov	fp, r0
 8005bec:	f000 fad8 	bl	80061a0 <__mcmp>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	dcb2      	bgt.n	8005b5a <_dtoa_r+0xac2>
 8005bf4:	d102      	bne.n	8005bfc <_dtoa_r+0xb64>
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	07db      	lsls	r3, r3, #31
 8005bfa:	d4ae      	bmi.n	8005b5a <_dtoa_r+0xac2>
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c04:	2a30      	cmp	r2, #48	; 0x30
 8005c06:	d0fa      	beq.n	8005bfe <_dtoa_r+0xb66>
 8005c08:	e6f7      	b.n	80059fa <_dtoa_r+0x962>
 8005c0a:	9a00      	ldr	r2, [sp, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1a5      	bne.n	8005b5c <_dtoa_r+0xac4>
 8005c10:	f10a 0a01 	add.w	sl, sl, #1
 8005c14:	2331      	movs	r3, #49	; 0x31
 8005c16:	e779      	b.n	8005b0c <_dtoa_r+0xa74>
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <_dtoa_r+0xbd0>)
 8005c1a:	f7ff baaf 	b.w	800517c <_dtoa_r+0xe4>
 8005c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f aa86 	bne.w	8005132 <_dtoa_r+0x9a>
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <_dtoa_r+0xbd4>)
 8005c28:	f7ff baa8 	b.w	800517c <_dtoa_r+0xe4>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	dc03      	bgt.n	8005c3a <_dtoa_r+0xba2>
 8005c32:	9b05      	ldr	r3, [sp, #20]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f73f aec9 	bgt.w	80059cc <_dtoa_r+0x934>
 8005c3a:	9d00      	ldr	r5, [sp, #0]
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f7ff f99c 	bl	8004f7c <quorem>
 8005c44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c48:	f805 3b01 	strb.w	r3, [r5], #1
 8005c4c:	9a00      	ldr	r2, [sp, #0]
 8005c4e:	1aaa      	subs	r2, r5, r2
 8005c50:	4591      	cmp	r9, r2
 8005c52:	ddba      	ble.n	8005bca <_dtoa_r+0xb32>
 8005c54:	4659      	mov	r1, fp
 8005c56:	2300      	movs	r3, #0
 8005c58:	220a      	movs	r2, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f884 	bl	8005d68 <__multadd>
 8005c60:	4683      	mov	fp, r0
 8005c62:	e7eb      	b.n	8005c3c <_dtoa_r+0xba4>
 8005c64:	080074b3 	.word	0x080074b3
 8005c68:	0800740c 	.word	0x0800740c
 8005c6c:	08007430 	.word	0x08007430

08005c70 <_localeconv_r>:
 8005c70:	4800      	ldr	r0, [pc, #0]	; (8005c74 <_localeconv_r+0x4>)
 8005c72:	4770      	bx	lr
 8005c74:	20000160 	.word	0x20000160

08005c78 <malloc>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <malloc+0xc>)
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f000 bbef 	b.w	8006460 <_malloc_r>
 8005c82:	bf00      	nop
 8005c84:	2000000c 	.word	0x2000000c

08005c88 <memcpy>:
 8005c88:	440a      	add	r2, r1
 8005c8a:	4291      	cmp	r1, r2
 8005c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c90:	d100      	bne.n	8005c94 <memcpy+0xc>
 8005c92:	4770      	bx	lr
 8005c94:	b510      	push	{r4, lr}
 8005c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9e:	4291      	cmp	r1, r2
 8005ca0:	d1f9      	bne.n	8005c96 <memcpy+0xe>
 8005ca2:	bd10      	pop	{r4, pc}

08005ca4 <_Balloc>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	b976      	cbnz	r6, 8005ccc <_Balloc+0x28>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	f7ff ffe2 	bl	8005c78 <malloc>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cb8:	b920      	cbnz	r0, 8005cc4 <_Balloc+0x20>
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <_Balloc+0x78>)
 8005cbc:	4818      	ldr	r0, [pc, #96]	; (8005d20 <_Balloc+0x7c>)
 8005cbe:	2166      	movs	r1, #102	; 0x66
 8005cc0:	f000 fd94 	bl	80067ec <__assert_func>
 8005cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cc8:	6006      	str	r6, [r0, #0]
 8005cca:	60c6      	str	r6, [r0, #12]
 8005ccc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cce:	68f3      	ldr	r3, [r6, #12]
 8005cd0:	b183      	cbz	r3, 8005cf4 <_Balloc+0x50>
 8005cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cda:	b9b8      	cbnz	r0, 8005d0c <_Balloc+0x68>
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f605 	lsl.w	r6, r1, r5
 8005ce2:	1d72      	adds	r2, r6, #5
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f000 fb5a 	bl	80063a0 <_calloc_r>
 8005cec:	b160      	cbz	r0, 8005d08 <_Balloc+0x64>
 8005cee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cf2:	e00e      	b.n	8005d12 <_Balloc+0x6e>
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fb51 	bl	80063a0 <_calloc_r>
 8005cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d00:	60f0      	str	r0, [r6, #12]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e4      	bne.n	8005cd2 <_Balloc+0x2e>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	6802      	ldr	r2, [r0, #0]
 8005d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d12:	2300      	movs	r3, #0
 8005d14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d18:	e7f7      	b.n	8005d0a <_Balloc+0x66>
 8005d1a:	bf00      	nop
 8005d1c:	0800743d 	.word	0x0800743d
 8005d20:	080074c4 	.word	0x080074c4

08005d24 <_Bfree>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b976      	cbnz	r6, 8005d4c <_Bfree+0x28>
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f7ff ffa2 	bl	8005c78 <malloc>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6268      	str	r0, [r5, #36]	; 0x24
 8005d38:	b920      	cbnz	r0, 8005d44 <_Bfree+0x20>
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <_Bfree+0x3c>)
 8005d3c:	4809      	ldr	r0, [pc, #36]	; (8005d64 <_Bfree+0x40>)
 8005d3e:	218a      	movs	r1, #138	; 0x8a
 8005d40:	f000 fd54 	bl	80067ec <__assert_func>
 8005d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d48:	6006      	str	r6, [r0, #0]
 8005d4a:	60c6      	str	r6, [r0, #12]
 8005d4c:	b13c      	cbz	r4, 8005d5e <_Bfree+0x3a>
 8005d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d50:	6862      	ldr	r2, [r4, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d58:	6021      	str	r1, [r4, #0]
 8005d5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	0800743d 	.word	0x0800743d
 8005d64:	080074c4 	.word	0x080074c4

08005d68 <__multadd>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	690e      	ldr	r6, [r1, #16]
 8005d6e:	4607      	mov	r7, r0
 8005d70:	4698      	mov	r8, r3
 8005d72:	460c      	mov	r4, r1
 8005d74:	f101 0014 	add.w	r0, r1, #20
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6805      	ldr	r5, [r0, #0]
 8005d7c:	b2a9      	uxth	r1, r5
 8005d7e:	fb02 8101 	mla	r1, r2, r1, r8
 8005d82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d86:	0c2d      	lsrs	r5, r5, #16
 8005d88:	fb02 c505 	mla	r5, r2, r5, ip
 8005d8c:	b289      	uxth	r1, r1
 8005d8e:	3301      	adds	r3, #1
 8005d90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d94:	429e      	cmp	r6, r3
 8005d96:	f840 1b04 	str.w	r1, [r0], #4
 8005d9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d9e:	dcec      	bgt.n	8005d7a <__multadd+0x12>
 8005da0:	f1b8 0f00 	cmp.w	r8, #0
 8005da4:	d022      	beq.n	8005dec <__multadd+0x84>
 8005da6:	68a3      	ldr	r3, [r4, #8]
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	dc19      	bgt.n	8005de0 <__multadd+0x78>
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4638      	mov	r0, r7
 8005db0:	3101      	adds	r1, #1
 8005db2:	f7ff ff77 	bl	8005ca4 <_Balloc>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b928      	cbnz	r0, 8005dc6 <__multadd+0x5e>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <__multadd+0x8c>)
 8005dbe:	480e      	ldr	r0, [pc, #56]	; (8005df8 <__multadd+0x90>)
 8005dc0:	21b5      	movs	r1, #181	; 0xb5
 8005dc2:	f000 fd13 	bl	80067ec <__assert_func>
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	3202      	adds	r2, #2
 8005dca:	f104 010c 	add.w	r1, r4, #12
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	300c      	adds	r0, #12
 8005dd2:	f7ff ff59 	bl	8005c88 <memcpy>
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa3 	bl	8005d24 <_Bfree>
 8005dde:	462c      	mov	r4, r5
 8005de0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005de4:	3601      	adds	r6, #1
 8005de6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005dea:	6126      	str	r6, [r4, #16]
 8005dec:	4620      	mov	r0, r4
 8005dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df2:	bf00      	nop
 8005df4:	080074b3 	.word	0x080074b3
 8005df8:	080074c4 	.word	0x080074c4

08005dfc <__hi0bits>:
 8005dfc:	0c03      	lsrs	r3, r0, #16
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	b9d3      	cbnz	r3, 8005e38 <__hi0bits+0x3c>
 8005e02:	0400      	lsls	r0, r0, #16
 8005e04:	2310      	movs	r3, #16
 8005e06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e0a:	bf04      	itt	eq
 8005e0c:	0200      	lsleq	r0, r0, #8
 8005e0e:	3308      	addeq	r3, #8
 8005e10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e14:	bf04      	itt	eq
 8005e16:	0100      	lsleq	r0, r0, #4
 8005e18:	3304      	addeq	r3, #4
 8005e1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e1e:	bf04      	itt	eq
 8005e20:	0080      	lsleq	r0, r0, #2
 8005e22:	3302      	addeq	r3, #2
 8005e24:	2800      	cmp	r0, #0
 8005e26:	db05      	blt.n	8005e34 <__hi0bits+0x38>
 8005e28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e2c:	f103 0301 	add.w	r3, r3, #1
 8005e30:	bf08      	it	eq
 8005e32:	2320      	moveq	r3, #32
 8005e34:	4618      	mov	r0, r3
 8005e36:	4770      	bx	lr
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e7e4      	b.n	8005e06 <__hi0bits+0xa>

08005e3c <__lo0bits>:
 8005e3c:	6803      	ldr	r3, [r0, #0]
 8005e3e:	f013 0207 	ands.w	r2, r3, #7
 8005e42:	4601      	mov	r1, r0
 8005e44:	d00b      	beq.n	8005e5e <__lo0bits+0x22>
 8005e46:	07da      	lsls	r2, r3, #31
 8005e48:	d424      	bmi.n	8005e94 <__lo0bits+0x58>
 8005e4a:	0798      	lsls	r0, r3, #30
 8005e4c:	bf49      	itett	mi
 8005e4e:	085b      	lsrmi	r3, r3, #1
 8005e50:	089b      	lsrpl	r3, r3, #2
 8005e52:	2001      	movmi	r0, #1
 8005e54:	600b      	strmi	r3, [r1, #0]
 8005e56:	bf5c      	itt	pl
 8005e58:	600b      	strpl	r3, [r1, #0]
 8005e5a:	2002      	movpl	r0, #2
 8005e5c:	4770      	bx	lr
 8005e5e:	b298      	uxth	r0, r3
 8005e60:	b9b0      	cbnz	r0, 8005e90 <__lo0bits+0x54>
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	2010      	movs	r0, #16
 8005e66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e6a:	bf04      	itt	eq
 8005e6c:	0a1b      	lsreq	r3, r3, #8
 8005e6e:	3008      	addeq	r0, #8
 8005e70:	071a      	lsls	r2, r3, #28
 8005e72:	bf04      	itt	eq
 8005e74:	091b      	lsreq	r3, r3, #4
 8005e76:	3004      	addeq	r0, #4
 8005e78:	079a      	lsls	r2, r3, #30
 8005e7a:	bf04      	itt	eq
 8005e7c:	089b      	lsreq	r3, r3, #2
 8005e7e:	3002      	addeq	r0, #2
 8005e80:	07da      	lsls	r2, r3, #31
 8005e82:	d403      	bmi.n	8005e8c <__lo0bits+0x50>
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	f100 0001 	add.w	r0, r0, #1
 8005e8a:	d005      	beq.n	8005e98 <__lo0bits+0x5c>
 8005e8c:	600b      	str	r3, [r1, #0]
 8005e8e:	4770      	bx	lr
 8005e90:	4610      	mov	r0, r2
 8005e92:	e7e8      	b.n	8005e66 <__lo0bits+0x2a>
 8005e94:	2000      	movs	r0, #0
 8005e96:	4770      	bx	lr
 8005e98:	2020      	movs	r0, #32
 8005e9a:	4770      	bx	lr

08005e9c <__i2b>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	f7ff feff 	bl	8005ca4 <_Balloc>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	b928      	cbnz	r0, 8005eb6 <__i2b+0x1a>
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <__i2b+0x24>)
 8005eac:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <__i2b+0x28>)
 8005eae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005eb2:	f000 fc9b 	bl	80067ec <__assert_func>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	6144      	str	r4, [r0, #20]
 8005eba:	6103      	str	r3, [r0, #16]
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	080074b3 	.word	0x080074b3
 8005ec4:	080074c4 	.word	0x080074c4

08005ec8 <__multiply>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	4614      	mov	r4, r2
 8005ece:	690a      	ldr	r2, [r1, #16]
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bfb8      	it	lt
 8005ed6:	460b      	movlt	r3, r1
 8005ed8:	460d      	mov	r5, r1
 8005eda:	bfbc      	itt	lt
 8005edc:	4625      	movlt	r5, r4
 8005ede:	461c      	movlt	r4, r3
 8005ee0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005ee4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ee8:	68ab      	ldr	r3, [r5, #8]
 8005eea:	6869      	ldr	r1, [r5, #4]
 8005eec:	eb0a 0709 	add.w	r7, sl, r9
 8005ef0:	42bb      	cmp	r3, r7
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	bfb8      	it	lt
 8005ef6:	3101      	addlt	r1, #1
 8005ef8:	f7ff fed4 	bl	8005ca4 <_Balloc>
 8005efc:	b930      	cbnz	r0, 8005f0c <__multiply+0x44>
 8005efe:	4602      	mov	r2, r0
 8005f00:	4b42      	ldr	r3, [pc, #264]	; (800600c <__multiply+0x144>)
 8005f02:	4843      	ldr	r0, [pc, #268]	; (8006010 <__multiply+0x148>)
 8005f04:	f240 115d 	movw	r1, #349	; 0x15d
 8005f08:	f000 fc70 	bl	80067ec <__assert_func>
 8005f0c:	f100 0614 	add.w	r6, r0, #20
 8005f10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005f14:	4633      	mov	r3, r6
 8005f16:	2200      	movs	r2, #0
 8005f18:	4543      	cmp	r3, r8
 8005f1a:	d31e      	bcc.n	8005f5a <__multiply+0x92>
 8005f1c:	f105 0c14 	add.w	ip, r5, #20
 8005f20:	f104 0314 	add.w	r3, r4, #20
 8005f24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005f28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005f2c:	9202      	str	r2, [sp, #8]
 8005f2e:	ebac 0205 	sub.w	r2, ip, r5
 8005f32:	3a15      	subs	r2, #21
 8005f34:	f022 0203 	bic.w	r2, r2, #3
 8005f38:	3204      	adds	r2, #4
 8005f3a:	f105 0115 	add.w	r1, r5, #21
 8005f3e:	458c      	cmp	ip, r1
 8005f40:	bf38      	it	cc
 8005f42:	2204      	movcc	r2, #4
 8005f44:	9201      	str	r2, [sp, #4]
 8005f46:	9a02      	ldr	r2, [sp, #8]
 8005f48:	9303      	str	r3, [sp, #12]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d808      	bhi.n	8005f60 <__multiply+0x98>
 8005f4e:	2f00      	cmp	r7, #0
 8005f50:	dc55      	bgt.n	8005ffe <__multiply+0x136>
 8005f52:	6107      	str	r7, [r0, #16]
 8005f54:	b005      	add	sp, #20
 8005f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5a:	f843 2b04 	str.w	r2, [r3], #4
 8005f5e:	e7db      	b.n	8005f18 <__multiply+0x50>
 8005f60:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f64:	f1ba 0f00 	cmp.w	sl, #0
 8005f68:	d020      	beq.n	8005fac <__multiply+0xe4>
 8005f6a:	f105 0e14 	add.w	lr, r5, #20
 8005f6e:	46b1      	mov	r9, r6
 8005f70:	2200      	movs	r2, #0
 8005f72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005f76:	f8d9 b000 	ldr.w	fp, [r9]
 8005f7a:	b2a1      	uxth	r1, r4
 8005f7c:	fa1f fb8b 	uxth.w	fp, fp
 8005f80:	fb0a b101 	mla	r1, sl, r1, fp
 8005f84:	4411      	add	r1, r2
 8005f86:	f8d9 2000 	ldr.w	r2, [r9]
 8005f8a:	0c24      	lsrs	r4, r4, #16
 8005f8c:	0c12      	lsrs	r2, r2, #16
 8005f8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f96:	b289      	uxth	r1, r1
 8005f98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f9c:	45f4      	cmp	ip, lr
 8005f9e:	f849 1b04 	str.w	r1, [r9], #4
 8005fa2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005fa6:	d8e4      	bhi.n	8005f72 <__multiply+0xaa>
 8005fa8:	9901      	ldr	r1, [sp, #4]
 8005faa:	5072      	str	r2, [r6, r1]
 8005fac:	9a03      	ldr	r2, [sp, #12]
 8005fae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	f1b9 0f00 	cmp.w	r9, #0
 8005fb8:	d01f      	beq.n	8005ffa <__multiply+0x132>
 8005fba:	6834      	ldr	r4, [r6, #0]
 8005fbc:	f105 0114 	add.w	r1, r5, #20
 8005fc0:	46b6      	mov	lr, r6
 8005fc2:	f04f 0a00 	mov.w	sl, #0
 8005fc6:	880a      	ldrh	r2, [r1, #0]
 8005fc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005fcc:	fb09 b202 	mla	r2, r9, r2, fp
 8005fd0:	4492      	add	sl, r2
 8005fd2:	b2a4      	uxth	r4, r4
 8005fd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005fd8:	f84e 4b04 	str.w	r4, [lr], #4
 8005fdc:	f851 4b04 	ldr.w	r4, [r1], #4
 8005fe0:	f8be 2000 	ldrh.w	r2, [lr]
 8005fe4:	0c24      	lsrs	r4, r4, #16
 8005fe6:	fb09 2404 	mla	r4, r9, r4, r2
 8005fea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005fee:	458c      	cmp	ip, r1
 8005ff0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005ff4:	d8e7      	bhi.n	8005fc6 <__multiply+0xfe>
 8005ff6:	9a01      	ldr	r2, [sp, #4]
 8005ff8:	50b4      	str	r4, [r6, r2]
 8005ffa:	3604      	adds	r6, #4
 8005ffc:	e7a3      	b.n	8005f46 <__multiply+0x7e>
 8005ffe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1a5      	bne.n	8005f52 <__multiply+0x8a>
 8006006:	3f01      	subs	r7, #1
 8006008:	e7a1      	b.n	8005f4e <__multiply+0x86>
 800600a:	bf00      	nop
 800600c:	080074b3 	.word	0x080074b3
 8006010:	080074c4 	.word	0x080074c4

08006014 <__pow5mult>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4615      	mov	r5, r2
 800601a:	f012 0203 	ands.w	r2, r2, #3
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	d007      	beq.n	8006034 <__pow5mult+0x20>
 8006024:	4c25      	ldr	r4, [pc, #148]	; (80060bc <__pow5mult+0xa8>)
 8006026:	3a01      	subs	r2, #1
 8006028:	2300      	movs	r3, #0
 800602a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602e:	f7ff fe9b 	bl	8005d68 <__multadd>
 8006032:	4607      	mov	r7, r0
 8006034:	10ad      	asrs	r5, r5, #2
 8006036:	d03d      	beq.n	80060b4 <__pow5mult+0xa0>
 8006038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800603a:	b97c      	cbnz	r4, 800605c <__pow5mult+0x48>
 800603c:	2010      	movs	r0, #16
 800603e:	f7ff fe1b 	bl	8005c78 <malloc>
 8006042:	4602      	mov	r2, r0
 8006044:	6270      	str	r0, [r6, #36]	; 0x24
 8006046:	b928      	cbnz	r0, 8006054 <__pow5mult+0x40>
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <__pow5mult+0xac>)
 800604a:	481e      	ldr	r0, [pc, #120]	; (80060c4 <__pow5mult+0xb0>)
 800604c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006050:	f000 fbcc 	bl	80067ec <__assert_func>
 8006054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006058:	6004      	str	r4, [r0, #0]
 800605a:	60c4      	str	r4, [r0, #12]
 800605c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006064:	b94c      	cbnz	r4, 800607a <__pow5mult+0x66>
 8006066:	f240 2171 	movw	r1, #625	; 0x271
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ff16 	bl	8005e9c <__i2b>
 8006070:	2300      	movs	r3, #0
 8006072:	f8c8 0008 	str.w	r0, [r8, #8]
 8006076:	4604      	mov	r4, r0
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	f04f 0900 	mov.w	r9, #0
 800607e:	07eb      	lsls	r3, r5, #31
 8006080:	d50a      	bpl.n	8006098 <__pow5mult+0x84>
 8006082:	4639      	mov	r1, r7
 8006084:	4622      	mov	r2, r4
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ff1e 	bl	8005ec8 <__multiply>
 800608c:	4639      	mov	r1, r7
 800608e:	4680      	mov	r8, r0
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff fe47 	bl	8005d24 <_Bfree>
 8006096:	4647      	mov	r7, r8
 8006098:	106d      	asrs	r5, r5, #1
 800609a:	d00b      	beq.n	80060b4 <__pow5mult+0xa0>
 800609c:	6820      	ldr	r0, [r4, #0]
 800609e:	b938      	cbnz	r0, 80060b0 <__pow5mult+0x9c>
 80060a0:	4622      	mov	r2, r4
 80060a2:	4621      	mov	r1, r4
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ff0f 	bl	8005ec8 <__multiply>
 80060aa:	6020      	str	r0, [r4, #0]
 80060ac:	f8c0 9000 	str.w	r9, [r0]
 80060b0:	4604      	mov	r4, r0
 80060b2:	e7e4      	b.n	800607e <__pow5mult+0x6a>
 80060b4:	4638      	mov	r0, r7
 80060b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ba:	bf00      	nop
 80060bc:	08007618 	.word	0x08007618
 80060c0:	0800743d 	.word	0x0800743d
 80060c4:	080074c4 	.word	0x080074c4

080060c8 <__lshift>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	6849      	ldr	r1, [r1, #4]
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	4607      	mov	r7, r0
 80060da:	4691      	mov	r9, r2
 80060dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060e0:	f108 0601 	add.w	r6, r8, #1
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	db0b      	blt.n	8006100 <__lshift+0x38>
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff fddb 	bl	8005ca4 <_Balloc>
 80060ee:	4605      	mov	r5, r0
 80060f0:	b948      	cbnz	r0, 8006106 <__lshift+0x3e>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4b28      	ldr	r3, [pc, #160]	; (8006198 <__lshift+0xd0>)
 80060f6:	4829      	ldr	r0, [pc, #164]	; (800619c <__lshift+0xd4>)
 80060f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060fc:	f000 fb76 	bl	80067ec <__assert_func>
 8006100:	3101      	adds	r1, #1
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	e7ee      	b.n	80060e4 <__lshift+0x1c>
 8006106:	2300      	movs	r3, #0
 8006108:	f100 0114 	add.w	r1, r0, #20
 800610c:	f100 0210 	add.w	r2, r0, #16
 8006110:	4618      	mov	r0, r3
 8006112:	4553      	cmp	r3, sl
 8006114:	db33      	blt.n	800617e <__lshift+0xb6>
 8006116:	6920      	ldr	r0, [r4, #16]
 8006118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800611c:	f104 0314 	add.w	r3, r4, #20
 8006120:	f019 091f 	ands.w	r9, r9, #31
 8006124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006128:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800612c:	d02b      	beq.n	8006186 <__lshift+0xbe>
 800612e:	f1c9 0e20 	rsb	lr, r9, #32
 8006132:	468a      	mov	sl, r1
 8006134:	2200      	movs	r2, #0
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	fa00 f009 	lsl.w	r0, r0, r9
 800613c:	4302      	orrs	r2, r0
 800613e:	f84a 2b04 	str.w	r2, [sl], #4
 8006142:	f853 2b04 	ldr.w	r2, [r3], #4
 8006146:	459c      	cmp	ip, r3
 8006148:	fa22 f20e 	lsr.w	r2, r2, lr
 800614c:	d8f3      	bhi.n	8006136 <__lshift+0x6e>
 800614e:	ebac 0304 	sub.w	r3, ip, r4
 8006152:	3b15      	subs	r3, #21
 8006154:	f023 0303 	bic.w	r3, r3, #3
 8006158:	3304      	adds	r3, #4
 800615a:	f104 0015 	add.w	r0, r4, #21
 800615e:	4584      	cmp	ip, r0
 8006160:	bf38      	it	cc
 8006162:	2304      	movcc	r3, #4
 8006164:	50ca      	str	r2, [r1, r3]
 8006166:	b10a      	cbz	r2, 800616c <__lshift+0xa4>
 8006168:	f108 0602 	add.w	r6, r8, #2
 800616c:	3e01      	subs	r6, #1
 800616e:	4638      	mov	r0, r7
 8006170:	612e      	str	r6, [r5, #16]
 8006172:	4621      	mov	r1, r4
 8006174:	f7ff fdd6 	bl	8005d24 <_Bfree>
 8006178:	4628      	mov	r0, r5
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006182:	3301      	adds	r3, #1
 8006184:	e7c5      	b.n	8006112 <__lshift+0x4a>
 8006186:	3904      	subs	r1, #4
 8006188:	f853 2b04 	ldr.w	r2, [r3], #4
 800618c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006190:	459c      	cmp	ip, r3
 8006192:	d8f9      	bhi.n	8006188 <__lshift+0xc0>
 8006194:	e7ea      	b.n	800616c <__lshift+0xa4>
 8006196:	bf00      	nop
 8006198:	080074b3 	.word	0x080074b3
 800619c:	080074c4 	.word	0x080074c4

080061a0 <__mcmp>:
 80061a0:	b530      	push	{r4, r5, lr}
 80061a2:	6902      	ldr	r2, [r0, #16]
 80061a4:	690c      	ldr	r4, [r1, #16]
 80061a6:	1b12      	subs	r2, r2, r4
 80061a8:	d10e      	bne.n	80061c8 <__mcmp+0x28>
 80061aa:	f100 0314 	add.w	r3, r0, #20
 80061ae:	3114      	adds	r1, #20
 80061b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061c0:	42a5      	cmp	r5, r4
 80061c2:	d003      	beq.n	80061cc <__mcmp+0x2c>
 80061c4:	d305      	bcc.n	80061d2 <__mcmp+0x32>
 80061c6:	2201      	movs	r2, #1
 80061c8:	4610      	mov	r0, r2
 80061ca:	bd30      	pop	{r4, r5, pc}
 80061cc:	4283      	cmp	r3, r0
 80061ce:	d3f3      	bcc.n	80061b8 <__mcmp+0x18>
 80061d0:	e7fa      	b.n	80061c8 <__mcmp+0x28>
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	e7f7      	b.n	80061c8 <__mcmp+0x28>

080061d8 <__mdiff>:
 80061d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	460c      	mov	r4, r1
 80061de:	4606      	mov	r6, r0
 80061e0:	4611      	mov	r1, r2
 80061e2:	4620      	mov	r0, r4
 80061e4:	4617      	mov	r7, r2
 80061e6:	f7ff ffdb 	bl	80061a0 <__mcmp>
 80061ea:	1e05      	subs	r5, r0, #0
 80061ec:	d110      	bne.n	8006210 <__mdiff+0x38>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4630      	mov	r0, r6
 80061f2:	f7ff fd57 	bl	8005ca4 <_Balloc>
 80061f6:	b930      	cbnz	r0, 8006206 <__mdiff+0x2e>
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <__mdiff+0x108>)
 80061fa:	4602      	mov	r2, r0
 80061fc:	f240 2132 	movw	r1, #562	; 0x232
 8006200:	4838      	ldr	r0, [pc, #224]	; (80062e4 <__mdiff+0x10c>)
 8006202:	f000 faf3 	bl	80067ec <__assert_func>
 8006206:	2301      	movs	r3, #1
 8006208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800620c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	bfa4      	itt	ge
 8006212:	463b      	movge	r3, r7
 8006214:	4627      	movge	r7, r4
 8006216:	4630      	mov	r0, r6
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	bfa6      	itte	ge
 800621c:	461c      	movge	r4, r3
 800621e:	2500      	movge	r5, #0
 8006220:	2501      	movlt	r5, #1
 8006222:	f7ff fd3f 	bl	8005ca4 <_Balloc>
 8006226:	b920      	cbnz	r0, 8006232 <__mdiff+0x5a>
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <__mdiff+0x108>)
 800622a:	4602      	mov	r2, r0
 800622c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006230:	e7e6      	b.n	8006200 <__mdiff+0x28>
 8006232:	693e      	ldr	r6, [r7, #16]
 8006234:	60c5      	str	r5, [r0, #12]
 8006236:	6925      	ldr	r5, [r4, #16]
 8006238:	f107 0114 	add.w	r1, r7, #20
 800623c:	f104 0914 	add.w	r9, r4, #20
 8006240:	f100 0e14 	add.w	lr, r0, #20
 8006244:	f107 0210 	add.w	r2, r7, #16
 8006248:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800624c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006250:	46f2      	mov	sl, lr
 8006252:	2700      	movs	r7, #0
 8006254:	f859 3b04 	ldr.w	r3, [r9], #4
 8006258:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800625c:	fa1f f883 	uxth.w	r8, r3
 8006260:	fa17 f78b 	uxtah	r7, r7, fp
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	eba7 0808 	sub.w	r8, r7, r8
 800626a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800626e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006272:	fa1f f888 	uxth.w	r8, r8
 8006276:	141f      	asrs	r7, r3, #16
 8006278:	454d      	cmp	r5, r9
 800627a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800627e:	f84a 3b04 	str.w	r3, [sl], #4
 8006282:	d8e7      	bhi.n	8006254 <__mdiff+0x7c>
 8006284:	1b2b      	subs	r3, r5, r4
 8006286:	3b15      	subs	r3, #21
 8006288:	f023 0303 	bic.w	r3, r3, #3
 800628c:	3304      	adds	r3, #4
 800628e:	3415      	adds	r4, #21
 8006290:	42a5      	cmp	r5, r4
 8006292:	bf38      	it	cc
 8006294:	2304      	movcc	r3, #4
 8006296:	4419      	add	r1, r3
 8006298:	4473      	add	r3, lr
 800629a:	469e      	mov	lr, r3
 800629c:	460d      	mov	r5, r1
 800629e:	4565      	cmp	r5, ip
 80062a0:	d30e      	bcc.n	80062c0 <__mdiff+0xe8>
 80062a2:	f10c 0203 	add.w	r2, ip, #3
 80062a6:	1a52      	subs	r2, r2, r1
 80062a8:	f022 0203 	bic.w	r2, r2, #3
 80062ac:	3903      	subs	r1, #3
 80062ae:	458c      	cmp	ip, r1
 80062b0:	bf38      	it	cc
 80062b2:	2200      	movcc	r2, #0
 80062b4:	441a      	add	r2, r3
 80062b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80062ba:	b17b      	cbz	r3, 80062dc <__mdiff+0x104>
 80062bc:	6106      	str	r6, [r0, #16]
 80062be:	e7a5      	b.n	800620c <__mdiff+0x34>
 80062c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80062c4:	fa17 f488 	uxtah	r4, r7, r8
 80062c8:	1422      	asrs	r2, r4, #16
 80062ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80062ce:	b2a4      	uxth	r4, r4
 80062d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80062d4:	f84e 4b04 	str.w	r4, [lr], #4
 80062d8:	1417      	asrs	r7, r2, #16
 80062da:	e7e0      	b.n	800629e <__mdiff+0xc6>
 80062dc:	3e01      	subs	r6, #1
 80062de:	e7ea      	b.n	80062b6 <__mdiff+0xde>
 80062e0:	080074b3 	.word	0x080074b3
 80062e4:	080074c4 	.word	0x080074c4

080062e8 <__d2b>:
 80062e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	4689      	mov	r9, r1
 80062ee:	2101      	movs	r1, #1
 80062f0:	ec57 6b10 	vmov	r6, r7, d0
 80062f4:	4690      	mov	r8, r2
 80062f6:	f7ff fcd5 	bl	8005ca4 <_Balloc>
 80062fa:	4604      	mov	r4, r0
 80062fc:	b930      	cbnz	r0, 800630c <__d2b+0x24>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <__d2b+0xb0>)
 8006302:	4826      	ldr	r0, [pc, #152]	; (800639c <__d2b+0xb4>)
 8006304:	f240 310a 	movw	r1, #778	; 0x30a
 8006308:	f000 fa70 	bl	80067ec <__assert_func>
 800630c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006314:	bb35      	cbnz	r5, 8006364 <__d2b+0x7c>
 8006316:	2e00      	cmp	r6, #0
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	d028      	beq.n	800636e <__d2b+0x86>
 800631c:	4668      	mov	r0, sp
 800631e:	9600      	str	r6, [sp, #0]
 8006320:	f7ff fd8c 	bl	8005e3c <__lo0bits>
 8006324:	9900      	ldr	r1, [sp, #0]
 8006326:	b300      	cbz	r0, 800636a <__d2b+0x82>
 8006328:	9a01      	ldr	r2, [sp, #4]
 800632a:	f1c0 0320 	rsb	r3, r0, #32
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	430b      	orrs	r3, r1
 8006334:	40c2      	lsrs	r2, r0
 8006336:	6163      	str	r3, [r4, #20]
 8006338:	9201      	str	r2, [sp, #4]
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	61a3      	str	r3, [r4, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2202      	movne	r2, #2
 8006344:	2201      	moveq	r2, #1
 8006346:	6122      	str	r2, [r4, #16]
 8006348:	b1d5      	cbz	r5, 8006380 <__d2b+0x98>
 800634a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800634e:	4405      	add	r5, r0
 8006350:	f8c9 5000 	str.w	r5, [r9]
 8006354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006358:	f8c8 0000 	str.w	r0, [r8]
 800635c:	4620      	mov	r0, r4
 800635e:	b003      	add	sp, #12
 8006360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006368:	e7d5      	b.n	8006316 <__d2b+0x2e>
 800636a:	6161      	str	r1, [r4, #20]
 800636c:	e7e5      	b.n	800633a <__d2b+0x52>
 800636e:	a801      	add	r0, sp, #4
 8006370:	f7ff fd64 	bl	8005e3c <__lo0bits>
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	6163      	str	r3, [r4, #20]
 8006378:	2201      	movs	r2, #1
 800637a:	6122      	str	r2, [r4, #16]
 800637c:	3020      	adds	r0, #32
 800637e:	e7e3      	b.n	8006348 <__d2b+0x60>
 8006380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006388:	f8c9 0000 	str.w	r0, [r9]
 800638c:	6918      	ldr	r0, [r3, #16]
 800638e:	f7ff fd35 	bl	8005dfc <__hi0bits>
 8006392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006396:	e7df      	b.n	8006358 <__d2b+0x70>
 8006398:	080074b3 	.word	0x080074b3
 800639c:	080074c4 	.word	0x080074c4

080063a0 <_calloc_r>:
 80063a0:	b513      	push	{r0, r1, r4, lr}
 80063a2:	434a      	muls	r2, r1
 80063a4:	4611      	mov	r1, r2
 80063a6:	9201      	str	r2, [sp, #4]
 80063a8:	f000 f85a 	bl	8006460 <_malloc_r>
 80063ac:	4604      	mov	r4, r0
 80063ae:	b118      	cbz	r0, 80063b8 <_calloc_r+0x18>
 80063b0:	9a01      	ldr	r2, [sp, #4]
 80063b2:	2100      	movs	r1, #0
 80063b4:	f7fe f950 	bl	8004658 <memset>
 80063b8:	4620      	mov	r0, r4
 80063ba:	b002      	add	sp, #8
 80063bc:	bd10      	pop	{r4, pc}
	...

080063c0 <_free_r>:
 80063c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d048      	beq.n	8006458 <_free_r+0x98>
 80063c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f1a1 0404 	sub.w	r4, r1, #4
 80063d2:	bfb8      	it	lt
 80063d4:	18e4      	addlt	r4, r4, r3
 80063d6:	f000 fa65 	bl	80068a4 <__malloc_lock>
 80063da:	4a20      	ldr	r2, [pc, #128]	; (800645c <_free_r+0x9c>)
 80063dc:	9801      	ldr	r0, [sp, #4]
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	4615      	mov	r5, r2
 80063e2:	b933      	cbnz	r3, 80063f2 <_free_r+0x32>
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6014      	str	r4, [r2, #0]
 80063e8:	b003      	add	sp, #12
 80063ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ee:	f000 ba5f 	b.w	80068b0 <__malloc_unlock>
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	d90b      	bls.n	800640e <_free_r+0x4e>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	1862      	adds	r2, r4, r1
 80063fa:	4293      	cmp	r3, r2
 80063fc:	bf04      	itt	eq
 80063fe:	681a      	ldreq	r2, [r3, #0]
 8006400:	685b      	ldreq	r3, [r3, #4]
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	bf04      	itt	eq
 8006406:	1852      	addeq	r2, r2, r1
 8006408:	6022      	streq	r2, [r4, #0]
 800640a:	602c      	str	r4, [r5, #0]
 800640c:	e7ec      	b.n	80063e8 <_free_r+0x28>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x58>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x4e>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1855      	adds	r5, r2, r1
 800641c:	42a5      	cmp	r5, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x78>
 8006420:	6824      	ldr	r4, [r4, #0]
 8006422:	4421      	add	r1, r4
 8006424:	1854      	adds	r4, r2, r1
 8006426:	42a3      	cmp	r3, r4
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1dd      	bne.n	80063e8 <_free_r+0x28>
 800642c:	681c      	ldr	r4, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4421      	add	r1, r4
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	e7d7      	b.n	80063e8 <_free_r+0x28>
 8006438:	d902      	bls.n	8006440 <_free_r+0x80>
 800643a:	230c      	movs	r3, #12
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	e7d3      	b.n	80063e8 <_free_r+0x28>
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	1961      	adds	r1, r4, r5
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1949      	addeq	r1, r1, r5
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7c7      	b.n	80063e8 <_free_r+0x28>
 8006458:	b003      	add	sp, #12
 800645a:	bd30      	pop	{r4, r5, pc}
 800645c:	2000020c 	.word	0x2000020c

08006460 <_malloc_r>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	1ccd      	adds	r5, r1, #3
 8006464:	f025 0503 	bic.w	r5, r5, #3
 8006468:	3508      	adds	r5, #8
 800646a:	2d0c      	cmp	r5, #12
 800646c:	bf38      	it	cc
 800646e:	250c      	movcc	r5, #12
 8006470:	2d00      	cmp	r5, #0
 8006472:	4606      	mov	r6, r0
 8006474:	db01      	blt.n	800647a <_malloc_r+0x1a>
 8006476:	42a9      	cmp	r1, r5
 8006478:	d903      	bls.n	8006482 <_malloc_r+0x22>
 800647a:	230c      	movs	r3, #12
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	2000      	movs	r0, #0
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006482:	f000 fa0f 	bl	80068a4 <__malloc_lock>
 8006486:	4921      	ldr	r1, [pc, #132]	; (800650c <_malloc_r+0xac>)
 8006488:	680a      	ldr	r2, [r1, #0]
 800648a:	4614      	mov	r4, r2
 800648c:	b99c      	cbnz	r4, 80064b6 <_malloc_r+0x56>
 800648e:	4f20      	ldr	r7, [pc, #128]	; (8006510 <_malloc_r+0xb0>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	b923      	cbnz	r3, 800649e <_malloc_r+0x3e>
 8006494:	4621      	mov	r1, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f998 	bl	80067cc <_sbrk_r>
 800649c:	6038      	str	r0, [r7, #0]
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f993 	bl	80067cc <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d123      	bne.n	80064f2 <_malloc_r+0x92>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f9fe 	bl	80068b0 <__malloc_unlock>
 80064b4:	e7e3      	b.n	800647e <_malloc_r+0x1e>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	1b5b      	subs	r3, r3, r5
 80064ba:	d417      	bmi.n	80064ec <_malloc_r+0x8c>
 80064bc:	2b0b      	cmp	r3, #11
 80064be:	d903      	bls.n	80064c8 <_malloc_r+0x68>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	441c      	add	r4, r3
 80064c4:	6025      	str	r5, [r4, #0]
 80064c6:	e004      	b.n	80064d2 <_malloc_r+0x72>
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	42a2      	cmp	r2, r4
 80064cc:	bf0c      	ite	eq
 80064ce:	600b      	streq	r3, [r1, #0]
 80064d0:	6053      	strne	r3, [r2, #4]
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f9ec 	bl	80068b0 <__malloc_unlock>
 80064d8:	f104 000b 	add.w	r0, r4, #11
 80064dc:	1d23      	adds	r3, r4, #4
 80064de:	f020 0007 	bic.w	r0, r0, #7
 80064e2:	1ac2      	subs	r2, r0, r3
 80064e4:	d0cc      	beq.n	8006480 <_malloc_r+0x20>
 80064e6:	1a1b      	subs	r3, r3, r0
 80064e8:	50a3      	str	r3, [r4, r2]
 80064ea:	e7c9      	b.n	8006480 <_malloc_r+0x20>
 80064ec:	4622      	mov	r2, r4
 80064ee:	6864      	ldr	r4, [r4, #4]
 80064f0:	e7cc      	b.n	800648c <_malloc_r+0x2c>
 80064f2:	1cc4      	adds	r4, r0, #3
 80064f4:	f024 0403 	bic.w	r4, r4, #3
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d0e3      	beq.n	80064c4 <_malloc_r+0x64>
 80064fc:	1a21      	subs	r1, r4, r0
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f964 	bl	80067cc <_sbrk_r>
 8006504:	3001      	adds	r0, #1
 8006506:	d1dd      	bne.n	80064c4 <_malloc_r+0x64>
 8006508:	e7cf      	b.n	80064aa <_malloc_r+0x4a>
 800650a:	bf00      	nop
 800650c:	2000020c 	.word	0x2000020c
 8006510:	20000210 	.word	0x20000210

08006514 <__ssputs_r>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	688e      	ldr	r6, [r1, #8]
 800651a:	429e      	cmp	r6, r3
 800651c:	4682      	mov	sl, r0
 800651e:	460c      	mov	r4, r1
 8006520:	4690      	mov	r8, r2
 8006522:	461f      	mov	r7, r3
 8006524:	d838      	bhi.n	8006598 <__ssputs_r+0x84>
 8006526:	898a      	ldrh	r2, [r1, #12]
 8006528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800652c:	d032      	beq.n	8006594 <__ssputs_r+0x80>
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	6909      	ldr	r1, [r1, #16]
 8006532:	eba5 0901 	sub.w	r9, r5, r1
 8006536:	6965      	ldr	r5, [r4, #20]
 8006538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800653c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006540:	3301      	adds	r3, #1
 8006542:	444b      	add	r3, r9
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	429d      	cmp	r5, r3
 8006548:	bf38      	it	cc
 800654a:	461d      	movcc	r5, r3
 800654c:	0553      	lsls	r3, r2, #21
 800654e:	d531      	bpl.n	80065b4 <__ssputs_r+0xa0>
 8006550:	4629      	mov	r1, r5
 8006552:	f7ff ff85 	bl	8006460 <_malloc_r>
 8006556:	4606      	mov	r6, r0
 8006558:	b950      	cbnz	r0, 8006570 <__ssputs_r+0x5c>
 800655a:	230c      	movs	r3, #12
 800655c:	f8ca 3000 	str.w	r3, [sl]
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	6921      	ldr	r1, [r4, #16]
 8006572:	464a      	mov	r2, r9
 8006574:	f7ff fb88 	bl	8005c88 <memcpy>
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	6126      	str	r6, [r4, #16]
 8006586:	6165      	str	r5, [r4, #20]
 8006588:	444e      	add	r6, r9
 800658a:	eba5 0509 	sub.w	r5, r5, r9
 800658e:	6026      	str	r6, [r4, #0]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	463e      	mov	r6, r7
 8006594:	42be      	cmp	r6, r7
 8006596:	d900      	bls.n	800659a <__ssputs_r+0x86>
 8006598:	463e      	mov	r6, r7
 800659a:	4632      	mov	r2, r6
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	4641      	mov	r1, r8
 80065a0:	f000 f966 	bl	8006870 <memmove>
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	1b9b      	subs	r3, r3, r6
 80065aa:	4432      	add	r2, r6
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7db      	b.n	800656c <__ssputs_r+0x58>
 80065b4:	462a      	mov	r2, r5
 80065b6:	f000 f981 	bl	80068bc <_realloc_r>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1e1      	bne.n	8006584 <__ssputs_r+0x70>
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	4650      	mov	r0, sl
 80065c4:	f7ff fefc 	bl	80063c0 <_free_r>
 80065c8:	e7c7      	b.n	800655a <__ssputs_r+0x46>
	...

080065cc <_svfiprintf_r>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4698      	mov	r8, r3
 80065d2:	898b      	ldrh	r3, [r1, #12]
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	b09d      	sub	sp, #116	; 0x74
 80065d8:	4607      	mov	r7, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	d50e      	bpl.n	80065fe <_svfiprintf_r+0x32>
 80065e0:	690b      	ldr	r3, [r1, #16]
 80065e2:	b963      	cbnz	r3, 80065fe <_svfiprintf_r+0x32>
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	f7ff ff3b 	bl	8006460 <_malloc_r>
 80065ea:	6028      	str	r0, [r5, #0]
 80065ec:	6128      	str	r0, [r5, #16]
 80065ee:	b920      	cbnz	r0, 80065fa <_svfiprintf_r+0x2e>
 80065f0:	230c      	movs	r3, #12
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e0d1      	b.n	800679e <_svfiprintf_r+0x1d2>
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	616b      	str	r3, [r5, #20]
 80065fe:	2300      	movs	r3, #0
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	2320      	movs	r3, #32
 8006604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006608:	f8cd 800c 	str.w	r8, [sp, #12]
 800660c:	2330      	movs	r3, #48	; 0x30
 800660e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067b8 <_svfiprintf_r+0x1ec>
 8006612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	4623      	mov	r3, r4
 800661c:	469a      	mov	sl, r3
 800661e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006622:	b10a      	cbz	r2, 8006628 <_svfiprintf_r+0x5c>
 8006624:	2a25      	cmp	r2, #37	; 0x25
 8006626:	d1f9      	bne.n	800661c <_svfiprintf_r+0x50>
 8006628:	ebba 0b04 	subs.w	fp, sl, r4
 800662c:	d00b      	beq.n	8006646 <_svfiprintf_r+0x7a>
 800662e:	465b      	mov	r3, fp
 8006630:	4622      	mov	r2, r4
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff6d 	bl	8006514 <__ssputs_r>
 800663a:	3001      	adds	r0, #1
 800663c:	f000 80aa 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006642:	445a      	add	r2, fp
 8006644:	9209      	str	r2, [sp, #36]	; 0x24
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a2 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006650:	2300      	movs	r3, #0
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665a:	f10a 0a01 	add.w	sl, sl, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006666:	931a      	str	r3, [sp, #104]	; 0x68
 8006668:	4654      	mov	r4, sl
 800666a:	2205      	movs	r2, #5
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	4851      	ldr	r0, [pc, #324]	; (80067b8 <_svfiprintf_r+0x1ec>)
 8006672:	f7f9 fdd5 	bl	8000220 <memchr>
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	b9d8      	cbnz	r0, 80066b2 <_svfiprintf_r+0xe6>
 800667a:	06d0      	lsls	r0, r2, #27
 800667c:	bf44      	itt	mi
 800667e:	2320      	movmi	r3, #32
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006684:	0711      	lsls	r1, r2, #28
 8006686:	bf44      	itt	mi
 8006688:	232b      	movmi	r3, #43	; 0x2b
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b2a      	cmp	r3, #42	; 0x2a
 8006694:	d015      	beq.n	80066c2 <_svfiprintf_r+0xf6>
 8006696:	9a07      	ldr	r2, [sp, #28]
 8006698:	4654      	mov	r4, sl
 800669a:	2000      	movs	r0, #0
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	4621      	mov	r1, r4
 80066a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a6:	3b30      	subs	r3, #48	; 0x30
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d94e      	bls.n	800674a <_svfiprintf_r+0x17e>
 80066ac:	b1b0      	cbz	r0, 80066dc <_svfiprintf_r+0x110>
 80066ae:	9207      	str	r2, [sp, #28]
 80066b0:	e014      	b.n	80066dc <_svfiprintf_r+0x110>
 80066b2:	eba0 0308 	sub.w	r3, r0, r8
 80066b6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	46a2      	mov	sl, r4
 80066c0:	e7d2      	b.n	8006668 <_svfiprintf_r+0x9c>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbb      	ittet	lt
 80066ce:	425b      	neglt	r3, r3
 80066d0:	f042 0202 	orrlt.w	r2, r2, #2
 80066d4:	9307      	strge	r3, [sp, #28]
 80066d6:	9307      	strlt	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	9204      	strlt	r2, [sp, #16]
 80066dc:	7823      	ldrb	r3, [r4, #0]
 80066de:	2b2e      	cmp	r3, #46	; 0x2e
 80066e0:	d10c      	bne.n	80066fc <_svfiprintf_r+0x130>
 80066e2:	7863      	ldrb	r3, [r4, #1]
 80066e4:	2b2a      	cmp	r3, #42	; 0x2a
 80066e6:	d135      	bne.n	8006754 <_svfiprintf_r+0x188>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d1a      	adds	r2, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9203      	str	r2, [sp, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfb8      	it	lt
 80066f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f8:	3402      	adds	r4, #2
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067c8 <_svfiprintf_r+0x1fc>
 8006700:	7821      	ldrb	r1, [r4, #0]
 8006702:	2203      	movs	r2, #3
 8006704:	4650      	mov	r0, sl
 8006706:	f7f9 fd8b 	bl	8000220 <memchr>
 800670a:	b140      	cbz	r0, 800671e <_svfiprintf_r+0x152>
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	eba0 000a 	sub.w	r0, r0, sl
 8006712:	fa03 f000 	lsl.w	r0, r3, r0
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	4303      	orrs	r3, r0
 800671a:	3401      	adds	r4, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4826      	ldr	r0, [pc, #152]	; (80067bc <_svfiprintf_r+0x1f0>)
 8006724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006728:	2206      	movs	r2, #6
 800672a:	f7f9 fd79 	bl	8000220 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d038      	beq.n	80067a4 <_svfiprintf_r+0x1d8>
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <_svfiprintf_r+0x1f4>)
 8006734:	bb1b      	cbnz	r3, 800677e <_svfiprintf_r+0x1b2>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	3307      	adds	r3, #7
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	3308      	adds	r3, #8
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006744:	4433      	add	r3, r6
 8006746:	9309      	str	r3, [sp, #36]	; 0x24
 8006748:	e767      	b.n	800661a <_svfiprintf_r+0x4e>
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	e7a5      	b.n	80066a0 <_svfiprintf_r+0xd4>
 8006754:	2300      	movs	r3, #0
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4620      	mov	r0, r4
 8006762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006766:	3a30      	subs	r2, #48	; 0x30
 8006768:	2a09      	cmp	r2, #9
 800676a:	d903      	bls.n	8006774 <_svfiprintf_r+0x1a8>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c5      	beq.n	80066fc <_svfiprintf_r+0x130>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e7c3      	b.n	80066fc <_svfiprintf_r+0x130>
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	e7f0      	b.n	8006760 <_svfiprintf_r+0x194>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <_svfiprintf_r+0x1f8>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4638      	mov	r0, r7
 800678a:	f7fe f80d 	bl	80047a8 <_printf_float>
 800678e:	1c42      	adds	r2, r0, #1
 8006790:	4606      	mov	r6, r0
 8006792:	d1d6      	bne.n	8006742 <_svfiprintf_r+0x176>
 8006794:	89ab      	ldrh	r3, [r5, #12]
 8006796:	065b      	lsls	r3, r3, #25
 8006798:	f53f af2c 	bmi.w	80065f4 <_svfiprintf_r+0x28>
 800679c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800679e:	b01d      	add	sp, #116	; 0x74
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <_svfiprintf_r+0x1f8>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7fe fa9e 	bl	8004cf0 <_printf_i>
 80067b4:	e7eb      	b.n	800678e <_svfiprintf_r+0x1c2>
 80067b6:	bf00      	nop
 80067b8:	08007624 	.word	0x08007624
 80067bc:	0800762e 	.word	0x0800762e
 80067c0:	080047a9 	.word	0x080047a9
 80067c4:	08006515 	.word	0x08006515
 80067c8:	0800762a 	.word	0x0800762a

080067cc <_sbrk_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d06      	ldr	r5, [pc, #24]	; (80067e8 <_sbrk_r+0x1c>)
 80067d0:	2300      	movs	r3, #0
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fb fa16 	bl	8001c08 <_sbrk>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_sbrk_r+0x1a>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_sbrk_r+0x1a>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	20000308 	.word	0x20000308

080067ec <__assert_func>:
 80067ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067ee:	4614      	mov	r4, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <__assert_func+0x2c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4605      	mov	r5, r0
 80067f8:	68d8      	ldr	r0, [r3, #12]
 80067fa:	b14c      	cbz	r4, 8006810 <__assert_func+0x24>
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <__assert_func+0x30>)
 80067fe:	9100      	str	r1, [sp, #0]
 8006800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006804:	4906      	ldr	r1, [pc, #24]	; (8006820 <__assert_func+0x34>)
 8006806:	462b      	mov	r3, r5
 8006808:	f000 f80e 	bl	8006828 <fiprintf>
 800680c:	f000 faa4 	bl	8006d58 <abort>
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <__assert_func+0x38>)
 8006812:	461c      	mov	r4, r3
 8006814:	e7f3      	b.n	80067fe <__assert_func+0x12>
 8006816:	bf00      	nop
 8006818:	2000000c 	.word	0x2000000c
 800681c:	08007635 	.word	0x08007635
 8006820:	08007642 	.word	0x08007642
 8006824:	08007670 	.word	0x08007670

08006828 <fiprintf>:
 8006828:	b40e      	push	{r1, r2, r3}
 800682a:	b503      	push	{r0, r1, lr}
 800682c:	4601      	mov	r1, r0
 800682e:	ab03      	add	r3, sp, #12
 8006830:	4805      	ldr	r0, [pc, #20]	; (8006848 <fiprintf+0x20>)
 8006832:	f853 2b04 	ldr.w	r2, [r3], #4
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	f000 f88f 	bl	800695c <_vfiprintf_r>
 800683e:	b002      	add	sp, #8
 8006840:	f85d eb04 	ldr.w	lr, [sp], #4
 8006844:	b003      	add	sp, #12
 8006846:	4770      	bx	lr
 8006848:	2000000c 	.word	0x2000000c

0800684c <__ascii_mbtowc>:
 800684c:	b082      	sub	sp, #8
 800684e:	b901      	cbnz	r1, 8006852 <__ascii_mbtowc+0x6>
 8006850:	a901      	add	r1, sp, #4
 8006852:	b142      	cbz	r2, 8006866 <__ascii_mbtowc+0x1a>
 8006854:	b14b      	cbz	r3, 800686a <__ascii_mbtowc+0x1e>
 8006856:	7813      	ldrb	r3, [r2, #0]
 8006858:	600b      	str	r3, [r1, #0]
 800685a:	7812      	ldrb	r2, [r2, #0]
 800685c:	1e10      	subs	r0, r2, #0
 800685e:	bf18      	it	ne
 8006860:	2001      	movne	r0, #1
 8006862:	b002      	add	sp, #8
 8006864:	4770      	bx	lr
 8006866:	4610      	mov	r0, r2
 8006868:	e7fb      	b.n	8006862 <__ascii_mbtowc+0x16>
 800686a:	f06f 0001 	mvn.w	r0, #1
 800686e:	e7f8      	b.n	8006862 <__ascii_mbtowc+0x16>

08006870 <memmove>:
 8006870:	4288      	cmp	r0, r1
 8006872:	b510      	push	{r4, lr}
 8006874:	eb01 0402 	add.w	r4, r1, r2
 8006878:	d902      	bls.n	8006880 <memmove+0x10>
 800687a:	4284      	cmp	r4, r0
 800687c:	4623      	mov	r3, r4
 800687e:	d807      	bhi.n	8006890 <memmove+0x20>
 8006880:	1e43      	subs	r3, r0, #1
 8006882:	42a1      	cmp	r1, r4
 8006884:	d008      	beq.n	8006898 <memmove+0x28>
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688e:	e7f8      	b.n	8006882 <memmove+0x12>
 8006890:	4402      	add	r2, r0
 8006892:	4601      	mov	r1, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	d100      	bne.n	800689a <memmove+0x2a>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a2:	e7f7      	b.n	8006894 <memmove+0x24>

080068a4 <__malloc_lock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__malloc_lock+0x8>)
 80068a6:	f000 bc17 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	20000310 	.word	0x20000310

080068b0 <__malloc_unlock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_unlock+0x8>)
 80068b2:	f000 bc12 	b.w	80070da <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000310 	.word	0x20000310

080068bc <_realloc_r>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	4607      	mov	r7, r0
 80068c0:	4614      	mov	r4, r2
 80068c2:	460e      	mov	r6, r1
 80068c4:	b921      	cbnz	r1, 80068d0 <_realloc_r+0x14>
 80068c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068ca:	4611      	mov	r1, r2
 80068cc:	f7ff bdc8 	b.w	8006460 <_malloc_r>
 80068d0:	b922      	cbnz	r2, 80068dc <_realloc_r+0x20>
 80068d2:	f7ff fd75 	bl	80063c0 <_free_r>
 80068d6:	4625      	mov	r5, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	f000 fc62 	bl	80071a4 <_malloc_usable_size_r>
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d20f      	bcs.n	8006904 <_realloc_r+0x48>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4638      	mov	r0, r7
 80068e8:	f7ff fdba 	bl	8006460 <_malloc_r>
 80068ec:	4605      	mov	r5, r0
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d0f2      	beq.n	80068d8 <_realloc_r+0x1c>
 80068f2:	4631      	mov	r1, r6
 80068f4:	4622      	mov	r2, r4
 80068f6:	f7ff f9c7 	bl	8005c88 <memcpy>
 80068fa:	4631      	mov	r1, r6
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff fd5f 	bl	80063c0 <_free_r>
 8006902:	e7e9      	b.n	80068d8 <_realloc_r+0x1c>
 8006904:	4635      	mov	r5, r6
 8006906:	e7e7      	b.n	80068d8 <_realloc_r+0x1c>

08006908 <__sfputc_r>:
 8006908:	6893      	ldr	r3, [r2, #8]
 800690a:	3b01      	subs	r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	b410      	push	{r4}
 8006910:	6093      	str	r3, [r2, #8]
 8006912:	da08      	bge.n	8006926 <__sfputc_r+0x1e>
 8006914:	6994      	ldr	r4, [r2, #24]
 8006916:	42a3      	cmp	r3, r4
 8006918:	db01      	blt.n	800691e <__sfputc_r+0x16>
 800691a:	290a      	cmp	r1, #10
 800691c:	d103      	bne.n	8006926 <__sfputc_r+0x1e>
 800691e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006922:	f000 b94b 	b.w	8006bbc <__swbuf_r>
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	1c58      	adds	r0, r3, #1
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	7019      	strb	r1, [r3, #0]
 800692e:	4608      	mov	r0, r1
 8006930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006934:	4770      	bx	lr

08006936 <__sfputs_r>:
 8006936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006938:	4606      	mov	r6, r0
 800693a:	460f      	mov	r7, r1
 800693c:	4614      	mov	r4, r2
 800693e:	18d5      	adds	r5, r2, r3
 8006940:	42ac      	cmp	r4, r5
 8006942:	d101      	bne.n	8006948 <__sfputs_r+0x12>
 8006944:	2000      	movs	r0, #0
 8006946:	e007      	b.n	8006958 <__sfputs_r+0x22>
 8006948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694c:	463a      	mov	r2, r7
 800694e:	4630      	mov	r0, r6
 8006950:	f7ff ffda 	bl	8006908 <__sfputc_r>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d1f3      	bne.n	8006940 <__sfputs_r+0xa>
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800695c <_vfiprintf_r>:
 800695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	460d      	mov	r5, r1
 8006962:	b09d      	sub	sp, #116	; 0x74
 8006964:	4614      	mov	r4, r2
 8006966:	4698      	mov	r8, r3
 8006968:	4606      	mov	r6, r0
 800696a:	b118      	cbz	r0, 8006974 <_vfiprintf_r+0x18>
 800696c:	6983      	ldr	r3, [r0, #24]
 800696e:	b90b      	cbnz	r3, 8006974 <_vfiprintf_r+0x18>
 8006970:	f000 fb14 	bl	8006f9c <__sinit>
 8006974:	4b89      	ldr	r3, [pc, #548]	; (8006b9c <_vfiprintf_r+0x240>)
 8006976:	429d      	cmp	r5, r3
 8006978:	d11b      	bne.n	80069b2 <_vfiprintf_r+0x56>
 800697a:	6875      	ldr	r5, [r6, #4]
 800697c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697e:	07d9      	lsls	r1, r3, #31
 8006980:	d405      	bmi.n	800698e <_vfiprintf_r+0x32>
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	059a      	lsls	r2, r3, #22
 8006986:	d402      	bmi.n	800698e <_vfiprintf_r+0x32>
 8006988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800698a:	f000 fba5 	bl	80070d8 <__retarget_lock_acquire_recursive>
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	071b      	lsls	r3, r3, #28
 8006992:	d501      	bpl.n	8006998 <_vfiprintf_r+0x3c>
 8006994:	692b      	ldr	r3, [r5, #16]
 8006996:	b9eb      	cbnz	r3, 80069d4 <_vfiprintf_r+0x78>
 8006998:	4629      	mov	r1, r5
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f96e 	bl	8006c7c <__swsetup_r>
 80069a0:	b1c0      	cbz	r0, 80069d4 <_vfiprintf_r+0x78>
 80069a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a4:	07dc      	lsls	r4, r3, #31
 80069a6:	d50e      	bpl.n	80069c6 <_vfiprintf_r+0x6a>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	b01d      	add	sp, #116	; 0x74
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b2:	4b7b      	ldr	r3, [pc, #492]	; (8006ba0 <_vfiprintf_r+0x244>)
 80069b4:	429d      	cmp	r5, r3
 80069b6:	d101      	bne.n	80069bc <_vfiprintf_r+0x60>
 80069b8:	68b5      	ldr	r5, [r6, #8]
 80069ba:	e7df      	b.n	800697c <_vfiprintf_r+0x20>
 80069bc:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <_vfiprintf_r+0x248>)
 80069be:	429d      	cmp	r5, r3
 80069c0:	bf08      	it	eq
 80069c2:	68f5      	ldreq	r5, [r6, #12]
 80069c4:	e7da      	b.n	800697c <_vfiprintf_r+0x20>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	0598      	lsls	r0, r3, #22
 80069ca:	d4ed      	bmi.n	80069a8 <_vfiprintf_r+0x4c>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f000 fb84 	bl	80070da <__retarget_lock_release_recursive>
 80069d2:	e7e9      	b.n	80069a8 <_vfiprintf_r+0x4c>
 80069d4:	2300      	movs	r3, #0
 80069d6:	9309      	str	r3, [sp, #36]	; 0x24
 80069d8:	2320      	movs	r3, #32
 80069da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069de:	f8cd 800c 	str.w	r8, [sp, #12]
 80069e2:	2330      	movs	r3, #48	; 0x30
 80069e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ba8 <_vfiprintf_r+0x24c>
 80069e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ec:	f04f 0901 	mov.w	r9, #1
 80069f0:	4623      	mov	r3, r4
 80069f2:	469a      	mov	sl, r3
 80069f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f8:	b10a      	cbz	r2, 80069fe <_vfiprintf_r+0xa2>
 80069fa:	2a25      	cmp	r2, #37	; 0x25
 80069fc:	d1f9      	bne.n	80069f2 <_vfiprintf_r+0x96>
 80069fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006a02:	d00b      	beq.n	8006a1c <_vfiprintf_r+0xc0>
 8006a04:	465b      	mov	r3, fp
 8006a06:	4622      	mov	r2, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7ff ff93 	bl	8006936 <__sfputs_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	f000 80aa 	beq.w	8006b6a <_vfiprintf_r+0x20e>
 8006a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a18:	445a      	add	r2, fp
 8006a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80a2 	beq.w	8006b6a <_vfiprintf_r+0x20e>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a30:	f10a 0a01 	add.w	sl, sl, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a3e:	4654      	mov	r4, sl
 8006a40:	2205      	movs	r2, #5
 8006a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a46:	4858      	ldr	r0, [pc, #352]	; (8006ba8 <_vfiprintf_r+0x24c>)
 8006a48:	f7f9 fbea 	bl	8000220 <memchr>
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	b9d8      	cbnz	r0, 8006a88 <_vfiprintf_r+0x12c>
 8006a50:	06d1      	lsls	r1, r2, #27
 8006a52:	bf44      	itt	mi
 8006a54:	2320      	movmi	r3, #32
 8006a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5a:	0713      	lsls	r3, r2, #28
 8006a5c:	bf44      	itt	mi
 8006a5e:	232b      	movmi	r3, #43	; 0x2b
 8006a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a64:	f89a 3000 	ldrb.w	r3, [sl]
 8006a68:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6a:	d015      	beq.n	8006a98 <_vfiprintf_r+0x13c>
 8006a6c:	9a07      	ldr	r2, [sp, #28]
 8006a6e:	4654      	mov	r4, sl
 8006a70:	2000      	movs	r0, #0
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4621      	mov	r1, r4
 8006a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a7c:	3b30      	subs	r3, #48	; 0x30
 8006a7e:	2b09      	cmp	r3, #9
 8006a80:	d94e      	bls.n	8006b20 <_vfiprintf_r+0x1c4>
 8006a82:	b1b0      	cbz	r0, 8006ab2 <_vfiprintf_r+0x156>
 8006a84:	9207      	str	r2, [sp, #28]
 8006a86:	e014      	b.n	8006ab2 <_vfiprintf_r+0x156>
 8006a88:	eba0 0308 	sub.w	r3, r0, r8
 8006a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a90:	4313      	orrs	r3, r2
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	46a2      	mov	sl, r4
 8006a96:	e7d2      	b.n	8006a3e <_vfiprintf_r+0xe2>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d19      	adds	r1, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9103      	str	r1, [sp, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfbb      	ittet	lt
 8006aa4:	425b      	neglt	r3, r3
 8006aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8006aaa:	9307      	strge	r3, [sp, #28]
 8006aac:	9307      	strlt	r3, [sp, #28]
 8006aae:	bfb8      	it	lt
 8006ab0:	9204      	strlt	r2, [sp, #16]
 8006ab2:	7823      	ldrb	r3, [r4, #0]
 8006ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab6:	d10c      	bne.n	8006ad2 <_vfiprintf_r+0x176>
 8006ab8:	7863      	ldrb	r3, [r4, #1]
 8006aba:	2b2a      	cmp	r3, #42	; 0x2a
 8006abc:	d135      	bne.n	8006b2a <_vfiprintf_r+0x1ce>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	1d1a      	adds	r2, r3, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	9203      	str	r2, [sp, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ace:	3402      	adds	r4, #2
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bb8 <_vfiprintf_r+0x25c>
 8006ad6:	7821      	ldrb	r1, [r4, #0]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	4650      	mov	r0, sl
 8006adc:	f7f9 fba0 	bl	8000220 <memchr>
 8006ae0:	b140      	cbz	r0, 8006af4 <_vfiprintf_r+0x198>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	eba0 000a 	sub.w	r0, r0, sl
 8006ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8006aec:	9b04      	ldr	r3, [sp, #16]
 8006aee:	4303      	orrs	r3, r0
 8006af0:	3401      	adds	r4, #1
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af8:	482c      	ldr	r0, [pc, #176]	; (8006bac <_vfiprintf_r+0x250>)
 8006afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006afe:	2206      	movs	r2, #6
 8006b00:	f7f9 fb8e 	bl	8000220 <memchr>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d03f      	beq.n	8006b88 <_vfiprintf_r+0x22c>
 8006b08:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <_vfiprintf_r+0x254>)
 8006b0a:	bb1b      	cbnz	r3, 8006b54 <_vfiprintf_r+0x1f8>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	3307      	adds	r3, #7
 8006b10:	f023 0307 	bic.w	r3, r3, #7
 8006b14:	3308      	adds	r3, #8
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	443b      	add	r3, r7
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	e767      	b.n	80069f0 <_vfiprintf_r+0x94>
 8006b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b24:	460c      	mov	r4, r1
 8006b26:	2001      	movs	r0, #1
 8006b28:	e7a5      	b.n	8006a76 <_vfiprintf_r+0x11a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	3401      	adds	r4, #1
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	4619      	mov	r1, r3
 8006b32:	f04f 0c0a 	mov.w	ip, #10
 8006b36:	4620      	mov	r0, r4
 8006b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3c:	3a30      	subs	r2, #48	; 0x30
 8006b3e:	2a09      	cmp	r2, #9
 8006b40:	d903      	bls.n	8006b4a <_vfiprintf_r+0x1ee>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0c5      	beq.n	8006ad2 <_vfiprintf_r+0x176>
 8006b46:	9105      	str	r1, [sp, #20]
 8006b48:	e7c3      	b.n	8006ad2 <_vfiprintf_r+0x176>
 8006b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b4e:	4604      	mov	r4, r0
 8006b50:	2301      	movs	r3, #1
 8006b52:	e7f0      	b.n	8006b36 <_vfiprintf_r+0x1da>
 8006b54:	ab03      	add	r3, sp, #12
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <_vfiprintf_r+0x258>)
 8006b5c:	a904      	add	r1, sp, #16
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7fd fe22 	bl	80047a8 <_printf_float>
 8006b64:	4607      	mov	r7, r0
 8006b66:	1c78      	adds	r0, r7, #1
 8006b68:	d1d6      	bne.n	8006b18 <_vfiprintf_r+0x1bc>
 8006b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b6c:	07d9      	lsls	r1, r3, #31
 8006b6e:	d405      	bmi.n	8006b7c <_vfiprintf_r+0x220>
 8006b70:	89ab      	ldrh	r3, [r5, #12]
 8006b72:	059a      	lsls	r2, r3, #22
 8006b74:	d402      	bmi.n	8006b7c <_vfiprintf_r+0x220>
 8006b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b78:	f000 faaf 	bl	80070da <__retarget_lock_release_recursive>
 8006b7c:	89ab      	ldrh	r3, [r5, #12]
 8006b7e:	065b      	lsls	r3, r3, #25
 8006b80:	f53f af12 	bmi.w	80069a8 <_vfiprintf_r+0x4c>
 8006b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b86:	e711      	b.n	80069ac <_vfiprintf_r+0x50>
 8006b88:	ab03      	add	r3, sp, #12
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <_vfiprintf_r+0x258>)
 8006b90:	a904      	add	r1, sp, #16
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7fe f8ac 	bl	8004cf0 <_printf_i>
 8006b98:	e7e4      	b.n	8006b64 <_vfiprintf_r+0x208>
 8006b9a:	bf00      	nop
 8006b9c:	0800779c 	.word	0x0800779c
 8006ba0:	080077bc 	.word	0x080077bc
 8006ba4:	0800777c 	.word	0x0800777c
 8006ba8:	08007624 	.word	0x08007624
 8006bac:	0800762e 	.word	0x0800762e
 8006bb0:	080047a9 	.word	0x080047a9
 8006bb4:	08006937 	.word	0x08006937
 8006bb8:	0800762a 	.word	0x0800762a

08006bbc <__swbuf_r>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	460e      	mov	r6, r1
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	b118      	cbz	r0, 8006bce <__swbuf_r+0x12>
 8006bc6:	6983      	ldr	r3, [r0, #24]
 8006bc8:	b90b      	cbnz	r3, 8006bce <__swbuf_r+0x12>
 8006bca:	f000 f9e7 	bl	8006f9c <__sinit>
 8006bce:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <__swbuf_r+0x98>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	d12b      	bne.n	8006c2c <__swbuf_r+0x70>
 8006bd4:	686c      	ldr	r4, [r5, #4]
 8006bd6:	69a3      	ldr	r3, [r4, #24]
 8006bd8:	60a3      	str	r3, [r4, #8]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	071a      	lsls	r2, r3, #28
 8006bde:	d52f      	bpl.n	8006c40 <__swbuf_r+0x84>
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	b36b      	cbz	r3, 8006c40 <__swbuf_r+0x84>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	1ac0      	subs	r0, r0, r3
 8006bea:	6963      	ldr	r3, [r4, #20]
 8006bec:	b2f6      	uxtb	r6, r6
 8006bee:	4283      	cmp	r3, r0
 8006bf0:	4637      	mov	r7, r6
 8006bf2:	dc04      	bgt.n	8006bfe <__swbuf_r+0x42>
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f93c 	bl	8006e74 <_fflush_r>
 8006bfc:	bb30      	cbnz	r0, 8006c4c <__swbuf_r+0x90>
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	60a3      	str	r3, [r4, #8]
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	6022      	str	r2, [r4, #0]
 8006c0a:	701e      	strb	r6, [r3, #0]
 8006c0c:	6963      	ldr	r3, [r4, #20]
 8006c0e:	3001      	adds	r0, #1
 8006c10:	4283      	cmp	r3, r0
 8006c12:	d004      	beq.n	8006c1e <__swbuf_r+0x62>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	07db      	lsls	r3, r3, #31
 8006c18:	d506      	bpl.n	8006c28 <__swbuf_r+0x6c>
 8006c1a:	2e0a      	cmp	r6, #10
 8006c1c:	d104      	bne.n	8006c28 <__swbuf_r+0x6c>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f927 	bl	8006e74 <_fflush_r>
 8006c26:	b988      	cbnz	r0, 8006c4c <__swbuf_r+0x90>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <__swbuf_r+0x9c>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <__swbuf_r+0x7a>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7cf      	b.n	8006bd6 <__swbuf_r+0x1a>
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <__swbuf_r+0xa0>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7ca      	b.n	8006bd6 <__swbuf_r+0x1a>
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f81a 	bl	8006c7c <__swsetup_r>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d0cb      	beq.n	8006be4 <__swbuf_r+0x28>
 8006c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c50:	e7ea      	b.n	8006c28 <__swbuf_r+0x6c>
 8006c52:	bf00      	nop
 8006c54:	0800779c 	.word	0x0800779c
 8006c58:	080077bc 	.word	0x080077bc
 8006c5c:	0800777c 	.word	0x0800777c

08006c60 <__ascii_wctomb>:
 8006c60:	b149      	cbz	r1, 8006c76 <__ascii_wctomb+0x16>
 8006c62:	2aff      	cmp	r2, #255	; 0xff
 8006c64:	bf85      	ittet	hi
 8006c66:	238a      	movhi	r3, #138	; 0x8a
 8006c68:	6003      	strhi	r3, [r0, #0]
 8006c6a:	700a      	strbls	r2, [r1, #0]
 8006c6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c70:	bf98      	it	ls
 8006c72:	2001      	movls	r0, #1
 8006c74:	4770      	bx	lr
 8006c76:	4608      	mov	r0, r1
 8006c78:	4770      	bx	lr
	...

08006c7c <__swsetup_r>:
 8006c7c:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <__swsetup_r+0xcc>)
 8006c7e:	b570      	push	{r4, r5, r6, lr}
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	4606      	mov	r6, r0
 8006c84:	460c      	mov	r4, r1
 8006c86:	b125      	cbz	r5, 8006c92 <__swsetup_r+0x16>
 8006c88:	69ab      	ldr	r3, [r5, #24]
 8006c8a:	b913      	cbnz	r3, 8006c92 <__swsetup_r+0x16>
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f985 	bl	8006f9c <__sinit>
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <__swsetup_r+0xd0>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d10f      	bne.n	8006cb8 <__swsetup_r+0x3c>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ca0:	0719      	lsls	r1, r3, #28
 8006ca2:	d42c      	bmi.n	8006cfe <__swsetup_r+0x82>
 8006ca4:	06dd      	lsls	r5, r3, #27
 8006ca6:	d411      	bmi.n	8006ccc <__swsetup_r+0x50>
 8006ca8:	2309      	movs	r3, #9
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	e03e      	b.n	8006d36 <__swsetup_r+0xba>
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <__swsetup_r+0xd4>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d101      	bne.n	8006cc2 <__swsetup_r+0x46>
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	e7eb      	b.n	8006c9a <__swsetup_r+0x1e>
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <__swsetup_r+0xd8>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	bf08      	it	eq
 8006cc8:	68ec      	ldreq	r4, [r5, #12]
 8006cca:	e7e6      	b.n	8006c9a <__swsetup_r+0x1e>
 8006ccc:	0758      	lsls	r0, r3, #29
 8006cce:	d512      	bpl.n	8006cf6 <__swsetup_r+0x7a>
 8006cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cd2:	b141      	cbz	r1, 8006ce6 <__swsetup_r+0x6a>
 8006cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	d002      	beq.n	8006ce2 <__swsetup_r+0x66>
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fb6f 	bl	80063c0 <_free_r>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f043 0308 	orr.w	r3, r3, #8
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	b94b      	cbnz	r3, 8006d16 <__swsetup_r+0x9a>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0c:	d003      	beq.n	8006d16 <__swsetup_r+0x9a>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4630      	mov	r0, r6
 8006d12:	f000 fa07 	bl	8007124 <__smakebuf_r>
 8006d16:	89a0      	ldrh	r0, [r4, #12]
 8006d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d1c:	f010 0301 	ands.w	r3, r0, #1
 8006d20:	d00a      	beq.n	8006d38 <__swsetup_r+0xbc>
 8006d22:	2300      	movs	r3, #0
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	6963      	ldr	r3, [r4, #20]
 8006d28:	425b      	negs	r3, r3
 8006d2a:	61a3      	str	r3, [r4, #24]
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	b943      	cbnz	r3, 8006d42 <__swsetup_r+0xc6>
 8006d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d34:	d1ba      	bne.n	8006cac <__swsetup_r+0x30>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	0781      	lsls	r1, r0, #30
 8006d3a:	bf58      	it	pl
 8006d3c:	6963      	ldrpl	r3, [r4, #20]
 8006d3e:	60a3      	str	r3, [r4, #8]
 8006d40:	e7f4      	b.n	8006d2c <__swsetup_r+0xb0>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e7f7      	b.n	8006d36 <__swsetup_r+0xba>
 8006d46:	bf00      	nop
 8006d48:	2000000c 	.word	0x2000000c
 8006d4c:	0800779c 	.word	0x0800779c
 8006d50:	080077bc 	.word	0x080077bc
 8006d54:	0800777c 	.word	0x0800777c

08006d58 <abort>:
 8006d58:	b508      	push	{r3, lr}
 8006d5a:	2006      	movs	r0, #6
 8006d5c:	f000 fa52 	bl	8007204 <raise>
 8006d60:	2001      	movs	r0, #1
 8006d62:	f7fa fef5 	bl	8001b50 <_exit>
	...

08006d68 <__sflush_r>:
 8006d68:	898a      	ldrh	r2, [r1, #12]
 8006d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	4605      	mov	r5, r0
 8006d70:	0710      	lsls	r0, r2, #28
 8006d72:	460c      	mov	r4, r1
 8006d74:	d458      	bmi.n	8006e28 <__sflush_r+0xc0>
 8006d76:	684b      	ldr	r3, [r1, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc05      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc02      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d0f9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d94:	682f      	ldr	r7, [r5, #0]
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	d032      	beq.n	8006e00 <__sflush_r+0x98>
 8006d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	075a      	lsls	r2, r3, #29
 8006da0:	d505      	bpl.n	8006dae <__sflush_r+0x46>
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da8:	b10b      	cbz	r3, 8006dae <__sflush_r+0x46>
 8006daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dac:	1ac0      	subs	r0, r0, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	4602      	mov	r2, r0
 8006db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	d106      	bne.n	8006dce <__sflush_r+0x66>
 8006dc0:	6829      	ldr	r1, [r5, #0]
 8006dc2:	291d      	cmp	r1, #29
 8006dc4:	d82c      	bhi.n	8006e20 <__sflush_r+0xb8>
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <__sflush_r+0x108>)
 8006dc8:	40ca      	lsrs	r2, r1
 8006dca:	07d6      	lsls	r6, r2, #31
 8006dcc:	d528      	bpl.n	8006e20 <__sflush_r+0xb8>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	04d9      	lsls	r1, r3, #19
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	d504      	bpl.n	8006de4 <__sflush_r+0x7c>
 8006dda:	1c42      	adds	r2, r0, #1
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0x7a>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b903      	cbnz	r3, 8006de4 <__sflush_r+0x7c>
 8006de2:	6560      	str	r0, [r4, #84]	; 0x54
 8006de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d0ca      	beq.n	8006d82 <__sflush_r+0x1a>
 8006dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__sflush_r+0x92>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f7ff fae3 	bl	80063c0 <_free_r>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfe:	e7c1      	b.n	8006d84 <__sflush_r+0x1c>
 8006e00:	6a21      	ldr	r1, [r4, #32]
 8006e02:	2301      	movs	r3, #1
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b0      	blx	r6
 8006e08:	1c41      	adds	r1, r0, #1
 8006e0a:	d1c7      	bne.n	8006d9c <__sflush_r+0x34>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c4      	beq.n	8006d9c <__sflush_r+0x34>
 8006e12:	2b1d      	cmp	r3, #29
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0xb2>
 8006e16:	2b16      	cmp	r3, #22
 8006e18:	d101      	bne.n	8006e1e <__sflush_r+0xb6>
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	e7b1      	b.n	8006d82 <__sflush_r+0x1a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7ad      	b.n	8006d84 <__sflush_r+0x1c>
 8006e28:	690f      	ldr	r7, [r1, #16]
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	d0a9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006e2e:	0793      	lsls	r3, r2, #30
 8006e30:	680e      	ldr	r6, [r1, #0]
 8006e32:	bf08      	it	eq
 8006e34:	694b      	ldreq	r3, [r1, #20]
 8006e36:	600f      	str	r7, [r1, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	eba6 0807 	sub.w	r8, r6, r7
 8006e40:	608b      	str	r3, [r1, #8]
 8006e42:	f1b8 0f00 	cmp.w	r8, #0
 8006e46:	dd9c      	ble.n	8006d82 <__sflush_r+0x1a>
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dc06      	bgt.n	8006e66 <__sflush_r+0xfe>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e78e      	b.n	8006d84 <__sflush_r+0x1c>
 8006e66:	4407      	add	r7, r0
 8006e68:	eba8 0800 	sub.w	r8, r8, r0
 8006e6c:	e7e9      	b.n	8006e42 <__sflush_r+0xda>
 8006e6e:	bf00      	nop
 8006e70:	20400001 	.word	0x20400001

08006e74 <_fflush_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b913      	cbnz	r3, 8006e84 <_fflush_r+0x10>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	b118      	cbz	r0, 8006e8e <_fflush_r+0x1a>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <_fflush_r+0x1a>
 8006e8a:	f000 f887 	bl	8006f9c <__sinit>
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <_fflush_r+0x6c>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d11b      	bne.n	8006ecc <_fflush_r+0x58>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ef      	beq.n	8006e7e <_fflush_r+0xa>
 8006e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d404      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea4:	0599      	lsls	r1, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eaa:	f000 f915 	bl	80070d8 <__retarget_lock_acquire_recursive>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f7ff ff59 	bl	8006d68 <__sflush_r>
 8006eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	4605      	mov	r5, r0
 8006ebc:	d4e0      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d4dd      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f908 	bl	80070da <__retarget_lock_release_recursive>
 8006eca:	e7d9      	b.n	8006e80 <_fflush_r+0xc>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <_fflush_r+0x70>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d101      	bne.n	8006ed6 <_fflush_r+0x62>
 8006ed2:	68ac      	ldr	r4, [r5, #8]
 8006ed4:	e7df      	b.n	8006e96 <_fflush_r+0x22>
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <_fflush_r+0x74>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	bf08      	it	eq
 8006edc:	68ec      	ldreq	r4, [r5, #12]
 8006ede:	e7da      	b.n	8006e96 <_fflush_r+0x22>
 8006ee0:	0800779c 	.word	0x0800779c
 8006ee4:	080077bc 	.word	0x080077bc
 8006ee8:	0800777c 	.word	0x0800777c

08006eec <std>:
 8006eec:	2300      	movs	r3, #0
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006efa:	6083      	str	r3, [r0, #8]
 8006efc:	8181      	strh	r1, [r0, #12]
 8006efe:	6643      	str	r3, [r0, #100]	; 0x64
 8006f00:	81c2      	strh	r2, [r0, #14]
 8006f02:	6183      	str	r3, [r0, #24]
 8006f04:	4619      	mov	r1, r3
 8006f06:	2208      	movs	r2, #8
 8006f08:	305c      	adds	r0, #92	; 0x5c
 8006f0a:	f7fd fba5 	bl	8004658 <memset>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x38>)
 8006f10:	6263      	str	r3, [r4, #36]	; 0x24
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x3c>)
 8006f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <std+0x40>)
 8006f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x44>)
 8006f1c:	6224      	str	r4, [r4, #32]
 8006f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	0800723d 	.word	0x0800723d
 8006f28:	0800725f 	.word	0x0800725f
 8006f2c:	08007297 	.word	0x08007297
 8006f30:	080072bb 	.word	0x080072bb

08006f34 <_cleanup_r>:
 8006f34:	4901      	ldr	r1, [pc, #4]	; (8006f3c <_cleanup_r+0x8>)
 8006f36:	f000 b8af 	b.w	8007098 <_fwalk_reent>
 8006f3a:	bf00      	nop
 8006f3c:	08006e75 	.word	0x08006e75

08006f40 <__sfmoreglue>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	1e4a      	subs	r2, r1, #1
 8006f44:	2568      	movs	r5, #104	; 0x68
 8006f46:	4355      	muls	r5, r2
 8006f48:	460e      	mov	r6, r1
 8006f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f4e:	f7ff fa87 	bl	8006460 <_malloc_r>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b140      	cbz	r0, 8006f68 <__sfmoreglue+0x28>
 8006f56:	2100      	movs	r1, #0
 8006f58:	e9c0 1600 	strd	r1, r6, [r0]
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	60a0      	str	r0, [r4, #8]
 8006f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f64:	f7fd fb78 	bl	8004658 <memset>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b8b3 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000314 	.word	0x20000314

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b8ae 	b.w	80070da <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20000314 	.word	0x20000314

08006f84 <__sinit_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sinit_lock_acquire+0x8>)
 8006f86:	f000 b8a7 	b.w	80070d8 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	2000030f 	.word	0x2000030f

08006f90 <__sinit_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sinit_lock_release+0x8>)
 8006f92:	f000 b8a2 	b.w	80070da <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	2000030f 	.word	0x2000030f

08006f9c <__sinit>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f7ff fff0 	bl	8006f84 <__sinit_lock_acquire>
 8006fa4:	69a3      	ldr	r3, [r4, #24]
 8006fa6:	b11b      	cbz	r3, 8006fb0 <__sinit+0x14>
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f7ff bff0 	b.w	8006f90 <__sinit_lock_release>
 8006fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <__sinit+0x68>)
 8006fb8:	4a13      	ldr	r2, [pc, #76]	; (8007008 <__sinit+0x6c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	bf04      	itt	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	61a3      	streq	r3, [r4, #24]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f820 	bl	800700c <__sfp>
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f81c 	bl	800700c <__sfp>
 8006fd4:	60a0      	str	r0, [r4, #8]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f818 	bl	800700c <__sfp>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60e0      	str	r0, [r4, #12]
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	6860      	ldr	r0, [r4, #4]
 8006fe4:	f7ff ff82 	bl	8006eec <std>
 8006fe8:	68a0      	ldr	r0, [r4, #8]
 8006fea:	2201      	movs	r2, #1
 8006fec:	2109      	movs	r1, #9
 8006fee:	f7ff ff7d 	bl	8006eec <std>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2112      	movs	r1, #18
 8006ff8:	f7ff ff78 	bl	8006eec <std>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	e7d2      	b.n	8006fa8 <__sinit+0xc>
 8007002:	bf00      	nop
 8007004:	080073f8 	.word	0x080073f8
 8007008:	08006f35 	.word	0x08006f35

0800700c <__sfp>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	4607      	mov	r7, r0
 8007010:	f7ff ffac 	bl	8006f6c <__sfp_lock_acquire>
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <__sfp+0x84>)
 8007016:	681e      	ldr	r6, [r3, #0]
 8007018:	69b3      	ldr	r3, [r6, #24]
 800701a:	b913      	cbnz	r3, 8007022 <__sfp+0x16>
 800701c:	4630      	mov	r0, r6
 800701e:	f7ff ffbd 	bl	8006f9c <__sinit>
 8007022:	3648      	adds	r6, #72	; 0x48
 8007024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	d503      	bpl.n	8007034 <__sfp+0x28>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	b30b      	cbz	r3, 8007074 <__sfp+0x68>
 8007030:	6836      	ldr	r6, [r6, #0]
 8007032:	e7f7      	b.n	8007024 <__sfp+0x18>
 8007034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007038:	b9d5      	cbnz	r5, 8007070 <__sfp+0x64>
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <__sfp+0x88>)
 800703c:	60e3      	str	r3, [r4, #12]
 800703e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007042:	6665      	str	r5, [r4, #100]	; 0x64
 8007044:	f000 f847 	bl	80070d6 <__retarget_lock_init_recursive>
 8007048:	f7ff ff96 	bl	8006f78 <__sfp_lock_release>
 800704c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	61a5      	str	r5, [r4, #24]
 8007058:	2208      	movs	r2, #8
 800705a:	4629      	mov	r1, r5
 800705c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007060:	f7fd fafa 	bl	8004658 <memset>
 8007064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800706c:	4620      	mov	r0, r4
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	3468      	adds	r4, #104	; 0x68
 8007072:	e7d9      	b.n	8007028 <__sfp+0x1c>
 8007074:	2104      	movs	r1, #4
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ff62 	bl	8006f40 <__sfmoreglue>
 800707c:	4604      	mov	r4, r0
 800707e:	6030      	str	r0, [r6, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1d5      	bne.n	8007030 <__sfp+0x24>
 8007084:	f7ff ff78 	bl	8006f78 <__sfp_lock_release>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	e7ee      	b.n	800706c <__sfp+0x60>
 800708e:	bf00      	nop
 8007090:	080073f8 	.word	0x080073f8
 8007094:	ffff0001 	.word	0xffff0001

08007098 <_fwalk_reent>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4606      	mov	r6, r0
 800709e:	4688      	mov	r8, r1
 80070a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070a4:	2700      	movs	r7, #0
 80070a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070aa:	f1b9 0901 	subs.w	r9, r9, #1
 80070ae:	d505      	bpl.n	80070bc <_fwalk_reent+0x24>
 80070b0:	6824      	ldr	r4, [r4, #0]
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d1f7      	bne.n	80070a6 <_fwalk_reent+0xe>
 80070b6:	4638      	mov	r0, r7
 80070b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d907      	bls.n	80070d2 <_fwalk_reent+0x3a>
 80070c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c6:	3301      	adds	r3, #1
 80070c8:	d003      	beq.n	80070d2 <_fwalk_reent+0x3a>
 80070ca:	4629      	mov	r1, r5
 80070cc:	4630      	mov	r0, r6
 80070ce:	47c0      	blx	r8
 80070d0:	4307      	orrs	r7, r0
 80070d2:	3568      	adds	r5, #104	; 0x68
 80070d4:	e7e9      	b.n	80070aa <_fwalk_reent+0x12>

080070d6 <__retarget_lock_init_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_acquire_recursive>:
 80070d8:	4770      	bx	lr

080070da <__retarget_lock_release_recursive>:
 80070da:	4770      	bx	lr

080070dc <__swhatbuf_r>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	460e      	mov	r6, r1
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	b096      	sub	sp, #88	; 0x58
 80070e8:	4614      	mov	r4, r2
 80070ea:	461d      	mov	r5, r3
 80070ec:	da07      	bge.n	80070fe <__swhatbuf_r+0x22>
 80070ee:	2300      	movs	r3, #0
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	89b3      	ldrh	r3, [r6, #12]
 80070f4:	061a      	lsls	r2, r3, #24
 80070f6:	d410      	bmi.n	800711a <__swhatbuf_r+0x3e>
 80070f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fc:	e00e      	b.n	800711c <__swhatbuf_r+0x40>
 80070fe:	466a      	mov	r2, sp
 8007100:	f000 f902 	bl	8007308 <_fstat_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	dbf2      	blt.n	80070ee <__swhatbuf_r+0x12>
 8007108:	9a01      	ldr	r2, [sp, #4]
 800710a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800710e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007112:	425a      	negs	r2, r3
 8007114:	415a      	adcs	r2, r3
 8007116:	602a      	str	r2, [r5, #0]
 8007118:	e7ee      	b.n	80070f8 <__swhatbuf_r+0x1c>
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	2000      	movs	r0, #0
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	b016      	add	sp, #88	; 0x58
 8007122:	bd70      	pop	{r4, r5, r6, pc}

08007124 <__smakebuf_r>:
 8007124:	898b      	ldrh	r3, [r1, #12]
 8007126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007128:	079d      	lsls	r5, r3, #30
 800712a:	4606      	mov	r6, r0
 800712c:	460c      	mov	r4, r1
 800712e:	d507      	bpl.n	8007140 <__smakebuf_r+0x1c>
 8007130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	2301      	movs	r3, #1
 800713a:	6163      	str	r3, [r4, #20]
 800713c:	b002      	add	sp, #8
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	ab01      	add	r3, sp, #4
 8007142:	466a      	mov	r2, sp
 8007144:	f7ff ffca 	bl	80070dc <__swhatbuf_r>
 8007148:	9900      	ldr	r1, [sp, #0]
 800714a:	4605      	mov	r5, r0
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff f987 	bl	8006460 <_malloc_r>
 8007152:	b948      	cbnz	r0, 8007168 <__smakebuf_r+0x44>
 8007154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007158:	059a      	lsls	r2, r3, #22
 800715a:	d4ef      	bmi.n	800713c <__smakebuf_r+0x18>
 800715c:	f023 0303 	bic.w	r3, r3, #3
 8007160:	f043 0302 	orr.w	r3, r3, #2
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	e7e3      	b.n	8007130 <__smakebuf_r+0xc>
 8007168:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <__smakebuf_r+0x7c>)
 800716a:	62b3      	str	r3, [r6, #40]	; 0x28
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	6020      	str	r0, [r4, #0]
 8007170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	6163      	str	r3, [r4, #20]
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	6120      	str	r0, [r4, #16]
 800717e:	b15b      	cbz	r3, 8007198 <__smakebuf_r+0x74>
 8007180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007184:	4630      	mov	r0, r6
 8007186:	f000 f8d1 	bl	800732c <_isatty_r>
 800718a:	b128      	cbz	r0, 8007198 <__smakebuf_r+0x74>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	89a0      	ldrh	r0, [r4, #12]
 800719a:	4305      	orrs	r5, r0
 800719c:	81a5      	strh	r5, [r4, #12]
 800719e:	e7cd      	b.n	800713c <__smakebuf_r+0x18>
 80071a0:	08006f35 	.word	0x08006f35

080071a4 <_malloc_usable_size_r>:
 80071a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a8:	1f18      	subs	r0, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfbc      	itt	lt
 80071ae:	580b      	ldrlt	r3, [r1, r0]
 80071b0:	18c0      	addlt	r0, r0, r3
 80071b2:	4770      	bx	lr

080071b4 <_raise_r>:
 80071b4:	291f      	cmp	r1, #31
 80071b6:	b538      	push	{r3, r4, r5, lr}
 80071b8:	4604      	mov	r4, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	d904      	bls.n	80071c8 <_raise_r+0x14>
 80071be:	2316      	movs	r3, #22
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071ca:	b112      	cbz	r2, 80071d2 <_raise_r+0x1e>
 80071cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071d0:	b94b      	cbnz	r3, 80071e6 <_raise_r+0x32>
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 f830 	bl	8007238 <_getpid_r>
 80071d8:	462a      	mov	r2, r5
 80071da:	4601      	mov	r1, r0
 80071dc:	4620      	mov	r0, r4
 80071de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e2:	f000 b817 	b.w	8007214 <_kill_r>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d00a      	beq.n	8007200 <_raise_r+0x4c>
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	d103      	bne.n	80071f6 <_raise_r+0x42>
 80071ee:	2316      	movs	r3, #22
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	2001      	movs	r0, #1
 80071f4:	e7e7      	b.n	80071c6 <_raise_r+0x12>
 80071f6:	2400      	movs	r4, #0
 80071f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071fc:	4628      	mov	r0, r5
 80071fe:	4798      	blx	r3
 8007200:	2000      	movs	r0, #0
 8007202:	e7e0      	b.n	80071c6 <_raise_r+0x12>

08007204 <raise>:
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <raise+0xc>)
 8007206:	4601      	mov	r1, r0
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f7ff bfd3 	b.w	80071b4 <_raise_r>
 800720e:	bf00      	nop
 8007210:	2000000c 	.word	0x2000000c

08007214 <_kill_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	; (8007234 <_kill_r+0x20>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f7fa fc85 	bl	8001b30 <_kill>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d102      	bne.n	8007230 <_kill_r+0x1c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b103      	cbz	r3, 8007230 <_kill_r+0x1c>
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	20000308 	.word	0x20000308

08007238 <_getpid_r>:
 8007238:	f7fa bc72 	b.w	8001b20 <_getpid>

0800723c <__sread>:
 800723c:	b510      	push	{r4, lr}
 800723e:	460c      	mov	r4, r1
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	f000 f894 	bl	8007370 <_read_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	bfab      	itete	ge
 800724c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800724e:	89a3      	ldrhlt	r3, [r4, #12]
 8007250:	181b      	addge	r3, r3, r0
 8007252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007256:	bfac      	ite	ge
 8007258:	6563      	strge	r3, [r4, #84]	; 0x54
 800725a:	81a3      	strhlt	r3, [r4, #12]
 800725c:	bd10      	pop	{r4, pc}

0800725e <__swrite>:
 800725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	461f      	mov	r7, r3
 8007264:	898b      	ldrh	r3, [r1, #12]
 8007266:	05db      	lsls	r3, r3, #23
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4616      	mov	r6, r2
 800726e:	d505      	bpl.n	800727c <__swrite+0x1e>
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	2302      	movs	r3, #2
 8007276:	2200      	movs	r2, #0
 8007278:	f000 f868 	bl	800734c <_lseek_r>
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	4628      	mov	r0, r5
 800728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	f000 b817 	b.w	80072c4 <_write_r>

08007296 <__sseek>:
 8007296:	b510      	push	{r4, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729e:	f000 f855 	bl	800734c <_lseek_r>
 80072a2:	1c43      	adds	r3, r0, #1
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	bf15      	itete	ne
 80072a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072b2:	81a3      	strheq	r3, [r4, #12]
 80072b4:	bf18      	it	ne
 80072b6:	81a3      	strhne	r3, [r4, #12]
 80072b8:	bd10      	pop	{r4, pc}

080072ba <__sclose>:
 80072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072be:	f000 b813 	b.w	80072e8 <_close_r>
	...

080072c4 <_write_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d07      	ldr	r5, [pc, #28]	; (80072e4 <_write_r+0x20>)
 80072c8:	4604      	mov	r4, r0
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	602a      	str	r2, [r5, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7fa f890 	bl	80013f8 <_write>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_write_r+0x1e>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_write_r+0x1e>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000308 	.word	0x20000308

080072e8 <_close_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d06      	ldr	r5, [pc, #24]	; (8007304 <_close_r+0x1c>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa fc53 	bl	8001b9e <_close>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_close_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_close_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	20000308 	.word	0x20000308

08007308 <_fstat_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d07      	ldr	r5, [pc, #28]	; (8007328 <_fstat_r+0x20>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	4611      	mov	r1, r2
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f7fa fc4e 	bl	8001bb6 <_fstat>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d102      	bne.n	8007324 <_fstat_r+0x1c>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	b103      	cbz	r3, 8007324 <_fstat_r+0x1c>
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	bf00      	nop
 8007328:	20000308 	.word	0x20000308

0800732c <_isatty_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d06      	ldr	r5, [pc, #24]	; (8007348 <_isatty_r+0x1c>)
 8007330:	2300      	movs	r3, #0
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	f7fa fc4d 	bl	8001bd6 <_isatty>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_isatty_r+0x1a>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_isatty_r+0x1a>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20000308 	.word	0x20000308

0800734c <_lseek_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_lseek_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7fa fc46 	bl	8001bec <_lseek>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_lseek_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_lseek_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000308 	.word	0x20000308

08007370 <_read_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d07      	ldr	r5, [pc, #28]	; (8007390 <_read_r+0x20>)
 8007374:	4604      	mov	r4, r0
 8007376:	4608      	mov	r0, r1
 8007378:	4611      	mov	r1, r2
 800737a:	2200      	movs	r2, #0
 800737c:	602a      	str	r2, [r5, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	f7fa fbf0 	bl	8001b64 <_read>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_read_r+0x1e>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_read_r+0x1e>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20000308 	.word	0x20000308

08007394 <_init>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr

080073a0 <_fini>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr
